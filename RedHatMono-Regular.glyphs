{
.appVersion = "3424";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = MCKL;
},
{
name = panose;
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
6,
29,
31,
32,
33,
35,
37,
38,
67,
69
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
A,
Aacute,
Abreve,
Acircumflex,
Adieresis,
Agrave,
Amacron,
Aogonek,
Aring,
Atilde,
AE,
B,
C,
Cacute,
Ccaron,
Ccedilla,
Ccircumflex,
Cdotaccent,
D,
Dcaron,
Dcroat,
Eth,
E,
Eacute,
Ebreve,
Ecaron,
Ecircumflex,
Edieresis,
Edotaccent,
Egrave,
Emacron,
Eogonek,
F,
G,
Gbreve,
Gcircumflex,
uni0122,
Gdotaccent,
H,
Hbar,
Hcircumflex,
I,
IJ,
Iacute,
Ibreve,
Icircumflex,
Idieresis,
Idotaccent,
Igrave,
Imacron,
Iogonek,
Itilde,
J,
uni004A0301,
Jcircumflex,
K,
uni0136,
L,
Lacute,
Lcaron,
uni013B,
Lslash,
M,
N,
Nacute,
Ncaron,
uni0145,
Ntilde,
Eng,
O,
Oacute,
Obreve,
Ocircumflex,
Odieresis,
Ograve,
Ohungarumlaut,
Omacron,
Oslash,
Otilde,
OE,
P,
Thorn,
Q,
R,
Racute,
Rcaron,
uni0156,
S,
Sacute,
Scaron,
Scedilla,
Scircumflex,
uni0218,
uni1E9E,
T,
Tbar,
Tcaron,
uni0162,
uni021A,
U,
Uacute,
Ubreve,
Ucircumflex,
Udieresis,
Ugrave,
Uhungarumlaut,
Umacron,
Uogonek,
Uring,
Utilde,
V,
W,
Wacute,
Wcircumflex,
Wdieresis,
Wgrave,
X,
Y,
Yacute,
Ycircumflex,
Ydieresis,
Ygrave,
Z,
Zacute,
Zcaron,
Zdotaccent,
a,
aacute,
abreve,
acircumflex,
adieresis,
agrave,
amacron,
aogonek,
aring,
atilde,
ae,
b,
c,
cacute,
ccaron,
ccedilla,
ccircumflex,
cdotaccent,
d,
dcaron,
dcroat,
eth,
e,
eacute,
ebreve,
ecaron,
ecircumflex,
edieresis,
edotaccent,
egrave,
emacron,
eogonek,
f,
g,
gbreve,
gcircumflex,
uni0123,
gdotaccent,
h,
hbar,
hcircumflex,
i,
dotlessi,
iacute,
ibreve,
icircumflex,
idieresis,
i.loclTRK,
igrave,
imacron,
iogonek,
itilde,
ij,
j,
uni0237,
uni006A0301,
jcircumflex,
k,
uni0137,
kgreenlandic,
l,
lacute,
lcaron,
uni013C,
lslash,
m,
n,
nacute,
ncaron,
uni0146,
ntilde,
eng,
o,
oacute,
obreve,
ocircumflex,
odieresis,
ograve,
ohungarumlaut,
omacron,
oslash,
otilde,
oe,
p,
thorn,
q,
r,
racute,
rcaron,
uni0157,
s,
sacute,
scaron,
scedilla,
scircumflex,
uni0219,
germandbls,
t,
tbar,
tcaron,
uni0163,
uni021B,
u,
uacute,
ubreve,
ucircumflex,
udieresis,
ugrave,
uhungarumlaut,
umacron,
uogonek,
uring,
utilde,
v,
w,
wacute,
wcircumflex,
wdieresis,
wgrave,
x,
y,
yacute,
ycircumflex,
ydieresis,
ygrave,
z,
zacute,
zcaron,
zdotaccent,
g.alt,
gbreve.alt,
gcircumflex.alt,
uni0123.alt,
gdotaccent.alt,
a.school,
aacute.school,
abreve.school,
acircumflex.school,
adieresis.school,
agrave.school,
amacron.school,
aogonek.school,
aring.school,
atilde.school,
ordfeminine,
ordmasculine,
space,
uni00A0,
uni2002,
uni2003,
uni2009,
uni200A,
uni200B,
uniFEFF,
CR,
NULL,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
exclamdown.case,
questiondown.case,
periodcentered.case,
periodcentered.loclCAT,
periodcentered.loclCAT.case,
hyphen,
endash,
emdash,
uni2015,
underscore,
hyphen.case,
endash.case,
emdash.case,
uni2015.case,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
at,
ampersand,
paragraph,
section,
copyright,
registered,
trademark,
degree,
minute,
second,
bar,
brokenbar,
dagger,
daggerdbl,
uniFFFD,
at.case,
cent,
currency,
dollar,
Euro,
sterling,
yen,
uni2215,
plus,
minus,
multiply,
divide,
equal,
notequal,
greater,
less,
plusminus,
asciitilde,
logicalnot,
asciicircum,
uni00B5,
percent,
perthousand,
arrowup,
arrowdown,
uni0308,
uni0307,
gravecomb,
acutecomb,
uni030B,
uni030C.alt,
uni0302,
uni030C,
uni0306,
uni030A,
tildecomb,
uni0304,
uni0312,
uni0326,
uni0327,
uni0328,
dieresis,
dotaccent,
grave,
acute,
hungarumlaut,
circumflex,
caron,
breve,
ring,
tilde,
macron,
cedilla,
ogonek,
uni02BC,
uni02BB,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
zero.slash,
fraction,
onehalf,
onequarter,
threequarters,
uni2080,
uni2081,
uni2082,
uni2083,
uni2084,
uni2085,
uni2086,
uni2087,
uni2088,
uni2089,
uni2070,
uni00B9,
uni00B2,
uni00B3,
uni2074,
uni2075,
uni2076,
uni2077,
uni2078,
uni2079,
caronSlovak,
commaaccencomb,
cordinal,
reversequotedblleft,
reversequoteleft
);
},
{
disabled = 1;
name = isFixedPitch;
value = 1;
}
);
date = "2024-10-11 15:26:23 +0000";
familyName = "Red Hat Mono";
featurePrefixes = (
{
code = "lookup SUB_14 {
	sub hyphen by hyphen.case;
	sub endash by endash.case;
	sub emdash by emdash.case;
	sub uni2015 by uni2015.case;
} SUB_14;
lookup SUB_16 {
	sub hyphen by hyphen.case;
	sub endash by endash.case;
	sub emdash by emdash.case;
	sub uni2015 by uni2015.case;
} SUB_16;
lookup SUB_18 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub i by dotlessi;
	sub j by uni0237;
} SUB_18;
lookup SUB_21 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_21;
";
name = Prefix;
},
{
automatic = 1;
code = "languagesystem DFLT dflt;

languagesystem latn dflt;
languagesystem latn AZE;
languagesystem latn CRT;
languagesystem latn TRK;
languagesystem latn ROM;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature locl;
feature ss01;
feature ss02;
feature case;
feature frac;
feature dnom;
feature subs;
feature numr;
feature sups;
feature zero;
feature calt;
feature sinf;
feature ordn;
";
tag = aalt;
},
{
code = "script latn;
language AZE;
lookup SUB_2 {
	sub i by i.loclTRK;
} SUB_2;
language CRT;
lookup SUB_2;
language TRK;
lookup SUB_2;
language ROM;
lookup SUB_3 {
	sub Scedilla by uni0218;
	sub uni0162 by uni021A;
	sub scedilla by uni0219;
	sub uni0163 by uni021B;
} SUB_3;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	sub a by a.school;
	sub aacute by aacute.school;
	sub abreve by abreve.school;
	sub acircumflex by acircumflex.school;
	sub adieresis by adieresis.school;
	sub agrave by agrave.school;
	sub amacron by amacron.school;
	sub aogonek by aogonek.school;
	sub aring by aring.school;
	sub atilde by atilde.school;
} SUB_4;
script latn;
language dflt;
lookup SUB_4;
language AZE;
lookup SUB_4;
language CRT;
lookup SUB_4;
language ROM;
lookup SUB_4;
language TRK;
lookup SUB_4;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_5 {
	sub g by g.alt;
	sub gbreve by gbreve.alt;
	sub gcircumflex by gcircumflex.alt;
	sub uni0123 by uni0123.alt;
	sub gdotaccent by gdotaccent.alt;
} SUB_5;
script latn;
language dflt;
lookup SUB_5;
language AZE;
lookup SUB_5;
language CRT;
lookup SUB_5;
language ROM;
lookup SUB_5;
language TRK;
lookup SUB_5;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_6 {
	sub exclamdown by exclamdown.case;
	sub questiondown by questiondown.case;
	sub periodcentered by periodcentered.case;
	sub periodcentered.loclCAT by periodcentered.loclCAT.case;
	sub hyphen by hyphen.case;
	sub endash by endash.case;
	sub emdash by emdash.case;
	sub uni2015 by uni2015.case;
	sub at by at.case;
} SUB_6;
script latn;
language dflt;
lookup SUB_6;
language AZE;
lookup SUB_6;
language CRT;
lookup SUB_6;
language ROM;
lookup SUB_6;
language TRK;
lookup SUB_6;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup SUB_7 {
	sub one slash two by onehalf;
	sub one slash four by onequarter;
	sub three slash four by threequarters;
} SUB_7;
script latn;
language dflt;
lookup SUB_7;
language AZE;
lookup SUB_7;
language CRT;
lookup SUB_7;
language ROM;
lookup SUB_7;
language TRK;
lookup SUB_7;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_8 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_8;
script latn;
language dflt;
lookup SUB_8;
language AZE;
lookup SUB_8;
language CRT;
lookup SUB_8;
language ROM;
lookup SUB_8;
language TRK;
lookup SUB_8;
";
tag = dnom;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_9;
script latn;
language dflt;
lookup SUB_9;
language AZE;
lookup SUB_9;
language CRT;
lookup SUB_9;
language ROM;
lookup SUB_9;
language TRK;
lookup SUB_9;
";
tag = subs;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub zero by uni2070;
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
	sub four by uni2074;
	sub five by uni2075;
	sub six by uni2076;
	sub seven by uni2077;
	sub eight by uni2078;
	sub nine by uni2079;
} SUB_10;
script latn;
language dflt;
lookup SUB_10;
language AZE;
lookup SUB_10;
language CRT;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = numr;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub zero by uni2070;
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
	sub four by uni2074;
	sub five by uni2075;
	sub six by uni2076;
	sub seven by uni2077;
	sub eight by uni2078;
	sub nine by uni2079;
} SUB_11;
script latn;
language dflt;
lookup SUB_11;
language AZE;
lookup SUB_11;
language CRT;
lookup SUB_11;
language ROM;
lookup SUB_11;
language TRK;
lookup SUB_11;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_12 {
	sub zero by zero.slash;
} SUB_12;
script latn;
language dflt;
lookup SUB_12;
language AZE;
lookup SUB_12;
language CRT;
lookup SUB_12;
language ROM;
lookup SUB_12;
language TRK;
lookup SUB_12;
";
tag = zero;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	@SUB_13_0_0 = [hyphen endash emdash uni2015];
	@SUB_13_0_LA_1 = [hyphen endash emdash uni2015 greater less];
	sub @SUB_13_0_0' lookup SUB_14 @SUB_13_0_LA_1;
	@SUB_13_1_BT_0 = [hyphen endash emdash uni2015 greater less];
	@SUB_13_1_1 = [hyphen endash emdash uni2015];
	sub @SUB_13_1_BT_0 @SUB_13_1_1' lookup SUB_14;
} SUB_13;
lookup SUB_15 {
	@SUB_15_0_BT_0 = [hyphen.case endash.case emdash.case uni2015.case];
	@SUB_15_0_1 = [hyphen endash emdash uni2015];
	sub @SUB_15_0_BT_0 @SUB_15_0_1' lookup SUB_16;
	@SUB_15_1_0 = [hyphen endash emdash uni2015];
	@SUB_15_1_LA_1 = [hyphen.case endash.case emdash.case uni2015.case];
	sub @SUB_15_1_0' lookup SUB_16 @SUB_15_1_LA_1;
} SUB_15;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_15;
language AZE;
lookup SUB_13;
lookup SUB_15;
language CRT;
lookup SUB_13;
lookup SUB_15;
language ROM;
lookup SUB_13;
lookup SUB_15;
language TRK;
lookup SUB_13;
lookup SUB_15;
";
tag = calt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_17 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	@SUB_17_0_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub i' lookup SUB_18 @SUB_17_0_LA_0;
	@SUB_17_1_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub j' lookup SUB_18 @SUB_17_1_LA_0;
} SUB_17;
script latn;
language dflt;
lookup SUB_17;
language AZE;
lookup SUB_17;
language CRT;
lookup SUB_17;
language ROM;
lookup SUB_17;
language TRK;
lookup SUB_17;
";
tag = ccmp;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_19;
script latn;
language dflt;
lookup SUB_19;
language AZE;
lookup SUB_19;
language CRT;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TRK;
lookup SUB_19;
";
tag = sinf;
},
{
code = "script DFLT;
language dflt;
lookup SUB_20 {
	@SUB_20_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_20_0_BT_0 [A a]' lookup SUB_21;
	@SUB_20_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_20_1_BT_0 [O o]' lookup SUB_21;
} SUB_20;
script latn;
language dflt;
lookup SUB_20;
language AZE;
lookup SUB_20;
language CRT;
lookup SUB_20;
language ROM;
lookup SUB_20;
language TRK;
lookup SUB_20;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup POS_0 {
	markClass uni0326 <anchor 300 0> @POS_0_0_MARK_0;
	markClass uni0327 <anchor 300 0> @POS_0_0_MARK_0;
	pos base A <anchor 584 0> mark @POS_0_0_MARK_0;
	pos base Aacute <anchor 584 0> mark @POS_0_0_MARK_0;
	pos base Abreve <anchor 584 0> mark @POS_0_0_MARK_0;
	pos base Acircumflex <anchor 584 0> mark @POS_0_0_MARK_0;
	pos base Adieresis <anchor 584 0> mark @POS_0_0_MARK_0;
	pos base Agrave <anchor 584 0> mark @POS_0_0_MARK_0;
	pos base Amacron <anchor 584 0> mark @POS_0_0_MARK_0;
	pos base Aring <anchor 584 0> mark @POS_0_0_MARK_0;
	pos base Atilde <anchor 584 0> mark @POS_0_0_MARK_0;
	pos base C <anchor 304 0> mark @POS_0_0_MARK_0;
	pos base Cacute <anchor 304 0> mark @POS_0_0_MARK_0;
	pos base Ccaron <anchor 304 0> mark @POS_0_0_MARK_0;
	pos base Ccircumflex <anchor 304 0> mark @POS_0_0_MARK_0;
	pos base Cdotaccent <anchor 304 0> mark @POS_0_0_MARK_0;
	pos base E <anchor 539 0> mark @POS_0_0_MARK_0;
	pos base Eacute <anchor 539 0> mark @POS_0_0_MARK_0;
	pos base Ebreve <anchor 539 0> mark @POS_0_0_MARK_0;
	pos base Ecaron <anchor 539 0> mark @POS_0_0_MARK_0;
	pos base Ecircumflex <anchor 539 0> mark @POS_0_0_MARK_0;
	pos base Edieresis <anchor 539 0> mark @POS_0_0_MARK_0;
	pos base Edotaccent <anchor 539 0> mark @POS_0_0_MARK_0;
	pos base Egrave <anchor 539 0> mark @POS_0_0_MARK_0;
	pos base Emacron <anchor 539 0> mark @POS_0_0_MARK_0;
	pos base G <anchor 309 0> mark @POS_0_0_MARK_0;
	pos base Gbreve <anchor 309 0> mark @POS_0_0_MARK_0;
	pos base Gcircumflex <anchor 309 0> mark @POS_0_0_MARK_0;
	pos base uni0122 <anchor 309 0> mark @POS_0_0_MARK_0;
	pos base Gdotaccent <anchor 309 0> mark @POS_0_0_MARK_0;
	pos base I <anchor 520 0> mark @POS_0_0_MARK_0;
	pos base Iacute <anchor 520 0> mark @POS_0_0_MARK_0;
	pos base Ibreve <anchor 520 0> mark @POS_0_0_MARK_0;
	pos base Icircumflex <anchor 520 0> mark @POS_0_0_MARK_0;
	pos base Idieresis <anchor 520 0> mark @POS_0_0_MARK_0;
	pos base Idotaccent <anchor 520 0> mark @POS_0_0_MARK_0;
	pos base Igrave <anchor 520 0> mark @POS_0_0_MARK_0;
	pos base Imacron <anchor 520 0> mark @POS_0_0_MARK_0;
	pos base Itilde <anchor 520 0> mark @POS_0_0_MARK_0;
	pos base K <anchor 319 0> mark @POS_0_0_MARK_0;
	pos base uni0136 <anchor 319 0> mark @POS_0_0_MARK_0;
	pos base L <anchor 323 0> mark @POS_0_0_MARK_0;
	pos base Lacute <anchor 323 0> mark @POS_0_0_MARK_0;
	pos base Lcaron <anchor 323 0> mark @POS_0_0_MARK_0;
	pos base uni013B <anchor 323 0> mark @POS_0_0_MARK_0;
	pos base N <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base Nacute <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base Ncaron <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base uni0145 <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base Ntilde <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base R <anchor 309 0> mark @POS_0_0_MARK_0;
	pos base Racute <anchor 309 0> mark @POS_0_0_MARK_0;
	pos base Rcaron <anchor 309 0> mark @POS_0_0_MARK_0;
	pos base uni0156 <anchor 309 0> mark @POS_0_0_MARK_0;
	pos base S <anchor 304 0> mark @POS_0_0_MARK_0;
	pos base Sacute <anchor 304 0> mark @POS_0_0_MARK_0;
	pos base Scaron <anchor 304 0> mark @POS_0_0_MARK_0;
	pos base Scircumflex <anchor 304 0> mark @POS_0_0_MARK_0;
	pos base uni0218 <anchor 304 0> mark @POS_0_0_MARK_0;
	pos base uni1E9E <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base T <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base Tcaron <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base uni021A <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base U <anchor 376 0> mark @POS_0_0_MARK_0;
	pos base Uacute <anchor 376 0> mark @POS_0_0_MARK_0;
	pos base Ubreve <anchor 376 0> mark @POS_0_0_MARK_0;
	pos base Ucircumflex <anchor 376 0> mark @POS_0_0_MARK_0;
	pos base Udieresis <anchor 376 0> mark @POS_0_0_MARK_0;
	pos base Ugrave <anchor 376 0> mark @POS_0_0_MARK_0;
	pos base Uhungarumlaut <anchor 376 0> mark @POS_0_0_MARK_0;
	pos base Umacron <anchor 376 0> mark @POS_0_0_MARK_0;
	pos base Uring <anchor 376 0> mark @POS_0_0_MARK_0;
	pos base Utilde <anchor 376 0> mark @POS_0_0_MARK_0;
	pos base a <anchor 488 0> mark @POS_0_0_MARK_0;
	pos base aacute <anchor 488 0> mark @POS_0_0_MARK_0;
	pos base abreve <anchor 488 0> mark @POS_0_0_MARK_0;
	pos base acircumflex <anchor 488 0> mark @POS_0_0_MARK_0;
	pos base adieresis <anchor 488 0> mark @POS_0_0_MARK_0;
	pos base agrave <anchor 488 0> mark @POS_0_0_MARK_0;
	pos base amacron <anchor 488 0> mark @POS_0_0_MARK_0;
	pos base aring <anchor 488 0> mark @POS_0_0_MARK_0;
	pos base atilde <anchor 488 0> mark @POS_0_0_MARK_0;
	pos base c <anchor 306 0> mark @POS_0_0_MARK_0;
	pos base cacute <anchor 306 0> mark @POS_0_0_MARK_0;
	pos base ccaron <anchor 306 0> mark @POS_0_0_MARK_0;
	pos base ccircumflex <anchor 306 0> mark @POS_0_0_MARK_0;
	pos base cdotaccent <anchor 306 0> mark @POS_0_0_MARK_0;
	pos base e <anchor 385 0> mark @POS_0_0_MARK_0;
	pos base eacute <anchor 385 0> mark @POS_0_0_MARK_0;
	pos base ebreve <anchor 385 0> mark @POS_0_0_MARK_0;
	pos base ecaron <anchor 385 0> mark @POS_0_0_MARK_0;
	pos base ecircumflex <anchor 385 0> mark @POS_0_0_MARK_0;
	pos base edieresis <anchor 385 0> mark @POS_0_0_MARK_0;
	pos base edotaccent <anchor 385 0> mark @POS_0_0_MARK_0;
	pos base egrave <anchor 385 0> mark @POS_0_0_MARK_0;
	pos base emacron <anchor 385 0> mark @POS_0_0_MARK_0;
	pos base i <anchor 479 0> mark @POS_0_0_MARK_0;
	pos base dotlessi <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base iacute <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base ibreve <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base icircumflex <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base idieresis <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base i.loclTRK <anchor 479 0> mark @POS_0_0_MARK_0;
	pos base igrave <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base imacron <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base itilde <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base k <anchor 306 0> mark @POS_0_0_MARK_0;
	pos base uni0137 <anchor 306 0> mark @POS_0_0_MARK_0;
	pos base l <anchor 380 0> mark @POS_0_0_MARK_0;
	pos base lacute <anchor 380 0> mark @POS_0_0_MARK_0;
	pos base lcaron <anchor 380 0> mark @POS_0_0_MARK_0;
	pos base uni013C <anchor 380 0> mark @POS_0_0_MARK_0;
	pos base n <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base nacute <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base ncaron <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base uni0146 <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base ntilde <anchor 300 0> mark @POS_0_0_MARK_0;
	pos base r <anchor 265 0> mark @POS_0_0_MARK_0;
	pos base racute <anchor 265 0> mark @POS_0_0_MARK_0;
	pos base rcaron <anchor 265 0> mark @POS_0_0_MARK_0;
	pos base uni0157 <anchor 265 0> mark @POS_0_0_MARK_0;
	pos base s <anchor 296 0> mark @POS_0_0_MARK_0;
	pos base sacute <anchor 296 0> mark @POS_0_0_MARK_0;
	pos base scaron <anchor 296 0> mark @POS_0_0_MARK_0;
	pos base scircumflex <anchor 296 0> mark @POS_0_0_MARK_0;
	pos base uni0219 <anchor 296 0> mark @POS_0_0_MARK_0;
	pos base t <anchor 333 0> mark @POS_0_0_MARK_0;
	pos base tcaron <anchor 333 0> mark @POS_0_0_MARK_0;
	pos base uni021B <anchor 333 0> mark @POS_0_0_MARK_0;
	pos base u <anchor 501 0> mark @POS_0_0_MARK_0;
	pos base uacute <anchor 501 0> mark @POS_0_0_MARK_0;
	pos base ubreve <anchor 501 0> mark @POS_0_0_MARK_0;
	pos base ucircumflex <anchor 501 0> mark @POS_0_0_MARK_0;
	pos base udieresis <anchor 501 0> mark @POS_0_0_MARK_0;
	pos base ugrave <anchor 501 0> mark @POS_0_0_MARK_0;
	pos base uhungarumlaut <anchor 501 0> mark @POS_0_0_MARK_0;
	pos base umacron <anchor 501 0> mark @POS_0_0_MARK_0;
	pos base uring <anchor 501 0> mark @POS_0_0_MARK_0;
	pos base utilde <anchor 501 0> mark @POS_0_0_MARK_0;
	pos base a.school <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base aacute.school <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base abreve.school <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base acircumflex.school <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base adieresis.school <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base agrave.school <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base amacron.school <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base aring.school <anchor 509 0> mark @POS_0_0_MARK_0;
	pos base atilde.school <anchor 509 0> mark @POS_0_0_MARK_0;
} POS_0;
lookup POS_1 {
	markClass uni0308 <anchor 300 488> @POS_1_0_MARK_0;
	markClass uni0307 <anchor 300 488> @POS_1_0_MARK_0;
	markClass gravecomb <anchor 300 488> @POS_1_0_MARK_0;
	markClass acutecomb <anchor 300 488> @POS_1_0_MARK_0;
	markClass uni030B <anchor 300 488> @POS_1_0_MARK_0;
	markClass uni0302 <anchor 300 488> @POS_1_0_MARK_0;
	markClass uni030C <anchor 300 488> @POS_1_0_MARK_0;
	markClass uni0306 <anchor 300 488> @POS_1_0_MARK_0;
	markClass uni030A <anchor 300 488> @POS_1_0_MARK_0;
	markClass tildecomb <anchor 300 488> @POS_1_0_MARK_0;
	markClass uni0304 <anchor 300 488> @POS_1_0_MARK_0;
	markClass uni0312 <anchor 298 488> @POS_1_0_MARK_0;
	pos base A <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Aacute <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Abreve <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Acircumflex <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Adieresis <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Agrave <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Amacron <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Aring <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Atilde <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base C <anchor 309 700> mark @POS_1_0_MARK_0;
	pos base Cacute <anchor 309 700> mark @POS_1_0_MARK_0;
	pos base Ccaron <anchor 309 700> mark @POS_1_0_MARK_0;
	pos base Ccircumflex <anchor 309 700> mark @POS_1_0_MARK_0;
	pos base Cdotaccent <anchor 309 700> mark @POS_1_0_MARK_0;
	pos base D <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Dcaron <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base E <anchor 319 700> mark @POS_1_0_MARK_0;
	pos base Eacute <anchor 319 700> mark @POS_1_0_MARK_0;
	pos base Ebreve <anchor 319 700> mark @POS_1_0_MARK_0;
	pos base Ecaron <anchor 319 700> mark @POS_1_0_MARK_0;
	pos base Ecircumflex <anchor 319 700> mark @POS_1_0_MARK_0;
	pos base Edieresis <anchor 319 700> mark @POS_1_0_MARK_0;
	pos base Edotaccent <anchor 319 700> mark @POS_1_0_MARK_0;
	pos base Egrave <anchor 319 700> mark @POS_1_0_MARK_0;
	pos base Emacron <anchor 319 700> mark @POS_1_0_MARK_0;
	pos base G <anchor 308 700> mark @POS_1_0_MARK_0;
	pos base Gbreve <anchor 308 700> mark @POS_1_0_MARK_0;
	pos base Gcircumflex <anchor 308 700> mark @POS_1_0_MARK_0;
	pos base uni0122 <anchor 308 700> mark @POS_1_0_MARK_0;
	pos base Gdotaccent <anchor 308 700> mark @POS_1_0_MARK_0;
	pos base H <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Hcircumflex <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base I <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Iacute <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Ibreve <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Icircumflex <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Idieresis <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Idotaccent <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Igrave <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Imacron <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Itilde <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base J <anchor 479 700> mark @POS_1_0_MARK_0;
	pos base uni004A0301 <anchor 479 700> mark @POS_1_0_MARK_0;
	pos base Jcircumflex <anchor 479 700> mark @POS_1_0_MARK_0;
	pos base L <anchor 143 700> mark @POS_1_0_MARK_0;
	pos base Lacute <anchor 143 700> mark @POS_1_0_MARK_0;
	pos base Lcaron <anchor 143 700> mark @POS_1_0_MARK_0;
	pos base uni013B <anchor 143 700> mark @POS_1_0_MARK_0;
	pos base N <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Nacute <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Ncaron <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base uni0145 <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Ntilde <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base O <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Oacute <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Obreve <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Ocircumflex <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Odieresis <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Ograve <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Ohungarumlaut <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Omacron <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Otilde <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base R <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Racute <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Rcaron <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base uni0156 <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base S <anchor 292 700> mark @POS_1_0_MARK_0;
	pos base Sacute <anchor 292 700> mark @POS_1_0_MARK_0;
	pos base Scaron <anchor 292 700> mark @POS_1_0_MARK_0;
	pos base Scircumflex <anchor 292 700> mark @POS_1_0_MARK_0;
	pos base uni0218 <anchor 292 700> mark @POS_1_0_MARK_0;
	pos base uni1E9E <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base T <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Tcaron <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base uni021A <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base U <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Uacute <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Ubreve <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Ucircumflex <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Udieresis <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Ugrave <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Uhungarumlaut <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Umacron <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Uring <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Utilde <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base W <anchor 302 700> mark @POS_1_0_MARK_0;
	pos base Wacute <anchor 302 700> mark @POS_1_0_MARK_0;
	pos base Wcircumflex <anchor 302 700> mark @POS_1_0_MARK_0;
	pos base Wdieresis <anchor 302 700> mark @POS_1_0_MARK_0;
	pos base Wgrave <anchor 302 700> mark @POS_1_0_MARK_0;
	pos base Y <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Yacute <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Ycircumflex <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Ydieresis <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Ygrave <anchor 300 700> mark @POS_1_0_MARK_0;
	pos base Z <anchor 299 700> mark @POS_1_0_MARK_0;
	pos base Zacute <anchor 299 700> mark @POS_1_0_MARK_0;
	pos base Zcaron <anchor 299 700> mark @POS_1_0_MARK_0;
	pos base Zdotaccent <anchor 299 700> mark @POS_1_0_MARK_0;
	pos base a <anchor 287 488> mark @POS_1_0_MARK_0;
	pos base aacute <anchor 287 488> mark @POS_1_0_MARK_0;
	pos base abreve <anchor 287 488> mark @POS_1_0_MARK_0;
	pos base acircumflex <anchor 287 488> mark @POS_1_0_MARK_0;
	pos base adieresis <anchor 287 488> mark @POS_1_0_MARK_0;
	pos base agrave <anchor 287 488> mark @POS_1_0_MARK_0;
	pos base amacron <anchor 287 488> mark @POS_1_0_MARK_0;
	pos base aring <anchor 287 488> mark @POS_1_0_MARK_0;
	pos base atilde <anchor 287 488> mark @POS_1_0_MARK_0;
	pos base c <anchor 305 488> mark @POS_1_0_MARK_0;
	pos base cacute <anchor 305 488> mark @POS_1_0_MARK_0;
	pos base ccaron <anchor 305 488> mark @POS_1_0_MARK_0;
	pos base ccircumflex <anchor 305 488> mark @POS_1_0_MARK_0;
	pos base cdotaccent <anchor 305 488> mark @POS_1_0_MARK_0;
	pos base e <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base eacute <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base ebreve <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base ecaron <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base ecircumflex <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base edieresis <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base edotaccent <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base egrave <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base emacron <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base g <anchor 298 488> mark @POS_1_0_MARK_0;
	pos base gbreve <anchor 298 488> mark @POS_1_0_MARK_0;
	pos base gcircumflex <anchor 298 488> mark @POS_1_0_MARK_0;
	pos base uni0123 <anchor 298 488> mark @POS_1_0_MARK_0;
	pos base gdotaccent <anchor 298 488> mark @POS_1_0_MARK_0;
	pos base h <anchor 134 700> mark @POS_1_0_MARK_0;
	pos base hcircumflex <anchor 134 700> mark @POS_1_0_MARK_0;
	pos base i <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base dotlessi <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base iacute <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base ibreve <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base icircumflex <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base idieresis <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base i.loclTRK <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base igrave <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base imacron <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base itilde <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base uni0237 <anchor 385 488> mark @POS_1_0_MARK_0;
	pos base uni006A0301 <anchor 385 488> mark @POS_1_0_MARK_0;
	pos base jcircumflex <anchor 385 488> mark @POS_1_0_MARK_0;
	pos base l <anchor 290 700> mark @POS_1_0_MARK_0;
	pos base lacute <anchor 290 700> mark @POS_1_0_MARK_0;
	pos base lcaron <anchor 290 700> mark @POS_1_0_MARK_0;
	pos base uni013C <anchor 290 700> mark @POS_1_0_MARK_0;
	pos base n <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base nacute <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base ncaron <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base uni0146 <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base ntilde <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base o <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base oacute <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base obreve <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base ocircumflex <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base odieresis <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base ograve <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base ohungarumlaut <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base omacron <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base otilde <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base r <anchor 372 488> mark @POS_1_0_MARK_0;
	pos base racute <anchor 372 488> mark @POS_1_0_MARK_0;
	pos base rcaron <anchor 372 488> mark @POS_1_0_MARK_0;
	pos base uni0157 <anchor 372 488> mark @POS_1_0_MARK_0;
	pos base s <anchor 285 488> mark @POS_1_0_MARK_0;
	pos base sacute <anchor 285 488> mark @POS_1_0_MARK_0;
	pos base scaron <anchor 285 488> mark @POS_1_0_MARK_0;
	pos base scircumflex <anchor 285 488> mark @POS_1_0_MARK_0;
	pos base uni0219 <anchor 285 488> mark @POS_1_0_MARK_0;
	pos base u <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base uacute <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base ubreve <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base ucircumflex <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base udieresis <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base ugrave <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base uhungarumlaut <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base umacron <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base uring <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base utilde <anchor 300 488> mark @POS_1_0_MARK_0;
	pos base w <anchor 302 488> mark @POS_1_0_MARK_0;
	pos base wacute <anchor 302 488> mark @POS_1_0_MARK_0;
	pos base wcircumflex <anchor 302 488> mark @POS_1_0_MARK_0;
	pos base wdieresis <anchor 302 488> mark @POS_1_0_MARK_0;
	pos base wgrave <anchor 302 488> mark @POS_1_0_MARK_0;
	pos base y <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base yacute <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base ycircumflex <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base ydieresis <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base ygrave <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base z <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base zacute <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base zcaron <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base zdotaccent <anchor 293 488> mark @POS_1_0_MARK_0;
	pos base g.alt <anchor 291 488> mark @POS_1_0_MARK_0;
	pos base gbreve.alt <anchor 291 488> mark @POS_1_0_MARK_0;
	pos base gcircumflex.alt <anchor 291 488> mark @POS_1_0_MARK_0;
	pos base uni0123.alt <anchor 291 488> mark @POS_1_0_MARK_0;
	pos base gdotaccent.alt <anchor 291 488> mark @POS_1_0_MARK_0;
	pos base a.school <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base aacute.school <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base abreve.school <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base acircumflex.school <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base adieresis.school <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base agrave.school <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base amacron.school <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base aring.school <anchor 296 488> mark @POS_1_0_MARK_0;
	pos base atilde.school <anchor 296 488> mark @POS_1_0_MARK_0;
} POS_1;
script latn;
language dflt;
lookup POS_0;
lookup POS_1;
language AZE;
lookup POS_0;
lookup POS_1;
language CRT;
lookup POS_0;
lookup POS_1;
language ROM;
lookup POS_0;
lookup POS_1;
language TRK;
lookup POS_0;
lookup POS_1;
";
tag = mark;
},
{
code = "script DFLT;
language dflt;
lookup POS_2 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	markClass uni0308 <anchor 300 488> @POS_2_0_MARK_0;
	markClass uni0307 <anchor 300 488> @POS_2_0_MARK_0;
	markClass gravecomb <anchor 300 488> @POS_2_0_MARK_0;
	markClass acutecomb <anchor 300 488> @POS_2_0_MARK_0;
	markClass uni030B <anchor 300 488> @POS_2_0_MARK_0;
	markClass uni0302 <anchor 300 488> @POS_2_0_MARK_0;
	markClass uni030C <anchor 300 488> @POS_2_0_MARK_0;
	markClass uni0306 <anchor 300 488> @POS_2_0_MARK_0;
	markClass uni030A <anchor 300 488> @POS_2_0_MARK_0;
	markClass tildecomb <anchor 300 488> @POS_2_0_MARK_0;
	markClass uni0304 <anchor 300 488> @POS_2_0_MARK_0;
	markClass uni0312 <anchor 298 488> @POS_2_0_MARK_0;
	pos mark uni0312 <anchor 298 790> mark @POS_2_0_MARK_0;
} POS_2;
script latn;
language dflt;
lookup POS_2;
language AZE;
lookup POS_2;
language CRT;
lookup POS_2;
language ROM;
lookup POS_2;
language TRK;
lookup POS_2;
";
tag = mkmk;
},
{
code = "lookup SUB_CODING{
    sub hyphen greater by hyphen_greater.liga;
	sub colon colon by colon_colon.liga;
	sub exclam equal by exclam_equal.liga;
	sub exclam equal equal by exclam_equal_equal.liga;
	sub bar greater	by pipe_greater.liga;
	sub equal equal by equal_equal.liga;
	sub equal equal equal by equal_equal_equal.liga;
	sub equal greater by equal_greater.liga;
	sub greater equal by greater_equal.liga;
	sub less equal by less_equal.liga;
	sub less hyphen greater by less_hyphen_greater.liga;
	sub less equal greater by less_equal_greater.liga;
} SUB_CODING;
";
tag = liga;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 1018;
},
{
name = typoDescender;
value = -305;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1018;
},
{
name = winDescent;
value = 305;
},
{
name = hheaAscender;
value = 1018;
},
{
name = hheaDescender;
value = -305;
},
{
name = strikeoutPosition;
value = 317;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 5 values pushed */
0 0 29 3 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 8 values pushed */
42 4 34 4 18 8 3 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 8 values pushed */
46 2 38 2 26 6 3 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 10
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 5 values pushed */
2752 2240 1216 3 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 13
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 5 values pushed */
64 64 64 3 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
44 2 36 2 20 6 3 14
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
3
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    72,
    72,
    65,
    65,
    700,
    0,
    732,
    488,
    0,
    \"-209\",
    711,
    \"-11\",
    732,
    496,
    \"-10\",
    \"-219\",
    50,
    50,
    46,
    46,
    350,
    0,
    355,
    \"-5\",
    50,
    50,
    46,
    46,
    700,
    350,
    705,
    345
)";
}
);
id = m01;
metricValues = (
{
pos = 1018;
},
{
pos = 700;
},
{
pos = 488;
},
{
},
{
pos = -305;
},
{
}
);
name = Regular;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(497,750,l),
(103,750,l),
(103,-100,l),
(497,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 6 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = .notdef;
},
{
glyphname = A;
layers = (
{
anchors = (
{
name = bottom;
pos = (584,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,195,l),
(439,195,l),
(503,0,l),
(584,0,l),
(348,700,l),
(251,700,l),
(16,0,l),
(95,0,l)
);
},
{
closed = 1;
nodes = (
(419,256,l),
(178,256,l),
(298,626,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
10 1 4 0 1 76 0 4 0 2 1 4 2 104 0 0 0 20 77 5 3 2 1 1 21 1 78 0 0 9 8 0 7 0 7 17 17 17 6 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (584,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (0,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (584,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (0,212);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = Acircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (584,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (0,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Adieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (584,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (0,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Agrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (584,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (0,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Amacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (584,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (0,212);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(158,195,l),
(439,195,l),
(503,0,l),
(529,0,l),
(477,-37,o),
(430,-103,o),
(430,-140,qs),
(430,-181,o),
(488,-231,o),
(536,-231,qs),
(579,-231,o),
(609,-212,q),
(595,-173,l),
(586,-179,o),
(560,-185,o),
(547,-185,qs),
(516,-185,o),
(480,-155,o),
(480,-128,qs),
(480,-97,o),
(530,-35,o),
(584,0,q),
(348,700,l),
(251,700,l),
(16,0,l),
(95,0,l)
);
},
{
closed = 1;
nodes = (
(419,256,l),
(178,256,l),
(298,626,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
28 1 6 0 12 1 1 3 13 1 2 1 3 76 3 1 3 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 6 0 4 3 6 4 104 0 0 0 20 77 7 5 2 3 3 21 77 0 1 1 2 97 0 2 2 31 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 6 0 4 3 6 4 104 0 1 0 2 1 2 101 0 0 0 20 77 7 5 2 3 3 21 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 27 26 0 25 0 25 17 21 36 38 17 8 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = Aring;
layers = (
{
anchors = (
{
name = bottom;
pos = (584,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (0,212);
ref = uni030A;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Atilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (584,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (0,212);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(138,170,l),
(281,170,l),
(281,0,l),
(570,0,l),
(570,67,l),
(356,67,l),
(356,320,l),
(493,320,l),
(493,387,l),
(356,387,l),
(356,633,l),
(566,633,l),
(566,700,l),
(241,700,l),
(6,0,l),
(83,0,l)
);
},
{
closed = 1;
nodes = (
(281,231,l),
(158,231,l),
(281,611,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
18 1 2 1 1 76 0 2 0 3 8 2 3 103 0 8 0 6 4 8 6 103 0 1 1 0 95 0 0 0 20 77 0 4 4 5 95 9 7 2 5 5 21 5 78 0 0 17 16 0 15 0 15 17 17 17 17 17 17 17 10 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = AE;
unicode = 198;
},
{
glyphname = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(388,0,o),
(490,48,o),
(546,136,o),
(546,194,qs),
(546,259,o),
(465,348,o),
(395,364,q),
(452,381,o),
(519,464,o),
(519,522,qs),
(519,603,o),
(404,700,o),
(308,700,qs),
(95,700,l),
(95,0,l),
(319,0,ls)
);
},
{
closed = 1;
nodes = (
(302,634,ls),
(366,634,o),
(442,569,o),
(442,514,qs),
(442,459,o),
(366,394,o),
(302,394,qs),
(172,394,l),
(172,634,l)
);
},
{
closed = 1;
nodes = (
(311,331,ls),
(383,331,o),
(468,259,o),
(468,199,qs),
(468,138,o),
(382,66,o),
(311,66,qs),
(172,66,l),
(172,331,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
8 1 5 2 1 76 0 2 0 5 4 2 5 103 0 3 3 0 95 0 0 0 20 77 0 4 4 1 95 6 1 1 1 21 1 78 0 0 33 31 27 25 24 22 18 16 0 15 0 14 33 7 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (309,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(530,103,o),
(558,204,q),
(485,227,l),
(465,146,o),
(368,59,o),
(306,59,qs),
(254,59,o),
(169,128,o),
(119,258,o),
(119,350,qs),
(119,442,o),
(169,572,o),
(254,641,o),
(306,641,qs),
(368,641,o),
(465,554,o),
(485,473,q),
(558,496,l),
(530,597,o),
(398,711,o),
(306,711,qs),
(236,711,o),
(115,627,o),
(41,466,o),
(41,350,qs),
(41,234,o),
(115,73,o),
(236,-11,o),
(306,-11,qs),
(398,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
27 26 12 11 4 3 2 1 76 0 2 2 1 97 0 1 1 26 77 0 3 3 0 97 4 1 0 0 27 0 78 1 0 24 22 16 14 9 7 0 29 1 29 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = C;
unicode = 67;
},
{
glyphname = Cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (309,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (9,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = Ccaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (309,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (9,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = Ccedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(407,-186,o),
(407,-146,qs),
(407,-111,o),
(354,-68,o),
(310,-66,q),
(323,-10,l),
(408,-5,o),
(531,107,o),
(558,204,q),
(485,227,l),
(465,146,o),
(368,59,o),
(306,59,qs),
(254,59,o),
(169,128,o),
(119,258,o),
(119,350,qs),
(119,442,o),
(169,572,o),
(254,641,o),
(306,641,qs),
(368,641,o),
(465,554,o),
(485,473,q),
(558,496,l),
(530,597,o),
(398,711,o),
(306,711,qs),
(236,711,o),
(115,627,o),
(41,466,o),
(41,350,qs),
(41,241,o),
(106,85,o),
(216,-2,o),
(281,-10,q),
(258,-99,l),
(287,-99,ls),
(321,-99,o),
(358,-125,o),
(358,-148,qs),
(358,-172,o),
(324,-200,o),
(293,-200,qs),
(249,-200,o),
(214,-171,q),
(186,-203,l),
(227,-239,o),
(296,-239,qs),
(345,-239,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
40 39 25 24 4 5 4 13 1 7 6 3 1 1 2 2 1 0 1 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 0 2 1 7 2 105 0 4 4 3 97 0 3 3 26 77 0 5 5 6 97 0 6 6 30 77 0 1 1 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 0 2 1 7 2 105 0 4 4 3 97 0 3 3 26 77 0 5 5 6 97 0 6 6 27 77 0 1 1 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 0 2 1 7 2 105 0 4 4 3 97 0 3 3 26 77 0 5 5 6 97 0 6 6 30 77 0 1 1 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 7 0 2 1 7 2 105 0 1 8 1 0 1 0 101 0 4 4 3 97 0 3 3 26 77 0 5 5 6 97 0 6 6 30 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 45 44 43 42 37 35 29 27 22 20 12 10 6 4 0 49 1 49 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Ccircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (309,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (9,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ccircumflex;
unicode = 264;
},
{
glyphname = Cdotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (309,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (9,212);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = D;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(362,0,o),
(487,89,o),
(558,247,o),
(558,350,qs),
(558,454,o),
(487,611,o),
(362,700,o),
(280,700,qs),
(87,700,l),
(87,0,l),
(280,0,ls)
);
},
{
closed = 1;
nodes = (
(270,633,ls),
(333,633,o),
(428,562,o),
(480,435,o),
(480,350,qs),
(480,265,o),
(428,138,o),
(333,67,o),
(270,67,qs),
(164,67,l),
(164,633,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 3 3 0 95 0 0 0 20 77 0 2 2 1 95 4 1 1 1 21 1 78 0 0 21 19 13 11 0 10 0 9 33 5 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = D;
unicode = 68;
},
{
glyphname = Dcaron;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (0,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(353,0,o),
(479,81,o),
(556,238,o),
(556,350,qs),
(556,463,o),
(479,619,o),
(353,700,o),
(278,700,qs),
(94,700,l),
(94,383,l),
(15,383,l),
(15,322,l),
(94,322,l),
(94,0,l),
(278,0,ls)
);
},
{
closed = 1;
nodes = (
(289,322,l),
(289,383,l),
(171,383,l),
(171,633,l),
(268,633,ls),
(328,633,o),
(423,566,o),
(478,440,o),
(478,350,qs),
(478,261,o),
(423,134,o),
(328,67,o),
(268,67,qs),
(171,67,l),
(171,322,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
6 1 1 7 1 0 4 1 0 103 0 5 5 2 95 0 2 2 20 77 0 4 4 3 95 8 1 3 3 21 3 78 0 0 29 28 27 26 25 23 17 15 0 14 0 13 33 17 17 9 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = Eth;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = Dcroat;
}
);
width = 600;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = E;
layers = (
{
anchors = (
{
name = bottom;
pos = (539,0);
},
{
name = top;
pos = (319,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,67,l),
(174,67,l),
(174,320,l),
(412,320,l),
(412,387,l),
(174,387,l),
(174,633,l),
(535,633,l),
(535,700,l),
(97,700,l),
(97,0,l),
(539,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 20 77 0 4 4 5 95 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = E;
unicode = 69;
},
{
glyphname = Eacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (539,0);
},
{
name = top;
pos = (319,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (19,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ebreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (539,0);
},
{
name = top;
pos = (319,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (19,212);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = Ecaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (539,0);
},
{
name = top;
pos = (319,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (19,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = Ecircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (539,0);
},
{
name = top;
pos = (319,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (19,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (539,0);
},
{
name = top;
pos = (319,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (19,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Edotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (539,0);
},
{
name = top;
pos = (319,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (19,212);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = Egrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (539,0);
},
{
name = top;
pos = (319,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (19,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Emacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (539,0);
},
{
name = top;
pos = (319,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (19,212);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,-37,o),
(385,-103,o),
(385,-140,qs),
(385,-181,o),
(443,-231,o),
(491,-231,qs),
(534,-231,o),
(564,-212,q),
(550,-173,l),
(541,-179,o),
(515,-185,o),
(502,-185,qs),
(471,-185,o),
(435,-155,o),
(435,-128,qs),
(435,-97,o),
(485,-35,o),
(539,0,q),
(539,67,l),
(174,67,l),
(174,320,l),
(412,320,l),
(412,387,l),
(174,387,l),
(174,633,l),
(535,633,l),
(535,700,l),
(97,700,l),
(97,0,l),
(484,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 5 7 21 1 6 5 2 76 11 1 7 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 20 77 0 4 4 7 95 8 1 7 7 21 77 0 5 5 6 97 0 6 6 31 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 0 3 4 2 3 103 0 5 0 6 5 6 101 0 1 1 0 95 0 0 0 20 77 0 4 4 7 95 8 1 7 7 21 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 29 36 38 17 17 17 17 17 9 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,315,l),
(427,315,l),
(427,382,l),
(179,382,l),
(179,633,l),
(545,633,l),
(545,700,l),
(102,700,l),
(102,0,l),
(179,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 20 77 5 1 4 4 21 4 78 0 0 0 9 0 9 17 17 17 17 6 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
layers = (
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (308,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(504,71,o),
(568,226,o),
(568,335,qs),
(568,366,l),
(330,366,l),
(330,299,l),
(491,299,l),
(486,190,o),
(389,59,o),
(311,59,qs),
(256,59,o),
(169,128,o),
(119,258,o),
(119,350,qs),
(119,442,o),
(169,572,o),
(254,641,o),
(306,641,qs),
(368,641,o),
(465,554,o),
(485,473,q),
(558,496,l),
(530,597,o),
(398,711,o),
(306,711,qs),
(236,711,o),
(115,627,o),
(41,466,o),
(41,350,qs),
(41,234,o),
(115,73,o),
(238,-11,o),
(311,-11,qs),
(388,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
12 11 2 5 2 1 76 0 5 0 4 3 5 4 103 0 2 2 1 97 0 1 1 26 77 0 3 3 0 97 6 1 0 0 27 0 78 1 0 29 28 27 26 24 22 16 14 9 7 0 33 1 33 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = G;
unicode = 71;
},
{
glyphname = Gbreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (308,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (8,212);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = Gcircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (308,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (8,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Gcircumflex;
unicode = 284;
},
{
glyphname = uni0122;
layers = (
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (308,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (9,0);
ref = uni0326;
}
);
width = 600;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = Gdotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (308,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (8,212);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = H;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,319,l),
(451,319,l),
(451,0,l),
(528,0,l),
(528,700,l),
(451,700,l),
(451,386,l),
(149,386,l),
(149,700,l),
(72,700,l),
(72,0,l),
(149,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 1 0 4 3 1 4 103 2 1 0 0 20 77 6 5 2 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = H;
unicode = 72;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(149,319,l),
(451,319,l),
(451,0,l),
(528,0,l),
(528,521,l),
(595,521,l),
(595,582,l),
(528,582,l),
(528,700,l),
(451,700,l),
(451,582,l),
(149,582,l),
(149,700,l),
(72,700,l),
(72,582,l),
(5,582,l),
(5,521,l),
(72,521,l),
(72,0,l),
(149,0,l)
);
},
{
closed = 1;
nodes = (
(451,521,l),
(451,386,l),
(149,386,l),
(149,521,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
5 3 2 1 11 6 2 0 10 1 0 103 0 10 0 8 7 10 8 103 4 1 2 2 20 77 12 9 2 7 7 21 7 78 0 0 23 22 21 20 0 19 0 19 17 17 17 17 17 17 17 17 17 13 7 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = Hcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = H;
},
{
alignment = -1;
pos = (0,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Hcircumflex;
unicode = 292;
},
{
glyphname = I;
layers = (
{
anchors = (
{
name = bottom;
pos = (520,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(520,67,l),
(339,67,l),
(339,633,l),
(520,633,l),
(520,700,l),
(80,700,l),
(80,633,l),
(262,633,l),
(262,67,l),
(80,67,l),
(80,0,l),
(520,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
3 1 1 1 2 95 0 2 2 20 77 4 1 0 0 5 95 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = I;
unicode = 73;
},
{
glyphname = IJ;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(232,11,o),
(303,-11,o),
(342,-11,qs),
(434,-11,o),
(541,101,o),
(541,198,qs),
(541,700,l),
(464,700,l),
(464,198,ls),
(464,130,o),
(397,59,o),
(336,59,qs),
(306,59,o),
(259,78,o),
(241,92,q),
(206,32,l)
);
},
{
closed = 1;
nodes = (
(149,700,l),
(72,700,l),
(72,0,l),
(149,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 6 values pushed */
15 1 2 0 1 76
ELSE[ ]	/* Else */
PUSHB[ ]	/* 6 values pushed */
15 1 4 0 1 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 20 77 0 0 0 2 97 5 4 2 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 20 77 5 1 4 4 21 77 0 0 0 2 97 0 2 2 27 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
16 16 16 19 16 19 20 35 19 34 6 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = Iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (520,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (0,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (520,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (0,212);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = Icircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (520,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (0,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (520,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (0,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Idotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (520,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (0,212);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (520,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (0,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Imacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (520,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (0,212);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(413,-37,o),
(366,-103,o),
(366,-140,qs),
(366,-181,o),
(424,-231,o),
(472,-231,qs),
(515,-231,o),
(545,-212,q),
(531,-173,l),
(522,-179,o),
(496,-185,o),
(483,-185,qs),
(452,-185,o),
(416,-155,o),
(416,-128,qs),
(416,-97,o),
(466,-35,o),
(520,0,q),
(520,67,l),
(339,67,l),
(339,633,l),
(520,633,l),
(520,700,l),
(80,700,l),
(80,633,l),
(262,633,l),
(262,67,l),
(80,67,l),
(80,0,l),
(465,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 1 5 7 21 1 6 5 2 76 11 1 7 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
3 1 1 1 2 95 0 2 2 20 77 4 1 0 0 7 95 8 1 7 7 21 77 0 5 5 6 97 0 6 6 31 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 5 0 6 5 6 101 3 1 1 1 2 95 0 2 2 20 77 4 1 0 0 7 95 8 1 7 7 21 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 29 36 38 17 17 17 17 17 9 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = Itilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (520,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (0,212);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = J;
layers = (
{
anchors = (
{
name = top;
pos = (479,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,56,o),
(516,180,o),
(516,264,qs),
(516,700,l),
(439,700,l),
(439,265,ls),
(439,171,o),
(349,59,o),
(274,59,qs),
(149,59,o),
(99,196,q),
(29,168,l),
(58,83,o),
(186,-11,o),
(273,-11,qs),
(348,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 3 2 1 2 1 76 0 2 2 20 77 0 1 1 0 97 3 1 0 0 27 0 78 1 0 11 10 7 5 0 15 1 15 4 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = J;
unicode = 74;
},
{
glyphname = uni004A0301;
layers = (
{
anchors = (
{
name = top;
pos = (479,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (179,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni004A0301;
},
{
glyphname = Jcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (479,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (179,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Jcircumflex;
unicode = 308;
},
{
glyphname = K;
layers = (
{
anchors = (
{
name = bottom;
pos = (319,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,333,l),
(477,0,l),
(582,0,l),
(253,356,l),
(574,700,l),
(476,700,l),
(176,370,l),
(176,700,l),
(99,700,l),
(99,0,l),
(176,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 10 0 10 18 18 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = K;
unicode = 75;
},
{
glyphname = uni0136;
layers = (
{
anchors = (
{
name = bottom;
pos = (319,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = K;
},
{
alignment = -1;
pos = (19,0);
ref = uni0326;
}
);
width = 600;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = L;
layers = (
{
anchors = (
{
name = bottom;
pos = (323,0);
},
{
name = top;
pos = (143,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,67,l),
(181,67,l),
(181,700,l),
(104,700,l),
(104,0,l),
(541,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 20 77 0 1 1 2 95 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = L;
unicode = 76;
},
{
glyphname = Lacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (323,0);
},
{
name = top;
pos = (143,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (-157,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = Lcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (323,0);
},
{
name = top;
pos = (143,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (150,-14);
ref = caronSlovak;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHW[ ]	/* 1 value pushed */
-14
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = uni013B;
layers = (
{
anchors = (
{
name = bottom;
pos = (323,0);
},
{
name = top;
pos = (143,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (23,0);
ref = uni0326;
}
);
width = 600;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = Lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(546,67,l),
(186,67,l),
(186,298,l),
(404,438,l),
(404,512,l),
(186,372,l),
(186,700,l),
(109,700,l),
(109,325,l),
(8,260,l),
(8,186,l),
(109,251,l),
(109,0,l),
(546,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
10 9 8 7 4 3 2 1 8 1 0 1 76 0 0 0 20 77 0 1 1 2 95 3 1 2 2 21 2 78 0 0 0 13 0 13 21 21 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,605,l),
(299,210,l),
(470,605,l),
(470,0,l),
(541,0,l),
(541,700,l),
(446,700,l),
(300,366,l),
(154,700,l),
(59,700,l),
(59,0,l),
(128,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 9 8 3 4 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 17 18 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(144,587,l),
(446,0,l),
(524,0,l),
(524,700,l),
(454,700,l),
(456,130,l),
(164,700,l),
(76,700,l),
(76,0,l),
(146,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
8 3 2 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 9 0 9 17 18 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = N;
unicode = 78;
},
{
glyphname = Nacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (0,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = Ncaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (0,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = uni0145;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
ref = uni0326;
}
);
width = 600;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = Ntilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (0,212);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,-144,o),
(524,-73,qs),
(524,700,l),
(454,700,l),
(456,130,l),
(164,700,l),
(76,700,l),
(76,0,l),
(146,0,l),
(144,587,l),
(453,-14,l),
(453,-63,ls),
(453,-112,o),
(421,-154,o),
(389,-154,qs),
(366,-154,o),
(328,-147,o),
(305,-138,q),
(305,-204,l),
(344,-219,o),
(386,-219,qs),
(454,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
16 11 2 2 3 10 3 2 1 2 2 1 0 1 3 76 4 1 3 3 20 77 0 2 2 21 77 0 1 1 0 97 5 1 0 0 31 0 78 1 0 18 17 15 14 13 12 7 5 0 21 1 21 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = O;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,73,o),
(563,234,o),
(563,350,qs),
(563,466,o),
(490,627,o),
(370,711,o),
(300,711,qs),
(230,711,o),
(110,627,o),
(37,466,o),
(37,350,qs),
(37,234,o),
(110,73,o),
(230,-11,o),
(300,-11,qs),
(370,-11,o)
);
},
{
closed = 1;
nodes = (
(164,128,o),
(115,258,o),
(115,350,qs),
(115,442,o),
(164,572,o),
(248,641,o),
(300,641,qs),
(352,641,o),
(436,572,o),
(485,442,o),
(485,350,qs),
(485,258,o),
(436,128,o),
(352,59,o),
(300,59,qs),
(248,59,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 97 0 1 1 26 77 5 1 2 2 0 97 4 1 0 0 27 0 78 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (0,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Obreve;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (0,212);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = Ocircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (0,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Odieresis;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (0,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ograve;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (0,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Ohungarumlaut;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (0,212);
ref = uni030B;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = Omacron;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (0,212);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = Oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(490,73,o),
(563,234,o),
(563,350,qs),
(563,425,o),
(531,547,o),
(502,591,q),
(577,700,l),
(503,700,l),
(463,641,l),
(393,711,o),
(300,711,qs),
(230,711,o),
(110,627,o),
(37,466,o),
(37,350,qs),
(37,275,o),
(70,153,o),
(98,109,q),
(23,0,l),
(97,0,l),
(137,59,l),
(207,-11,o),
(300,-11,qs),
(370,-11,o)
);
},
{
closed = 1;
nodes = (
(115,299,o),
(115,350,qs),
(115,442,o),
(164,572,o),
(248,641,o),
(300,641,qs),
(371,641,o),
(420,580,q),
(145,179,l),
(131,213,o)
);
},
{
closed = 1;
nodes = (
(180,120,q),
(455,521,l),
(469,487,o),
(485,401,o),
(485,350,qs),
(485,258,o),
(436,128,o),
(352,59,o),
(300,59,qs),
(229,59,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
42 41 25 17 5 5 5 4 1 76 14 1 4 2 1 5 2 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 4 4 2 97 3 1 2 2 26 77 7 1 5 5 0 97 1 6 2 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 3 3 20 77 0 4 4 2 97 0 2 2 26 77 0 1 1 21 77 7 1 5 5 0 97 6 1 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
35 34 1 0 34 43 35 43 28 26 16 15 13 11 4 3 0 23 1 23 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Otilde;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (0,212);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = OE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(90,86,o),
(215,0,o),
(300,0,qs),
(580,0,l),
(580,67,l),
(363,67,l),
(363,320,l),
(503,320,l),
(503,387,l),
(363,387,l),
(363,633,l),
(576,633,l),
(576,700,l),
(300,700,ls),
(215,700,o),
(90,614,o),
(22,457,o),
(22,350,qs),
(22,243,o)
);
},
{
closed = 1;
nodes = (
(199,624,o),
(288,632,q),
(288,68,l),
(199,76,o),
(98,226,o),
(98,350,qs),
(98,475,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
23 1 2 1 22 1 4 3 2 76 0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 20 77 0 4 4 5 95 0 5 5 21 5 78 33 17 17 17 17 35 6 7 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = OE;
unicode = 338;
},
{
glyphname = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,286,l),
(324,286,ls),
(392,286,o),
(492,337,o),
(547,431,o),
(547,493,qs),
(547,556,o),
(492,649,o),
(392,700,o),
(324,700,qs),
(95,700,l),
(95,0,l),
(172,0,l)
);
},
{
closed = 1;
nodes = (
(315,633,ls),
(388,633,o),
(470,558,o),
(470,493,qs),
(470,428,o),
(388,353,o),
(315,353,qs),
(172,353,l),
(172,633,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 3 0 1 2 3 1 103 0 4 4 0 95 0 0 0 20 77 5 1 2 2 21 2 78 0 0 21 19 15 13 0 12 0 12 38 33 6 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = P;
unicode = 80;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,143,l),
(324,143,ls),
(392,143,o),
(492,194,o),
(547,288,o),
(547,350,qs),
(547,413,o),
(492,506,o),
(392,557,o),
(324,557,qs),
(172,557,l),
(172,700,l),
(95,700,l),
(95,0,l),
(172,0,l)
);
},
{
closed = 1;
nodes = (
(315,490,ls),
(388,490,o),
(470,415,o),
(470,350,qs),
(470,285,o),
(388,210,o),
(315,210,qs),
(172,210,l),
(172,490,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 0 5 4 1 5 103 0 4 0 2 3 4 2 103 0 0 0 20 77 6 1 3 3 21 3 78 0 0 23 21 17 15 0 14 0 14 38 33 17 7 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,77,l),
(517,123,o),
(563,260,o),
(563,350,qs),
(563,466,o),
(490,627,o),
(370,711,o),
(300,711,qs),
(230,711,o),
(110,627,o),
(37,466,o),
(37,350,qs),
(37,234,o),
(110,73,o),
(230,-11,o),
(300,-11,qs),
(372,-11,o),
(430,31,q),
(469,-16,l),
(548,-5,l)
);
},
{
closed = 1;
nodes = (
(164,128,o),
(115,258,o),
(115,350,qs),
(115,442,o),
(164,572,o),
(248,641,o),
(300,641,qs),
(352,641,o),
(436,572,o),
(485,442,o),
(485,350,qs),
(485,280,o),
(457,172,o),
(431,135,q),
(351,230,l),
(272,218,l),
(384,85,l),
(346,59,o),
(300,59,qs),
(248,59,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
25 24 23 22 18 5 2 3 19 1 2 0 2 2 76 0 3 3 1 97 0 1 1 26 77 4 1 2 2 0 97 0 0 0 27 0 78 21 20 33 31 20 39 21 39 38 34 5 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
layers = (
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,299,l),
(319,299,l),
(469,0,l),
(554,0,l),
(397,309,l),
(464,329,o),
(542,428,o),
(542,498,qs),
(542,559,o),
(486,649,o),
(386,700,o),
(319,700,qs),
(102,700,l),
(102,0,l),
(179,0,l)
);
},
{
closed = 1;
nodes = (
(313,633,ls),
(382,633,o),
(465,559,o),
(465,497,qs),
(465,436,o),
(382,363,o),
(313,363,qs),
(179,363,l),
(179,633,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
9 1 2 4 1 76 0 4 0 2 1 4 2 103 0 5 5 0 95 0 0 0 20 77 6 3 2 1 1 21 1 78 0 0 23 21 17 15 0 14 0 14 17 23 33 7 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = R;
unicode = 82;
},
{
glyphname = Racute;
layers = (
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (0,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = Rcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (0,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = uni0156;
layers = (
{
anchors = (
{
name = bottom;
pos = (309,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (9,0);
ref = uni0326;
}
);
width = 600;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = S;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (292,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(486,42,o),
(547,135,o),
(547,193,qs),
(547,250,o),
(504,320,o),
(433,361,o),
(348,385,o),
(263,406,o),
(192,436,o),
(149,488,o),
(149,532,qs),
(149,581,o),
(230,646,o),
(294,646,qs),
(392,646,o),
(500,563,q),
(540,623,l),
(474,670,o),
(357,711,o),
(293,711,qs),
(229,711,o),
(130,663,o),
(75,579,o),
(75,524,qs),
(75,468,o),
(118,398,o),
(188,357,o),
(273,333,o),
(357,312,o),
(427,283,o),
(470,232,o),
(470,189,qs),
(470,151,o),
(429,90,o),
(358,55,o),
(312,55,qs),
(257,55,o),
(161,101,o),
(99,157,q),
(53,99,l),
(116,42,o),
(240,-11,o),
(310,-11,qs),
(379,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
27 26 4 3 4 1 3 1 76 0 3 3 2 97 0 2 2 26 77 0 1 1 0 97 4 1 0 0 27 0 78 1 0 30 28 24 22 8 6 0 43 1 43 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = S;
unicode = 83;
},
{
glyphname = Sacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (292,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (-8,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = Scaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (292,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (-8,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = Scedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(407,-186,o),
(407,-146,qs),
(407,-111,o),
(354,-68,o),
(310,-66,q),
(323,-11,l),
(388,-8,o),
(489,46,o),
(547,137,o),
(547,193,qs),
(547,250,o),
(504,320,o),
(433,361,o),
(348,385,o),
(263,406,o),
(192,436,o),
(149,488,o),
(149,532,qs),
(149,581,o),
(230,646,o),
(294,646,qs),
(392,646,o),
(500,563,q),
(540,623,l),
(474,670,o),
(357,711,o),
(293,711,qs),
(229,711,o),
(130,663,o),
(75,579,o),
(75,524,qs),
(75,468,o),
(118,398,o),
(188,357,o),
(273,333,o),
(357,312,o),
(427,283,o),
(470,232,o),
(470,189,qs),
(470,151,o),
(429,90,o),
(358,55,o),
(312,55,qs),
(257,55,o),
(161,101,o),
(99,157,q),
(53,99,l),
(109,48,o),
(220,-5,o),
(281,-10,q),
(258,-99,l),
(287,-99,ls),
(321,-99,o),
(358,-125,o),
(358,-148,qs),
(358,-172,o),
(324,-200,o),
(293,-200,qs),
(249,-200,o),
(214,-171,q),
(186,-203,l),
(227,-239,o),
(296,-239,qs),
(345,-239,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
40 39 17 16 4 3 5 3 1 1 2 2 1 0 1 3 76 13 1 6 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 0 2 1 7 2 105 0 5 5 4 97 0 4 4 26 77 0 3 3 6 97 0 6 6 30 77 0 1 1 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 7 0 2 1 7 2 105 0 1 8 1 0 1 0 101 0 5 5 4 97 0 4 4 26 77 0 3 3 6 97 0 6 6 30 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 59 58 57 56 43 41 37 35 21 19 12 10 6 4 0 63 1 63 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = Scircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (292,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (-8,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Scircumflex;
unicode = 348;
},
{
glyphname = uni0218;
layers = (
{
anchors = (
{
name = bottom;
pos = (304,0);
},
{
name = top;
pos = (292,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (4,0);
ref = uni0326;
}
);
width = 600;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni1E9E;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(529,34,o),
(581,109,o),
(581,154,qs),
(581,267,o),
(463,324,qs),
(410,350,o),
(375,377,o),
(375,393,qs),
(375,404,o),
(391,435,o),
(410,458,qs),
(533,611,l),
(533,700,l),
(72,700,l),
(72,0,l),
(149,0,l),
(149,636,l),
(462,636,l),
(346,485,ls),
(318,449,o),
(300,412,o),
(300,390,qs),
(300,359,o),
(346,312,o),
(410,278,qs),
(447,259,o),
(487,225,o),
(503,184,o),
(503,154,qs),
(503,114,o),
(436,55,o),
(389,55,qs),
(316,55,o),
(253,110,q),
(213,51,l),
(249,22,o),
(343,-11,o),
(390,-11,qs),
(443,-11,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
26 4 2 1 2 3 1 0 1 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
26 4 2 1 2 3 1 3 1 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 4 95 0 4 4 20 77 0 1 1 0 97 3 5 2 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 2 2 4 95 0 4 4 20 77 0 3 3 21 77 0 1 1 0 97 5 1 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 25 24 23 22 21 20 7 5 0 38 1 38 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = T;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,633,l),
(570,633,l),
(570,700,l),
(30,700,l),
(30,633,l),
(262,633,l),
(262,0,l),
(339,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 1 95 0 1 1 20 77 4 1 3 3 21 3 78 0 0 0 7 0 7 17 17 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = T;
unicode = 84;
},
{
glyphname = Tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(339,312,l),
(492,312,l),
(492,373,l),
(339,373,l),
(339,633,l),
(570,633,l),
(570,700,l),
(30,700,l),
(30,633,l),
(262,633,l),
(262,373,l),
(108,373,l),
(108,312,l),
(262,312,l),
(262,0,l),
(339,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 1 6 1 0 7 1 0 103 4 1 2 2 3 95 0 3 3 20 77 8 1 7 7 21 7 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Tbar;
unicode = 358;
},
{
glyphname = Tcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (0,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = uni0162;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,-99,l),
(283,-99,ls),
(317,-99,o),
(354,-125,o),
(354,-148,qs),
(354,-172,o),
(320,-200,o),
(289,-200,qs),
(245,-200,o),
(210,-171,q),
(182,-203,l),
(223,-239,o),
(292,-239,qs),
(341,-239,o),
(403,-186,o),
(403,-146,qs),
(403,-111,o),
(350,-68,o),
(306,-66,q),
(321,0,l),
(339,0,l),
(339,633,l),
(570,633,l),
(570,700,l),
(30,700,l),
(30,633,l),
(262,633,l),
(262,0,l),
(279,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
18 1 6 7 17 1 5 6 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 4 0 7 6 4 7 105 2 1 0 0 1 95 0 1 1 20 77 9 8 2 3 3 21 77 0 6 6 5 97 0 5 5 31 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 0 7 6 4 7 105 0 6 0 5 6 5 101 2 1 0 0 1 95 0 1 1 20 77 9 8 2 3 3 21 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
0 0 0 28 0 28 36 35 36 17 17 17 17 17 10 7 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni021A;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
ref = uni0326;
}
);
width = 600;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = U;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,53,o),
(541,171,o),
(541,251,qs),
(541,700,l),
(464,700,l),
(464,251,ls),
(464,163,o),
(375,59,o),
(300,59,qs),
(225,59,o),
(136,163,o),
(136,251,qs),
(136,700,l),
(59,700,l),
(59,251,ls),
(59,171,o),
(118,53,o),
(226,-11,o),
(300,-11,qs),
(374,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 20 77 0 2 2 0 97 4 1 0 0 27 0 78 1 0 15 14 11 9 6 5 0 19 1 19 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (0,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ubreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (0,212);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = Ucircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (0,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (0,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Ugrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (0,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uhungarumlaut;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (0,212);
ref = uni030B;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = Umacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (0,212);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,-212,q),
(390,-173,l),
(381,-179,o),
(355,-185,o),
(342,-185,qs),
(311,-185,o),
(275,-155,o),
(275,-128,qs),
(275,-97,o),
(325,-35,o),
(379,0,q),
(455,23,o),
(541,154,o),
(541,251,qs),
(541,700,l),
(464,700,l),
(464,251,ls),
(464,163,o),
(375,59,o),
(300,59,qs),
(225,59,o),
(136,163,o),
(136,251,qs),
(136,700,l),
(59,700,l),
(59,251,ls),
(59,129,o),
(192,-13,o),
(310,-11,q),
(265,-45,o),
(225,-106,o),
(225,-140,qs),
(225,-181,o),
(283,-231,o),
(331,-231,qs),
(374,-231,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
33 1 5 1 34 1 0 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
4 1 2 2 20 77 0 3 3 1 97 0 1 1 27 77 0 5 5 0 97 6 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 5 6 1 0 5 0 101 4 1 2 2 20 77 0 3 3 1 97 0 1 1 27 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 31 29 20 19 16 14 11 10 7 6 0 35 1 35 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = Uring;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (0,212);
ref = uni030A;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = Utilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (376,0);
},
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (0,212);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,699,l),
(505,699,l),
(301,72,l),
(97,700,l),
(16,700,l),
(250,0,l),
(348,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
3 1 2 0 1 76 1 1 0 0 20 77 3 1 2 2 21 2 78 0 0 0 6 0 6 18 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
layers = (
{
anchors = (
{
name = top;
pos = (302,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,576,l),
(418,0,l),
(491,0,l),
(575,700,l),
(506,700,l),
(447,161,l),
(336,700,l),
(267,700,l),
(156,159,l),
(97,700,l),
(25,700,l),
(110,0,l),
(183,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 20 77 5 4 2 3 3 21 3 78 0 0 0 12 0 12 17 18 18 17 6 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = W;
unicode = 87;
},
{
glyphname = Wacute;
layers = (
{
anchors = (
{
name = top;
pos = (302,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (2,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = Wcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (302,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (2,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = Wdieresis;
layers = (
{
anchors = (
{
name = top;
pos = (302,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (2,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = Wgrave;
layers = (
{
anchors = (
{
name = top;
pos = (302,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (2,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(299,300,l),
(487,0,l),
(576,0,l),
(341,365,l),
(559,700,l),
(473,700,l),
(300,427,l),
(129,700,l),
(41,700,l),
(257,362,l),
(24,0,l),
(110,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 7 4 1 4 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 18 18 18 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(338,286,l),
(577,700,l),
(497,700,l),
(302,355,l),
(107,700,l),
(23,700,l),
(261,287,l),
(261,0,l),
(338,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
7 4 1 3 2 0 1 76 1 1 0 0 20 77 3 1 2 2 21 2 78 0 0 0 8 0 8 18 18 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (0,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ycircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (0,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = Ydieresis;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (0,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Ygrave;
layers = (
{
anchors = (
{
name = top;
pos = (300,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (0,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = Z;
layers = (
{
anchors = (
{
name = top;
pos = (299,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,67,l),
(149,65,l),
(541,646,l),
(541,700,l),
(57,700,l),
(57,633,l),
(446,635,l),
(54,54,l),
(54,0,l),
(549,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
6 1 0 1 1 1 3 2 2 76 0 0 0 1 95 0 1 1 20 77 0 2 2 3 95 4 1 3 3 21 3 78 0 0 0 9 0 9 18 17 18 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Z;
unicode = 90;
},
{
glyphname = Zacute;
layers = (
{
anchors = (
{
name = top;
pos = (299,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (-1,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = Zcaron;
layers = (
{
anchors = (
{
name = top;
pos = (299,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (-1,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = Zdotaccent;
layers = (
{
anchors = (
{
name = top;
pos = (299,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (-1,212);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = a;
layers = (
{
anchors = (
{
name = bottom;
pos = (488,0);
},
{
name = top;
pos = (287,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(416,56,q),
(416,0,l),
(488,0,l),
(488,314,ls),
(488,402,o),
(387,496,o),
(294,496,qs),
(247,496,o),
(151,472,o),
(98,443,q),
(128,388,l),
(174,414,o),
(248,435,o),
(285,435,qs),
(416,435,o),
(416,304,qs),
(416,248,l),
(382,268,o),
(306,285,o),
(262,285,qs),
(177,285,o),
(74,205,o),
(74,139,qs),
(74,95,o),
(120,28,o),
(203,-10,o),
(256,-10,qs),
(350,-10,o)
);
},
{
closed = 1;
nodes = (
(215,232,o),
(273,232,qs),
(315,232,o),
(385,216,o),
(416,197,q),
(416,103,l),
(385,73,o),
(314,46,o),
(271,46,qs),
(214,46,o),
(144,98,o),
(144,141,qs),
(144,182,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
17 1 2 3 16 1 1 2 10 1 6 1 35 34 26 3 5 6 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 0 6 5 1 6 105 0 2 2 3 97 0 3 3 29 77 0 5 5 0 97 4 7 2 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 1 0 6 5 1 6 105 0 2 2 3 97 0 3 3 29 77 0 4 4 21 77 0 5 5 0 97 7 1 0 0 30 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 39 37 32 30 25 24 21 19 14 12 8 6 0 27 1 27 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (488,0);
},
{
name = top;
pos = (287,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-13,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = abreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (488,0);
},
{
name = top;
pos = (287,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-13,0);
ref = uni0306;
}
);
width = 600;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = acircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (488,0);
},
{
name = top;
pos = (287,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-13,0);
ref = uni0302;
}
);
width = 600;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (488,0);
},
{
name = top;
pos = (287,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-13,0);
ref = uni0308;
}
);
width = 600;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = agrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (488,0);
},
{
name = top;
pos = (287,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-13,0);
ref = gravecomb;
}
);
width = 600;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = amacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (488,0);
},
{
name = top;
pos = (287,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-13,0);
ref = uni0304;
}
);
width = 600;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(416,56,q),
(416,0,l),
(433,0,l),
(381,-37,o),
(334,-103,o),
(334,-140,qs),
(334,-181,o),
(392,-231,o),
(440,-231,qs),
(483,-231,o),
(513,-212,q),
(499,-173,l),
(490,-179,o),
(464,-185,o),
(451,-185,qs),
(420,-185,o),
(384,-155,o),
(384,-128,qs),
(384,-97,o),
(434,-35,o),
(488,0,q),
(488,314,ls),
(488,402,o),
(387,496,o),
(294,496,qs),
(247,496,o),
(151,472,o),
(98,443,q),
(128,388,l),
(174,414,o),
(248,435,o),
(285,435,qs),
(416,435,o),
(416,304,qs),
(416,248,l),
(382,268,o),
(306,285,o),
(262,285,qs),
(177,285,o),
(74,205,o),
(74,139,qs),
(74,95,o),
(120,28,o),
(203,-10,o),
(256,-10,qs),
(350,-10,o)
);
},
{
closed = 1;
nodes = (
(215,232,o),
(273,232,qs),
(315,232,o),
(385,216,o),
(416,197,q),
(416,103,l),
(385,73,o),
(314,46,o),
(271,46,qs),
(214,46,o),
(144,98,o),
(144,141,qs),
(144,182,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
17 1 2 3 16 1 1 2 10 1 8 1 53 52 44 3 7 8 24 1 0 7 33 1 4 0 34 1 5 4 7 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
17 1 2 3 16 1 1 2 10 1 8 1 53 52 44 3 7 8 33 1 4 0 34 1 5 4 6 76 24 1 6 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 1 0 8 7 1 8 105 0 2 2 3 97 0 3 3 29 77 0 7 7 0 97 6 9 2 0 0 30 77 0 4 4 5 97 0 5 5 31 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 1 0 8 7 1 8 105 0 2 2 3 97 0 3 3 29 77 0 6 6 21 77 0 7 7 0 97 9 1 0 0 30 77 0 4 4 5 97 0 5 5 31 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 1 0 8 7 1 8 105 0 4 0 5 4 5 101 0 2 2 3 97 0 3 3 29 77 0 6 6 21 77 0 7 7 0 97 9 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 57 55 50 48 43 42 37 35 31 29 21 19 14 12 8 6 0 45 1 45 10 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = aring;
layers = (
{
anchors = (
{
name = bottom;
pos = (488,0);
},
{
name = top;
pos = (287,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-13,0);
ref = uni030A;
}
);
width = 600;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (488,0);
},
{
name = top;
pos = (287,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-13,0);
ref = tildecomb;
}
);
width = 600;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(295,59,q),
(320,27,o),
(390,-10,o),
(434,-10,qs),
(507,-10,o),
(571,42,q),
(532,94,l),
(484,54,o),
(433,54,qs),
(379,54,o),
(312,153,o),
(308,228,q),
(571,228,l),
(571,253,ls),
(571,326,o),
(532,435,o),
(463,496,o),
(417,496,qs),
(378,496,o),
(315,456,o),
(292,418,q),
(264,496,o),
(172,496,qs),
(138,496,o),
(66,469,o),
(30,441,q),
(65,391,l),
(98,417,o),
(145,435,o),
(172,435,qs),
(238,435,o),
(238,338,qs),
(238,274,l),
(213,283,o),
(183,283,qs),
(113,283,o),
(29,202,o),
(29,134,qs),
(29,70,o),
(107,-10,o),
(171,-10,qs),
(239,-10,o)
);
},
{
closed = 1;
nodes = (
(371,434,o),
(414,434,qs),
(453,434,o),
(502,352,o),
(506,280,q),
(310,280,l),
(316,348,o)
);
},
{
closed = 1;
nodes = (
(95,99,o),
(95,135,qs),
(95,180,o),
(149,232,o),
(190,232,qs),
(218,232,o),
(242,223,q),
(245,155,o),
(270,100,q),
(226,46,o),
(174,46,qs),
(138,46,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
15 1 2 3 20 14 2 1 2 8 1 5 1 53 51 40 34 4 6 5 35 1 0 6 5 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
15 1 2 3 20 14 2 1 2 8 1 5 1 53 51 40 34 4 6 5 35 1 0 10 5 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
8 1 1 11 1 5 6 1 5 105 9 1 2 2 3 97 4 1 3 3 29 77 13 10 2 6 6 0 97 7 12 2 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
8 1 1 11 1 5 6 1 5 105 9 1 2 2 3 97 4 1 3 3 29 77 0 6 6 0 97 7 12 2 0 0 30 77 13 1 10 10 0 97 7 12 2 0 0 30 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
50 49 1 0 56 54 49 60 50 60 47 45 43 42 38 36 33 31 29 28 24 22 19 17 12 10 7 5 0 41 1 41 14 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ae;
unicode = 230;
},
{
glyphname = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(164,65,l),
(221,-7,o),
(320,-7,qs),
(384,-7,o),
(485,60,o),
(545,173,o),
(545,243,qs),
(545,314,o),
(484,427,o),
(381,494,o),
(316,494,qs),
(224,494,o),
(164,426,q),
(164,737,l),
(91,722,l),
(91,0,l),
(164,0,l)
);
},
{
closed = 1;
nodes = (
(187,91,o),
(164,122,q),
(164,364,l),
(188,395,o),
(261,430,o),
(302,430,qs),
(351,430,o),
(428,382,o),
(473,298,o),
(473,244,qs),
(473,191,o),
(428,106,o),
(351,57,o),
(302,57,qs),
(259,57,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
29 28 15 3 4 3 4 1 76 2 1 2 0 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 0 97 0 0 0 29 77 6 1 3 3 1 97 5 2 2 1 1 27 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 0 97 0 0 0 29 77 6 1 3 3 1 97 5 2 2 1 1 30 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 0 97 0 0 0 29 77 5 1 2 2 21 77 6 1 3 3 1 97 0 1 1 30 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
18 17 0 0 26 24 17 31 18 31 0 16 0 16 38 36 7 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
layers = (
{
anchors = (
{
name = bottom;
pos = (306,0);
},
{
name = top;
pos = (305,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(486,50,o),
(518,101,q),
(459,138,l),
(436,100,o),
(357,55,o),
(308,55,qs),
(258,55,o),
(180,104,o),
(135,189,o),
(135,243,qs),
(135,298,o),
(180,382,o),
(258,431,o),
(308,431,qs),
(357,431,o),
(436,386,o),
(459,348,q),
(518,385,l),
(486,436,o),
(376,496,o),
(308,496,qs),
(239,496,o),
(128,430,o),
(63,315,o),
(63,243,qs),
(63,171,o),
(128,57,o),
(239,-10,o),
(308,-10,qs),
(376,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
27 26 12 11 4 3 2 1 76 0 2 2 1 97 0 1 1 29 77 0 3 3 0 97 4 1 0 0 30 0 78 1 0 24 22 16 14 9 7 0 29 1 29 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = c;
unicode = 99;
},
{
glyphname = cacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (306,0);
},
{
name = top;
pos = (305,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (5,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = ccaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (306,0);
},
{
name = top;
pos = (305,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (5,0);
ref = uni030C;
}
);
width = 600;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = ccedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(409,-186,o),
(409,-146,qs),
(409,-111,o),
(356,-68,o),
(312,-66,q),
(325,-9,l),
(387,-5,o),
(488,53,o),
(518,101,q),
(459,138,l),
(436,100,o),
(357,55,o),
(308,55,qs),
(258,55,o),
(180,104,o),
(135,189,o),
(135,243,qs),
(135,298,o),
(180,382,o),
(258,431,o),
(308,431,qs),
(357,431,o),
(436,386,o),
(459,348,q),
(518,385,l),
(486,436,o),
(376,496,o),
(308,496,qs),
(239,496,o),
(128,430,o),
(63,315,o),
(63,243,qs),
(63,176,o),
(121,66,o),
(220,-2,o),
(283,-9,q),
(260,-99,l),
(289,-99,ls),
(323,-99,o),
(360,-125,o),
(360,-148,qs),
(360,-172,o),
(326,-200,o),
(295,-200,qs),
(251,-200,o),
(216,-171,q),
(188,-203,l),
(229,-239,o),
(298,-239,qs),
(347,-239,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
40 39 25 24 4 5 4 13 1 7 6 3 1 1 2 2 1 0 1 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 0 2 1 7 2 105 0 4 4 3 97 0 3 3 29 77 0 5 5 6 97 0 6 6 27 77 0 1 1 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 0 2 1 7 2 105 0 4 4 3 97 0 3 3 29 77 0 5 5 6 97 0 6 6 30 77 0 1 1 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 7 0 2 1 7 2 105 0 1 8 1 0 1 0 101 0 4 4 3 97 0 3 3 29 77 0 5 5 6 97 0 6 6 30 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 45 44 43 42 37 35 29 27 22 20 12 10 6 4 0 49 1 49 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = ccircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (306,0);
},
{
name = top;
pos = (305,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (5,0);
ref = uni0302;
}
);
width = 600;
}
);
note = ccircumflex;
unicode = 265;
},
{
glyphname = cdotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (306,0);
},
{
name = top;
pos = (305,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (5,0);
ref = uni0307;
}
);
width = 600;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(436,65,q),
(436,0,l),
(509,0,l),
(509,737,l),
(436,722,l),
(436,426,l),
(376,494,o),
(284,494,qs),
(220,494,o),
(116,427,o),
(55,314,o),
(55,243,qs),
(55,173,o),
(115,60,o),
(217,-7,o),
(280,-7,qs),
(379,-7,o)
);
},
{
closed = 1;
nodes = (
(172,106,o),
(127,191,o),
(127,244,qs),
(127,298,o),
(172,382,o),
(249,430,o),
(298,430,qs),
(339,430,o),
(412,395,o),
(436,364,q),
(436,122,l),
(413,91,o),
(341,57,o),
(298,57,qs),
(249,57,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
21 20 15 10 4 3 4 1 76 12 11 2 1 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 1 97 0 1 1 29 77 6 1 3 3 0 97 2 5 2 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 4 4 1 97 0 1 1 29 77 6 1 3 3 0 97 2 5 2 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 1 97 0 1 1 29 77 0 2 2 21 77 6 1 3 3 0 97 5 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
18 17 1 0 25 23 17 31 18 31 14 13 9 7 0 16 1 16 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = d;
unicode = 100;
},
{
glyphname = dcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(632,737,l),
(556,722,l),
(551,527,l),
(607,527,l)
);
},
{
closed = 1;
nodes = (
(404,53,q),
(404,0,l),
(477,0,l),
(477,737,l),
(404,722,l),
(404,437,l),
(377,464,o),
(309,494,o),
(271,494,qs),
(211,494,o),
(115,427,o),
(58,314,o),
(58,243,qs),
(58,173,o),
(113,60,o),
(208,-7,o),
(267,-7,qs),
(350,-7,o)
);
},
{
closed = 1;
nodes = (
(169,382,o),
(238,430,o),
(281,430,qs),
(317,430,o),
(381,402,o),
(404,376,q),
(404,110,l),
(356,57,o),
(281,57,qs),
(238,57,o),
(169,106,o),
(130,191,o),
(130,244,qs),
(130,298,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
15 1 5 2 29 28 2 4 5 20 1 1 4 3 76 17 16 2 1 4 0 74
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
15 1 5 2 29 28 2 4 5 20 1 3 4 3 76 17 16 2 1 4 0 74
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
6 1 0 2 0 133 0 5 5 2 97 0 2 2 29 77 0 4 4 1 97 3 7 2 1 1 27 1 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
6 1 0 2 0 133 0 5 5 2 97 0 2 2 29 77 0 4 4 1 97 3 7 2 1 1 30 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
6 1 0 2 0 133 0 5 5 2 97 0 2 2 29 77 0 3 3 21 77 0 4 4 1 97 7 1 1 1 30 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
5 4 0 0 33 31 27 25 19 18 13 11 4 21 5 21 0 3 0 3 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(436,65,q),
(436,0,l),
(509,0,l),
(509,573,l),
(587,573,l),
(587,627,l),
(509,627,l),
(509,737,l),
(436,722,l),
(436,627,l),
(292,627,l),
(292,573,l),
(436,573,l),
(436,426,l),
(376,494,o),
(284,494,qs),
(220,494,o),
(116,427,o),
(55,314,o),
(55,243,qs),
(55,173,o),
(115,60,o),
(217,-7,o),
(280,-7,qs),
(379,-7,o)
);
},
{
closed = 1;
nodes = (
(172,106,o),
(127,191,o),
(127,244,qs),
(127,298,o),
(172,382,o),
(249,430,o),
(298,430,qs),
(339,430,o),
(412,395,o),
(436,364,q),
(436,122,l),
(413,91,o),
(341,57,o),
(298,57,qs),
(249,57,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
29 28 23 10 4 7 8 1 76 16 15 2 3 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
4 1 3 5 1 2 1 3 2 103 0 8 8 1 97 0 1 1 29 77 10 1 7 7 0 97 6 9 2 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
4 1 3 5 1 2 1 3 2 103 0 8 8 1 97 0 1 1 29 77 10 1 7 7 0 97 6 9 2 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
4 1 3 5 1 2 1 3 2 103 0 8 8 1 97 0 1 1 29 77 0 6 6 21 77 10 1 7 7 0 97 9 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
26 25 1 0 33 31 25 39 26 39 22 21 20 19 18 17 14 13 12 11 9 7 0 24 1 24 11 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = eth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,65,o),
(541,199,o),
(541,289,qs),
(541,510,o),
(419,635,q),
(510,695,l),
(483,737,l),
(380,670,l),
(326,713,o),
(251,737,q),
(221,685,l),
(279,667,o),
(325,634,q),
(240,579,l),
(269,537,l),
(364,599,l),
(454,509,o),
(472,362,q),
(447,413,o),
(348,476,o),
(284,476,qs),
(220,476,o),
(118,414,o),
(59,307,o),
(59,238,qs),
(59,169,o),
(122,56,o),
(230,-10,o),
(296,-10,qs),
(370,-10,o)
);
},
{
closed = 1;
nodes = (
(175,102,o),
(131,185,o),
(131,236,qs),
(131,288,o),
(175,370,o),
(250,418,o),
(298,418,qs),
(346,418,o),
(422,370,o),
(465,288,o),
(465,236,qs),
(465,185,o),
(422,102,o),
(346,54,o),
(298,54,qs),
(250,54,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
11 1 2 3 1 76 24 23 22 21 19 18 16 15 14 13 10 1 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 3 3 1 97 0 1 1 23 77 5 1 2 2 0 97 4 1 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 3 2 1 3 105 5 1 2 2 0 97 4 1 0 0 30 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
31 30 1 0 39 37 30 45 31 45 9 7 0 29 1 29 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eth;
unicode = 240;
},
{
glyphname = e;
layers = (
{
anchors = (
{
name = bottom;
pos = (385,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,31,o),
(509,71,q),
(458,116,l),
(433,87,o),
(358,54,o),
(315,54,qs),
(267,54,o),
(188,99,o),
(140,178,o),
(136,228,q),
(539,228,l),
(539,250,ls),
(539,320,o),
(477,431,o),
(369,496,o),
(300,496,qs),
(234,496,o),
(127,430,o),
(65,316,o),
(65,244,qs),
(65,172,o),
(130,57,o),
(242,-10,o),
(312,-10,qs),
(370,-10,o)
);
},
{
closed = 1;
nodes = (
(237,433,o),
(299,433,qs),
(343,433,o),
(414,394,o),
(461,326,o),
(467,282,q),
(138,282,l),
(149,349,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
22 21 2 3 2 1 76 0 4 0 2 3 4 2 103 0 5 5 1 97 0 1 1 29 77 0 3 3 0 97 6 1 0 0 30 0 78 1 0 31 29 26 25 19 17 14 13 9 7 0 24 1 24 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = e;
unicode = 101;
},
{
glyphname = eacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (385,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
ref = acutecomb;
}
);
width = 600;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ebreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (385,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
ref = uni0306;
}
);
width = 600;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = ecaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (385,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
ref = uni030C;
}
);
width = 600;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = ecircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (385,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
ref = uni0302;
}
);
width = 600;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (385,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
ref = uni0308;
}
);
width = 600;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = edotaccent;
layers = (
{
anchors = (
{
name = bottom;
pos = (385,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
ref = uni0307;
}
);
width = 600;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = egrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (385,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
ref = gravecomb;
}
);
width = 600;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = emacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (385,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
ref = uni0304;
}
);
width = 600;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(133,54,o),
(248,-12,o),
(320,-10,q),
(275,-44,o),
(235,-105,o),
(235,-140,qs),
(235,-181,o),
(293,-231,o),
(341,-231,qs),
(384,-231,o),
(414,-212,q),
(400,-173,l),
(391,-179,o),
(365,-185,o),
(352,-185,qs),
(321,-185,o),
(285,-155,o),
(285,-128,qs),
(285,-97,o),
(335,-35,o),
(389,0,q),
(458,18,o),
(509,71,q),
(458,116,l),
(433,87,o),
(358,54,o),
(315,54,qs),
(267,54,o),
(188,99,o),
(140,178,o),
(136,228,q),
(539,228,l),
(539,250,ls),
(539,320,o),
(477,431,o),
(369,496,o),
(300,496,qs),
(234,496,o),
(127,430,o),
(65,316,o),
(65,244,qs),
(65,171,o)
);
},
{
closed = 1;
nodes = (
(237,433,o),
(299,433,qs),
(343,433,o),
(414,394,o),
(461,326,o),
(467,282,q),
(138,282,l),
(149,349,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
18 17 2 2 1 29 1 3 5 30 1 4 3 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 6 0 1 2 6 1 103 0 7 7 0 97 0 0 0 29 77 0 2 2 5 97 0 5 5 27 77 0 3 3 4 97 0 4 4 31 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 6 0 1 2 6 1 103 0 3 0 4 3 4 101 0 7 7 0 97 0 0 0 29 77 0 2 2 5 97 0 5 5 27 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
35 19 21 36 42 35 20 35 8 7 30
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(289,428,l),
(514,428,l),
(514,488,l),
(289,488,l),
(289,574,ls),
(289,628,o),
(339,675,o),
(386,675,qs),
(421,675,o),
(477,664,o),
(514,649,q),
(514,717,l),
(484,728,o),
(423,740,o),
(393,740,qs),
(216,740,o),
(216,586,qs),
(216,488,l),
(49,488,l),
(49,428,l),
(216,428,l),
(216,0,l),
(289,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
10 1 3 2 11 1 1 3 2 76 0 3 3 2 97 0 2 2 22 77 5 1 0 0 1 95 4 1 1 1 23 77 7 1 6 6 21 6 78 0 0 0 22 0 22 17 19 37 34 17 17 8 7 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
layers = (
{
anchors = (
{
name = top;
pos = (298,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(509,-122,o),
(509,-31,qs),
(509,488,l),
(437,488,l),
(437,425,l),
(377,494,o),
(284,494,qs),
(220,494,o),
(116,427,o),
(55,314,o),
(55,244,qs),
(55,174,o),
(115,61,o),
(217,-6,o),
(280,-6,qs),
(379,-6,o),
(436,66,q),
(436,-32,ls),
(436,-157,o),
(300,-157,qs),
(263,-157,o),
(189,-135,o),
(144,-112,q),
(113,-168,l),
(155,-192,o),
(254,-219,o),
(303,-219,qs),
(403,-219,o)
);
},
{
closed = 1;
nodes = (
(172,106,o),
(127,191,o),
(127,244,qs),
(127,298,o),
(172,382,o),
(249,430,o),
(298,430,qs),
(339,430,o),
(412,395,o),
(436,364,q),
(436,123,l),
(387,57,o),
(298,57,qs),
(249,57,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
31 30 22 10 4 5 6 4 1 1 2 3 1 0 1 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 6 6 3 97 4 1 3 3 29 77 8 1 5 5 2 97 0 2 2 30 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 6 6 3 97 4 1 3 3 29 77 8 1 5 5 2 97 0 2 2 27 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 6 6 3 97 4 1 3 3 29 77 8 1 5 5 2 97 0 2 2 30 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 4 4 23 77 0 6 6 3 97 0 3 3 29 77 8 1 5 5 2 97 0 2 2 30 77 0 1 1 0 97 7 1 0 0 31 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
29 28 1 0 35 33 28 41 29 41 24 23 21 19 13 11 8 6 0 27 1 27 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = g;
unicode = 103;
},
{
glyphname = gbreve;
layers = (
{
anchors = (
{
name = top;
pos = (298,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (-2,0);
ref = uni0306;
}
);
width = 600;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = gcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (298,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (-2,0);
ref = uni0302;
}
);
width = 600;
}
);
note = gcircumflex;
unicode = 285;
},
{
glyphname = uni0123;
layers = (
{
anchors = (
{
name = top;
pos = (298,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(259,610,l),
(332,610,l),
(381,797,l),
(328,797,l)
);
},
{
closed = 1;
nodes = (
(509,-122,o),
(509,-31,qs),
(509,488,l),
(437,488,l),
(437,425,l),
(377,494,o),
(284,494,qs),
(220,494,o),
(116,427,o),
(55,314,o),
(55,244,qs),
(55,174,o),
(115,61,o),
(217,-6,o),
(280,-6,qs),
(379,-6,o),
(436,66,q),
(436,-32,ls),
(436,-157,o),
(300,-157,qs),
(263,-157,o),
(189,-135,o),
(144,-112,q),
(113,-168,l),
(155,-192,o),
(254,-219,o),
(303,-219,qs),
(403,-219,o)
);
},
{
closed = 1;
nodes = (
(172,106,o),
(127,191,o),
(127,244,qs),
(127,298,o),
(172,382,o),
(249,430,o),
(298,430,qs),
(339,430,o),
(412,395,o),
(436,364,q),
(436,123,l),
(387,57,o),
(298,57,qs),
(249,57,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */
35 34 26 14 4 7 8 8 1 3 4 7 1 2 3 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
9 1 1 0 0 5 1 0 103 0 8 8 5 97 6 1 5 5 29 77 11 1 7 7 4 97 0 4 4 30 77 0 3 3 2 97 10 1 2 2 31 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
9 1 1 0 0 5 1 0 103 0 8 8 5 97 6 1 5 5 29 77 11 1 7 7 4 97 0 4 4 27 77 0 3 3 2 97 10 1 2 2 31 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
9 1 1 0 0 5 1 0 103 0 8 8 5 97 6 1 5 5 29 77 11 1 7 7 4 97 0 4 4 30 77 0 3 3 2 97 10 1 2 2 31 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
9 1 1 0 0 5 1 0 103 0 6 6 23 77 0 8 8 5 97 0 5 5 29 77 11 1 7 7 4 97 0 4 4 30 77 0 3 3 2 97 10 1 2 2 31 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
33 32 5 4 0 0 39 37 32 45 33 45 28 27 25 23 17 15 12 10 4 31 5 31 0 3 0 3 17 12 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = gdotaccent;
layers = (
{
anchors = (
{
name = top;
pos = (298,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (-2,0);
ref = uni0307;
}
);
width = 600;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = h;
layers = (
{
anchors = (
{
name = top;
pos = (134,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,360,l),
(216,435,o),
(300,435,qs),
(360,435,o),
(431,360,o),
(431,295,qs),
(431,0,l),
(504,0,l),
(504,316,ls),
(504,370,o),
(459,451,o),
(380,496,o),
(327,496,qs),
(228,496,o),
(172,409,q),
(172,737,l),
(99,722,l),
(99,0,l),
(172,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
17 3 2 1 2 1 76 2 1 2 0 74 0 2 2 0 97 0 0 0 29 77 4 3 2 1 1 21 1 78 0 0 0 18 0 18 35 20 36 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = h;
unicode = 104;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,360,l),
(216,435,o),
(300,435,qs),
(360,435,o),
(431,360,o),
(431,295,qs),
(431,0,l),
(504,0,l),
(504,316,ls),
(504,370,o),
(459,451,o),
(380,496,o),
(327,496,qs),
(228,496,o),
(172,409,q),
(172,573,l),
(301,573,l),
(301,627,l),
(172,627,l),
(172,737,l),
(99,722,l),
(99,627,l),
(21,627,l),
(21,573,l),
(99,573,l),
(99,0,l),
(172,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
25 11 2 5 6 1 76 6 5 2 1 74 2 1 1 3 1 0 4 1 0 103 0 6 6 4 97 0 4 4 29 77 8 7 2 5 5 21 5 78 0 0 0 26 0 26 35 20 34 17 19 17 17 9 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = hcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (134,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = h;
},
{
alignment = -1;
pos = (-166,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = hcircumflex;
unicode = 293;
},
{
glyphname = i;
layers = (
{
anchors = (
{
name = bottom;
pos = (479,0);
},
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,641,o),
(356,666,qs),
(356,692,o),
(319,728,o),
(293,728,qs),
(267,728,o),
(230,692,o),
(230,666,qs),
(230,641,o),
(267,604,o),
(293,604,qs),
(319,604,o)
);
},
{
closed = 1;
nodes = (
(500,3,o),
(529,13,q),
(529,79,l),
(496,66,o),
(442,55,o),
(416,55,qs),
(373,55,o),
(329,95,o),
(329,141,qs),
(329,488,l),
(75,488,l),
(75,428,l),
(256,428,l),
(256,134,ls),
(256,62,o),
(338,-10,o),
(415,-10,qs),
(443,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
26 1 5 3 27 1 2 5 2 76 6 1 0 0 1 97 0 1 1 22 77 0 3 3 4 95 0 4 4 23 77 0 5 5 2 97 7 1 2 2 30 2 78 13 12 1 0 24 22 19 18 17 16 12 29 13 29 7 5 0 11 1 11 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = i;
unicode = 105;
},
{
glyphname = dotlessi;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,3,o),
(529,13,q),
(529,79,l),
(496,66,o),
(442,55,o),
(416,55,qs),
(373,55,o),
(329,95,o),
(329,141,qs),
(329,488,l),
(75,488,l),
(75,428,l),
(256,428,l),
(256,134,ls),
(256,62,o),
(338,-10,o),
(415,-10,qs),
(443,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
14 1 3 1 15 1 0 3 2 76 0 1 1 2 95 0 2 2 23 77 0 3 3 0 97 4 1 0 0 30 0 78 1 0 12 10 7 6 5 4 0 17 1 17 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = iacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-7,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = ibreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-7,0);
ref = uni0306;
}
);
width = 600;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = icircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-7,0);
ref = uni0302;
}
);
width = 600;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-7,0);
ref = uni0308;
}
);
width = 600;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = i.loclTRK;
layers = (
{
anchors = (
{
name = bottom;
pos = (479,0);
},
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = i;
}
);
width = 600;
}
);
note = i.loclTRK;
},
{
glyphname = igrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-7,0);
ref = gravecomb;
}
);
width = 600;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = imacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-7,0);
ref = uni0304;
}
);
width = 600;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,641,o),
(356,666,qs),
(356,692,o),
(319,728,o),
(293,728,qs),
(267,728,o),
(230,692,o),
(230,666,qs),
(230,641,o),
(267,604,o),
(293,604,qs),
(319,604,o)
);
},
{
closed = 1;
nodes = (
(504,-212,q),
(490,-173,l),
(481,-179,o),
(455,-185,o),
(442,-185,qs),
(411,-185,o),
(375,-155,o),
(375,-128,qs),
(375,-70,o),
(474,-3,q),
(488,0,o),
(516,8,o),
(529,13,q),
(529,79,l),
(496,66,o),
(442,55,o),
(416,55,qs),
(373,55,o),
(329,95,o),
(329,141,qs),
(329,488,l),
(75,488,l),
(75,428,l),
(256,428,l),
(256,134,ls),
(256,63,o),
(335,-9,o),
(410,-10,q),
(365,-44,o),
(325,-105,o),
(325,-140,qs),
(325,-181,o),
(383,-231,o),
(431,-231,qs),
(474,-231,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
32 1 6 4 33 1 3 6 44 1 7 3 45 1 2 7 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
8 1 0 0 1 97 0 1 1 22 77 0 4 4 5 95 0 5 5 23 77 0 6 6 3 97 0 3 3 30 77 0 7 7 2 97 9 1 2 2 31 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 7 9 1 2 7 2 101 8 1 0 0 1 97 0 1 1 22 77 0 4 4 5 95 0 5 5 23 77 0 6 6 3 97 0 3 3 30 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
13 12 1 0 42 40 30 28 25 24 23 22 19 18 12 46 13 46 7 5 0 11 1 11 10 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = itilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-7,0);
ref = tildecomb;
}
);
width = 600;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = ij;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,728,o),
(167,728,qs),
(141,728,o),
(104,692,o),
(104,666,qs),
(104,641,o),
(141,604,o),
(167,604,qs),
(193,604,o),
(230,641,o),
(230,666,qs),
(230,692,o)
);
},
{
closed = 1;
nodes = (
(459,728,o),
(433,728,qs),
(407,728,o),
(370,692,o),
(370,666,qs),
(370,641,o),
(407,604,o),
(433,604,qs),
(459,604,o),
(496,641,o),
(496,666,qs),
(496,692,o)
);
},
{
closed = 1;
nodes = (
(204,488,l),
(131,488,l),
(131,0,l),
(204,0,l)
);
},
{
closed = 1;
nodes = (
(469,-153,o),
(469,-94,qs),
(469,488,l),
(396,488,l),
(396,-90,ls),
(396,-124,o),
(369,-154,o),
(337,-154,qs),
(317,-154,o),
(301,-150,q),
(301,-213,l),
(311,-215,o),
(334,-219,o),
(346,-219,qs),
(406,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
32 1 7 5 31 1 6 7 2 76 2 1 0 0 1 97 3 1 1 1 22 77 8 1 4 4 23 77 9 1 5 5 21 77 0 7 7 6 97 10 1 6 6 31 6 78 29 28 24 24 39 38 35 33 28 42 29 42 24 27 24 27 19 36 36 36 34 11 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ij;
unicode = 307;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,641,o),
(448,666,qs),
(448,692,o),
(411,728,o),
(385,728,qs),
(359,728,o),
(322,692,o),
(322,666,qs),
(322,641,o),
(359,604,o),
(385,604,qs),
(411,604,o)
);
},
{
closed = 1;
nodes = (
(421,-59,qs),
(421,488,l),
(97,488,l),
(97,428,l),
(348,428,l),
(348,-46,ls),
(348,-104,o),
(294,-154,o),
(243,-154,qs),
(204,-154,o),
(140,-141,o),
(97,-124,q),
(97,-193,l),
(132,-205,o),
(200,-219,o),
(233,-219,qs),
(421,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
16 1 3 4 15 1 2 3 2 76 6 1 0 0 1 97 0 1 1 22 77 0 4 4 5 95 0 5 5 23 77 0 3 3 2 97 7 1 2 2 31 2 78 13 12 1 0 26 25 24 23 20 18 12 28 13 28 7 5 0 11 1 11 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = j;
unicode = 106;
},
{
glyphname = uni0237;
layers = (
{
anchors = (
{
name = top;
pos = (385,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(421,-59,qs),
(421,488,l),
(97,488,l),
(97,428,l),
(348,428,l),
(348,-46,ls),
(348,-104,o),
(294,-154,o),
(243,-154,qs),
(204,-154,o),
(140,-141,o),
(97,-124,q),
(97,-193,l),
(132,-205,o),
(200,-219,o),
(233,-219,qs),
(421,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
4 1 1 2 3 1 0 1 2 76 0 2 2 3 95 0 3 3 23 77 0 1 1 0 97 4 1 0 0 31 0 78 1 0 14 13 12 11 8 6 0 16 1 16 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = uni006A0301;
layers = (
{
anchors = (
{
name = top;
pos = (385,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0237;
},
{
alignment = -1;
pos = (85,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = uni006A0301;
},
{
glyphname = jcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (385,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0237;
},
{
alignment = -1;
pos = (85,0);
ref = uni0302;
}
);
width = 600;
}
);
note = jcircumflex;
unicode = 309;
},
{
glyphname = k;
layers = (
{
anchors = (
{
name = bottom;
pos = (306,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,238,l),
(449,0,l),
(547,0,l),
(266,254,l),
(536,488,l),
(444,488,l),
(186,263,l),
(186,737,l),
(113,722,l),
(113,0,l),
(186,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
9 6 3 3 1 0 1 76 2 1 2 0 74 0 0 0 23 77 3 2 2 1 1 21 1 78 0 0 0 10 0 10 18 20 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = k;
unicode = 107;
},
{
glyphname = uni0137;
layers = (
{
anchors = (
{
name = bottom;
pos = (306,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (6,0);
ref = uni0326;
}
);
width = 600;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,238,l),
(449,0,l),
(547,0,l),
(266,254,l),
(536,488,l),
(444,488,l),
(186,263,l),
(186,488,l),
(113,488,l),
(113,0,l),
(186,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 23 77 4 3 2 2 2 21 2 78 0 0 0 10 0 10 18 18 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = kgreenlandic;
unicode = 312;
},
{
glyphname = l;
layers = (
{
anchors = (
{
name = bottom;
pos = (380,0);
},
{
name = top;
pos = (290,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,3,o),
(529,13,q),
(529,79,l),
(496,66,o),
(442,55,o),
(416,55,qs),
(373,55,o),
(329,95,o),
(329,141,qs),
(329,727,l),
(75,727,l),
(75,667,l),
(256,667,l),
(256,134,ls),
(256,62,o),
(338,-10,o),
(415,-10,qs),
(443,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
14 1 3 1 15 1 0 3 2 76 0 1 1 2 95 0 2 2 22 77 0 3 3 0 97 4 1 0 0 30 0 78 1 0 12 10 7 6 5 4 0 17 1 17 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = l;
unicode = 108;
},
{
glyphname = lacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (380,0);
},
{
name = top;
pos = (290,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (-10,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = lcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (380,0);
},
{
name = top;
pos = (290,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (210,16);
ref = caronSlovak;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
16
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = uni013C;
layers = (
{
anchors = (
{
name = bottom;
pos = (380,0);
},
{
name = top;
pos = (290,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (80,0);
ref = uni0326;
}
);
width = 600;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(500,3,o),
(529,13,q),
(529,79,l),
(496,66,o),
(442,55,o),
(416,55,qs),
(373,55,o),
(329,95,o),
(329,141,qs),
(329,339,l),
(514,443,l),
(514,513,l),
(329,409,l),
(329,727,l),
(75,727,l),
(75,667,l),
(256,667,l),
(256,370,l),
(88,275,l),
(88,205,l),
(256,300,l),
(256,134,ls),
(256,62,o),
(338,-10,o),
(415,-10,qs),
(443,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
22 15 14 13 12 7 6 5 4 9 3 1 23 1 0 3 2 76 0 1 1 2 95 0 2 2 22 77 0 3 3 0 97 4 1 0 0 30 0 78 1 0 20 18 11 10 9 8 0 25 1 25 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(135,403,l),
(149,425,o),
(181,440,o),
(198,440,qs),
(233,440,o),
(270,390,o),
(270,347,qs),
(270,0,l),
(337,0,l),
(337,365,ls),
(337,383,o),
(334,399,q),
(349,423,o),
(381,440,o),
(400,440,qs),
(434,440,o),
(470,390,o),
(470,347,qs),
(470,0,l),
(537,0,l),
(537,365,ls),
(537,423,o),
(476,495,o),
(427,495,qs),
(359,495,o),
(320,436,q),
(306,464,o),
(256,495,o),
(224,495,qs),
(170,495,o),
(135,446,q),
(135,488,l),
(67,488,l),
(67,0,l),
(135,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
3 1 4 0 33 22 8 3 3 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 4 0 97 2 1 2 0 0 23 77 8 7 5 3 3 3 21 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 23 77 6 1 4 4 1 97 2 1 1 1 29 77 8 7 5 3 3 3 21 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 34 0 34 35 21 35 19 35 34 17 9 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,360,l),
(216,435,o),
(300,435,qs),
(360,435,o),
(431,360,o),
(431,295,qs),
(431,0,l),
(504,0,l),
(504,316,ls),
(504,370,o),
(459,451,o),
(380,496,o),
(327,496,qs),
(228,496,o),
(172,409,q),
(172,488,l),
(99,488,l),
(99,0,l),
(172,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
17 3 2 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 3 3 0 97 1 1 0 0 23 77 5 4 2 2 2 21 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 23 77 0 3 3 1 97 0 1 1 29 77 5 4 2 2 2 21 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 18 0 18 35 20 34 17 6 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = n;
unicode = 110;
},
{
glyphname = nacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
ref = acutecomb;
}
);
width = 600;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = ncaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
ref = uni030C;
}
);
width = 600;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = uni0146;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
ref = uni0326;
}
);
width = 600;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = ntilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (300,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
ref = tildecomb;
}
);
width = 600;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(504,-154,o),
(504,-93,qs),
(504,316,ls),
(504,370,o),
(459,451,o),
(380,496,o),
(327,496,qs),
(228,496,o),
(172,409,q),
(172,488,l),
(99,488,l),
(99,0,l),
(172,0,l),
(172,360,l),
(216,435,o),
(300,435,qs),
(360,435,o),
(431,360,o),
(431,295,qs),
(431,-89,ls),
(431,-123,o),
(399,-153,o),
(361,-153,qs),
(348,-153,o),
(326,-150,o),
(306,-146,q),
(306,-212,l),
(342,-219,o),
(370,-219,qs),
(435,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
20 15 2 3 2 3 1 1 3 2 1 0 1 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 2 4 97 5 1 4 4 23 77 0 3 3 21 77 0 1 1 0 97 6 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 4 23 77 0 2 2 5 97 0 5 5 29 77 0 3 3 21 77 0 1 1 0 97 6 1 0 0 31 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 23 21 19 18 17 16 14 12 7 5 0 29 1 29 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eng;
unicode = 331;
},
{
glyphname = o;
layers = (
{
anchors = (
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(474,57,o),
(537,171,o),
(537,243,qs),
(537,315,o),
(474,430,o),
(367,496,o),
(300,496,qs),
(233,496,o),
(126,430,o),
(63,315,o),
(63,243,qs),
(63,171,o),
(126,57,o),
(233,-10,o),
(300,-10,qs),
(367,-10,o)
);
},
{
closed = 1;
nodes = (
(178,104,o),
(135,189,o),
(135,243,qs),
(135,298,o),
(178,382,o),
(252,431,o),
(300,431,qs),
(348,431,o),
(422,382,o),
(465,298,o),
(465,243,qs),
(465,189,o),
(422,104,o),
(348,55,o),
(300,55,qs),
(252,55,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 97 0 1 1 29 77 5 1 2 2 0 97 4 1 0 0 30 0 78 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
layers = (
{
anchors = (
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
ref = acutecomb;
}
);
width = 600;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = obreve;
layers = (
{
anchors = (
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
ref = uni0306;
}
);
width = 600;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = ocircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
ref = uni0302;
}
);
width = 600;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = odieresis;
layers = (
{
anchors = (
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
ref = uni0308;
}
);
width = 600;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ograve;
layers = (
{
anchors = (
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
ref = gravecomb;
}
);
width = 600;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = ohungarumlaut;
layers = (
{
anchors = (
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
ref = uni030B;
}
);
width = 600;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = omacron;
layers = (
{
anchors = (
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
ref = uni0304;
}
);
width = 600;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,33,l),
(194,13,o),
(262,-10,o),
(300,-10,qs),
(367,-10,o),
(474,57,o),
(537,171,o),
(537,243,qs),
(537,294,o),
(505,382,o),
(476,416,q),
(534,488,l),
(463,488,l),
(435,453,l),
(407,473,o),
(338,496,o),
(300,496,qs),
(233,496,o),
(126,430,o),
(63,315,o),
(63,243,qs),
(63,192,o),
(96,104,o),
(124,70,q),
(67,0,l),
(138,0,l)
);
},
{
closed = 1;
nodes = (
(135,243,qs),
(135,298,o),
(178,382,o),
(252,431,o),
(300,431,qs),
(352,431,o),
(393,401,q),
(169,125,l),
(135,174,o)
);
},
{
closed = 1;
nodes = (
(207,85,q),
(431,361,l),
(465,313,o),
(465,243,qs),
(465,189,o),
(422,104,o),
(348,55,o),
(300,55,qs),
(248,55,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
11 1 4 0 42 41 27 14 1 5 5 4 24 1 2 5 3 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
11 1 4 0 42 41 27 14 1 5 5 4 24 1 3 5 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
11 1 4 1 42 41 27 14 1 5 5 4 24 1 3 5 3 76
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 4 4 0 97 1 1 0 0 29 77 7 1 5 5 2 97 6 3 2 2 2 30 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 4 0 97 1 1 0 0 29 77 6 1 3 3 21 77 7 1 5 5 2 97 0 2 2 30 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 23 77 0 4 4 0 97 0 0 0 29 77 6 1 3 3 21 77 7 1 5 5 2 97 0 2 2 30 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
36 35 0 0 35 43 36 43 30 28 0 25 0 25 39 19 39 8 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = otilde;
layers = (
{
anchors = (
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
ref = tildecomb;
}
);
width = 600;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = oe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,46,o),
(303,93,q),
(326,45,o),
(402,-10,o),
(448,-10,qs),
(518,-10,o),
(578,39,q),
(539,91,l),
(519,73,o),
(471,54,o),
(449,54,qs),
(403,54,o),
(342,152,o),
(338,228,q),
(581,228,l),
(581,250,ls),
(581,363,o),
(501,496,o),
(434,496,qs),
(392,496,o),
(324,443,o),
(302,397,q),
(282,443,o),
(218,496,o),
(179,496,qs),
(134,496,o),
(62,431,o),
(21,317,o),
(21,244,qs),
(21,171,o),
(62,57,o),
(134,-8,o),
(179,-8,qs),
(219,-8,o)
);
},
{
closed = 1;
nodes = (
(513,354,o),
(516,280,q),
(339,280,l),
(345,349,o),
(397,435,o),
(434,435,qs),
(470,435,o)
);
},
{
closed = 1;
nodes = (
(90,161,o),
(90,244,qs),
(90,327,o),
(140,434,o),
(179,434,qs),
(218,434,o),
(268,327,o),
(268,244,qs),
(268,161,o),
(218,54,o),
(179,54,qs),
(140,54,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
11 1 7 6 31 25 2 4 3 26 1 0 4 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 7 0 3 4 7 3 103 9 11 2 6 6 1 97 2 1 1 1 29 77 12 8 2 4 4 0 97 5 10 2 0 0 30 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 7 0 3 4 7 3 103 9 11 2 6 6 1 97 2 1 1 1 29 77 12 8 2 4 4 0 97 5 10 2 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 7 0 3 4 7 3 103 9 11 2 6 6 1 97 2 1 1 1 29 77 12 8 2 4 4 0 97 5 10 2 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
42 41 35 34 1 0 48 46 41 52 42 52 38 37 34 40 35 40 29 27 23 21 19 18 15 13 9 7 0 33 1 33 13 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = oe;
unicode = 339;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,61,l),
(222,-7,o),
(316,-7,qs),
(381,-7,o),
(484,60,o),
(545,174,o),
(545,244,qs),
(545,314,o),
(485,427,o),
(384,494,o),
(320,494,qs),
(219,494,o),
(162,418,q),
(162,488,l),
(90,488,l),
(90,-209,l),
(163,-209,l)
);
},
{
closed = 1;
nodes = (
(187,92,o),
(163,124,q),
(163,363,l),
(211,430,o),
(302,430,qs),
(351,430,o),
(428,381,o),
(473,297,o),
(473,243,qs),
(473,190,o),
(428,105,o),
(351,56,o),
(302,56,qs),
(260,56,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
28 27 15 3 4 4 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 0 97 1 1 0 0 23 77 7 1 4 4 2 97 0 2 2 27 77 6 1 3 3 25 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 0 97 1 1 0 0 23 77 7 1 4 4 2 97 0 2 2 30 77 6 1 3 3 25 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 23 77 0 5 5 1 97 0 1 1 29 77 7 1 4 4 2 97 0 2 2 30 77 6 1 3 3 25 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
18 17 0 0 26 24 17 30 18 30 0 16 0 16 38 34 17 8 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = p;
unicode = 112;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,61,l),
(222,-7,o),
(316,-7,qs),
(381,-7,o),
(484,60,o),
(545,174,o),
(545,244,qs),
(545,314,o),
(485,427,o),
(384,494,o),
(320,494,qs),
(271,494,o),
(191,455,o),
(163,420,q),
(163,737,l),
(90,722,l),
(90,-209,l),
(163,-209,l)
);
},
{
closed = 1;
nodes = (
(428,381,o),
(473,297,o),
(473,243,qs),
(473,190,o),
(428,105,o),
(351,56,o),
(302,56,qs),
(260,56,o),
(187,92,o),
(163,124,q),
(163,363,l),
(211,430,o),
(302,430,qs),
(351,430,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
21 20 16 3 4 4 3 1 76 2 1 2 0 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
6 1 3 3 0 97 0 0 0 29 77 0 4 4 1 97 0 1 1 27 77 5 1 2 2 25 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 3 3 0 97 0 0 0 29 77 0 4 4 1 97 0 1 1 30 77 5 1 2 2 25 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
19 18 0 0 25 23 18 31 19 31 0 17 0 17 38 37 7 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(436,65,q),
(436,-209,l),
(509,-209,l),
(509,488,l),
(436,488,l),
(436,426,l),
(376,494,o),
(284,494,qs),
(220,494,o),
(116,427,o),
(55,314,o),
(55,243,qs),
(55,173,o),
(115,60,o),
(217,-7,o),
(280,-7,qs),
(379,-7,o)
);
},
{
closed = 1;
nodes = (
(172,106,o),
(127,191,o),
(127,244,qs),
(127,298,o),
(172,382,o),
(249,430,o),
(298,430,qs),
(339,430,o),
(412,395,o),
(436,364,q),
(436,122,l),
(413,91,o),
(341,57,o),
(298,57,qs),
(249,57,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
21 20 15 10 4 4 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 1 97 2 1 1 1 29 77 7 1 4 4 0 97 6 1 0 0 27 77 0 3 3 25 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 1 97 2 1 1 1 29 77 7 1 4 4 0 97 6 1 0 0 30 77 0 3 3 25 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 23 77 0 5 5 1 97 0 1 1 29 77 7 1 4 4 0 97 6 1 0 0 30 77 0 3 3 25 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
18 17 1 0 25 23 17 31 18 31 14 13 12 11 9 7 0 16 1 16 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
layers = (
{
anchors = (
{
name = bottom;
pos = (265,0);
},
{
name = top;
pos = (372,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,60,l),
(300,60,l),
(300,324,l),
(322,376,o),
(406,432,o),
(460,432,qs),
(482,432,o),
(527,422,o),
(552,414,q),
(552,481,l),
(527,489,o),
(491,496,o),
(468,496,qs),
(410,496,o),
(322,435,o),
(300,379,q),
(300,488,l),
(93,488,l),
(93,428,l),
(227,428,l),
(227,60,l),
(93,60,l),
(93,0,l),
(442,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */
13 1 1 2 20 14 7 3 0 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
4 1 1 1 2 97 3 1 2 2 23 77 5 1 0 0 6 95 7 1 6 6 21 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
4 1 1 1 3 97 0 3 3 29 77 4 1 1 1 2 95 0 2 2 23 77 5 1 0 0 6 95 7 1 6 6 21 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 23 0 23 19 37 35 17 17 17 8 7 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = r;
unicode = 114;
},
{
glyphname = racute;
layers = (
{
anchors = (
{
name = bottom;
pos = (265,0);
},
{
name = top;
pos = (372,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (72,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = racute;
unicode = 341;
},
{
glyphname = rcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (265,0);
},
{
name = top;
pos = (372,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (72,0);
ref = uni030C;
}
);
width = 600;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = uni0157;
layers = (
{
anchors = (
{
name = bottom;
pos = (265,0);
},
{
name = top;
pos = (372,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (-35,0);
ref = uni0326;
}
);
width = 600;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = s;
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (285,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,30,o),
(502,99,o),
(502,141,qs),
(502,185,o),
(465,236,o),
(404,263,o),
(331,276,o),
(258,285,o),
(197,299,o),
(160,329,o),
(160,357,qs),
(160,392,o),
(228,434,o),
(283,434,qs),
(327,434,o),
(412,411,o),
(453,382,q),
(489,435,l),
(440,469,o),
(341,496,o),
(286,496,qs),
(230,496,o),
(142,459,o),
(93,395,o),
(93,352,qs),
(93,309,o),
(130,258,o),
(190,232,o),
(263,219,o),
(336,211,o),
(396,197,o),
(433,166,o),
(433,137,qs),
(433,100,o),
(354,52,o),
(293,52,qs),
(250,52,o),
(166,79,o),
(119,113,q),
(80,62,l),
(118,25,o),
(230,-10,o),
(295,-10,qs),
(354,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
25 1 3 2 26 4 3 3 1 3 2 76 0 3 3 2 97 0 2 2 29 77 0 1 1 0 97 4 1 0 0 30 0 78 1 0 30 28 23 21 8 6 0 43 1 43 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = s;
unicode = 115;
},
{
glyphname = sacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (285,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (-15,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = scaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (285,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (-15,0);
ref = uni030C;
}
);
width = 600;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = scedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(399,-186,o),
(399,-146,qs),
(399,-111,o),
(346,-68,o),
(302,-66,q),
(315,-9,l),
(369,-5,o),
(454,36,o),
(502,101,o),
(502,141,qs),
(502,185,o),
(465,236,o),
(404,263,o),
(331,276,o),
(258,285,o),
(197,299,o),
(160,329,o),
(160,357,qs),
(160,392,o),
(228,434,o),
(283,434,qs),
(327,434,o),
(412,411,o),
(453,382,q),
(489,435,l),
(440,469,o),
(341,496,o),
(286,496,qs),
(230,496,o),
(142,459,o),
(93,395,o),
(93,352,qs),
(93,309,o),
(130,258,o),
(190,232,o),
(263,219,o),
(336,211,o),
(396,197,o),
(433,166,o),
(433,137,qs),
(433,100,o),
(354,52,o),
(293,52,qs),
(250,52,o),
(166,79,o),
(119,113,q),
(80,62,l),
(115,28,o),
(215,-7,o),
(273,-9,q),
(250,-99,l),
(279,-99,ls),
(313,-99,o),
(350,-125,o),
(350,-148,qs),
(350,-172,o),
(316,-200,o),
(285,-200,qs),
(241,-200,o),
(206,-171,q),
(178,-203,l),
(219,-239,o),
(288,-239,qs),
(337,-239,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
38 1 6 5 39 17 16 3 4 6 3 1 1 2 2 1 0 1 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 0 2 1 7 2 105 0 6 6 5 97 0 5 5 29 77 0 4 4 3 97 0 3 3 30 77 0 1 1 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 0 2 1 7 2 105 0 6 6 5 97 0 5 5 29 77 0 4 4 3 97 0 3 3 27 77 0 1 1 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 7 0 2 1 7 2 105 0 6 6 5 97 0 5 5 29 77 0 4 4 3 97 0 3 3 30 77 0 1 1 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 7 0 2 1 7 2 105 0 1 8 1 0 1 0 101 0 6 6 5 97 0 5 5 29 77 0 4 4 3 97 0 3 3 30 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 59 58 43 41 36 34 21 19 14 13 12 10 6 4 0 63 1 63 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = scircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (285,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (-15,0);
ref = uni0302;
}
);
width = 600;
}
);
note = scircumflex;
unicode = 349;
},
{
glyphname = uni0219;
layers = (
{
anchors = (
{
name = bottom;
pos = (296,0);
},
{
name = top;
pos = (285,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (-4,0);
ref = uni0326;
}
);
width = 600;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(563,73,o),
(563,140,qs),
(563,182,o),
(528,238,o),
(473,276,o),
(412,302,o),
(357,324,o),
(322,351,o),
(322,371,qs),
(322,393,o),
(354,425,o),
(401,454,o),
(448,489,o),
(480,539,o),
(480,576,qs),
(480,622,o),
(432,695,o),
(345,737,o),
(286,737,qs),
(185,737,o),
(72,608,o),
(72,501,qs),
(72,0,l),
(145,0,l),
(145,502,ls),
(145,581,o),
(218,673,o),
(287,673,qs),
(341,673,o),
(411,619,o),
(411,578,qs),
(411,549,o),
(379,512,o),
(333,483,o),
(286,451,o),
(254,406,o),
(254,371,qs),
(254,333,o),
(289,287,o),
(343,259,o),
(405,238,o),
(459,212,o),
(494,172,o),
(494,138,qs),
(494,97,o),
(436,47,o),
(389,47,qs),
(318,47,o),
(264,98,q),
(223,50,l),
(291,-11,o),
(390,-11,qs),
(467,-11,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
3 2 2 1 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 4 97 0 4 4 22 77 0 1 1 0 97 3 5 2 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 2 2 4 97 0 4 4 22 77 0 3 3 21 77 0 1 1 0 97 5 1 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 34 32 29 28 25 23 6 4 0 52 1 52 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = t;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,3,o),
(509,15,q),
(509,81,l),
(472,67,o),
(410,55,o),
(381,55,qs),
(334,55,o),
(284,95,o),
(284,141,qs),
(284,428,l),
(509,428,l),
(509,488,l),
(284,488,l),
(284,639,l),
(211,622,l),
(211,488,l),
(44,488,l),
(44,428,l),
(211,428,l),
(211,129,ls),
(211,61,o),
(298,-10,o),
(380,-10,qs),
(412,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
20 1 5 1 21 1 0 5 2 76 9 8 2 2 74 4 1 1 1 2 95 3 1 2 2 23 77 0 5 5 0 97 6 1 0 0 30 0 78 1 0 18 16 13 12 11 10 7 6 5 4 0 23 1 23 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = t;
unicode = 116;
},
{
glyphname = tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,3,o),
(509,15,q),
(509,81,l),
(472,67,o),
(410,55,o),
(381,55,qs),
(334,55,o),
(284,95,o),
(284,141,qs),
(284,251,l),
(509,251,l),
(509,305,l),
(284,305,l),
(284,428,l),
(509,428,l),
(509,488,l),
(284,488,l),
(284,639,l),
(211,622,l),
(211,488,l),
(44,488,l),
(44,428,l),
(211,428,l),
(211,305,l),
(44,305,l),
(44,251,l),
(211,251,l),
(211,129,ls),
(211,61,o),
(298,-10,o),
(380,-10,qs),
(412,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
28 1 9 1 29 1 0 9 2 76 13 12 2 4 74 7 1 2 8 1 1 9 2 1 103 6 1 3 3 4 95 5 1 4 4 23 77 0 9 9 0 97 10 1 0 0 30 0 78 1 0 26 24 21 20 19 18 17 16 15 14 11 10 9 8 7 6 5 4 0 31 1 31 11 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = tbar;
unicode = 359;
},
{
glyphname = tcaron;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,787,l),
(372,772,l),
(367,577,l),
(423,577,l)
);
},
{
closed = 1;
nodes = (
(476,3,o),
(509,15,q),
(509,81,l),
(472,67,o),
(410,55,o),
(381,55,qs),
(334,55,o),
(284,95,o),
(284,141,qs),
(284,428,l),
(509,428,l),
(509,488,l),
(284,488,l),
(284,639,l),
(211,622,l),
(211,488,l),
(44,488,l),
(44,428,l),
(211,428,l),
(211,129,ls),
(211,61,o),
(298,-10,o),
(380,-10,qs),
(412,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
24 1 6 2 25 1 1 6 2 76 13 12 2 1 4 0 74 7 1 0 3 0 133 5 1 2 2 3 95 4 1 3 3 23 77 0 6 6 1 97 8 1 1 1 30 1 78 5 4 0 0 22 20 17 16 15 14 11 10 9 8 4 27 5 27 0 3 0 3 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = uni0163;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(476,3,o),
(509,15,q),
(509,81,l),
(472,67,o),
(410,55,o),
(381,55,qs),
(334,55,o),
(284,95,o),
(284,141,qs),
(284,428,l),
(509,428,l),
(509,488,l),
(284,488,l),
(284,639,l),
(211,622,l),
(211,488,l),
(44,488,l),
(44,428,l),
(211,428,l),
(211,129,ls),
(211,24,o),
(311,-2,q),
(287,-99,l),
(316,-99,ls),
(350,-99,o),
(387,-125,o),
(387,-148,qs),
(387,-172,o),
(353,-200,o),
(322,-200,qs),
(278,-200,o),
(243,-171,q),
(215,-203,l),
(256,-239,o),
(325,-239,qs),
(374,-239,o),
(436,-186,o),
(436,-146,qs),
(436,-111,o),
(383,-68,o),
(339,-66,q),
(352,-9,l),
(359,-10,o),
(373,-10,o),
(380,-10,qs),
(412,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
42 1 9 5 43 23 2 0 9 13 1 3 4 12 1 2 3 4 76 31 30 2 6 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 1 0 4 3 1 4 105 8 1 5 5 6 95 7 1 6 6 23 77 0 9 9 0 97 10 1 0 0 30 77 0 3 3 2 97 0 2 2 31 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 1 0 4 3 1 4 105 0 3 0 2 3 2 101 8 1 5 5 6 95 7 1 6 6 23 77 0 9 9 0 97 10 1 0 0 30 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
2 0 40 38 35 34 33 32 29 28 27 26 22 20 16 14 11 9 5 4 0 45 2 45 11 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = uni021B;
layers = (
{
anchors = (
{
name = bottom;
pos = (333,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (33,0);
ref = uni0326;
}
);
width = 600;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = u;
layers = (
{
anchors = (
{
name = bottom;
pos = (501,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(428,79,q),
(428,0,l),
(501,0,l),
(501,488,l),
(428,488,l),
(428,127,l),
(383,53,o),
(300,53,qs),
(240,53,o),
(170,129,o),
(170,194,qs),
(170,488,l),
(96,488,l),
(96,173,ls),
(96,120,o),
(141,38,o),
(221,-8,o),
(273,-8,qs),
(373,-8,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
17 12 2 2 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 23 77 0 2 2 0 97 4 5 2 0 0 30 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 23 77 0 2 2 0 97 4 5 2 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 23 77 0 2 2 0 97 4 5 2 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 23 77 0 4 4 21 77 0 2 2 0 97 5 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 16 15 14 13 11 9 6 5 0 18 1 18 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
layers = (
{
anchors = (
{
name = bottom;
pos = (501,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
ref = acutecomb;
}
);
width = 600;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ubreve;
layers = (
{
anchors = (
{
name = bottom;
pos = (501,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
ref = uni0306;
}
);
width = 600;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = ucircumflex;
layers = (
{
anchors = (
{
name = bottom;
pos = (501,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
ref = uni0302;
}
);
width = 600;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
layers = (
{
anchors = (
{
name = bottom;
pos = (501,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
ref = uni0308;
}
);
width = 600;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ugrave;
layers = (
{
anchors = (
{
name = bottom;
pos = (501,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
ref = gravecomb;
}
);
width = 600;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uhungarumlaut;
layers = (
{
anchors = (
{
name = bottom;
pos = (501,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
ref = uni030B;
}
);
width = 600;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = umacron;
layers = (
{
anchors = (
{
name = bottom;
pos = (501,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
ref = uni0304;
}
);
width = 600;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(428,79,q),
(428,0,l),
(446,0,l),
(394,-37,o),
(347,-103,o),
(347,-140,qs),
(347,-181,o),
(405,-231,o),
(453,-231,qs),
(496,-231,o),
(526,-212,q),
(512,-173,l),
(503,-179,o),
(477,-185,o),
(464,-185,qs),
(433,-185,o),
(397,-155,o),
(397,-128,qs),
(397,-97,o),
(447,-35,o),
(501,0,q),
(501,488,l),
(428,488,l),
(428,127,l),
(383,53,o),
(300,53,qs),
(240,53,o),
(170,129,o),
(170,194,qs),
(170,488,l),
(96,488,l),
(96,173,ls),
(96,120,o),
(141,38,o),
(221,-8,o),
(273,-8,qs),
(373,-8,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
35 12 2 2 1 15 1 0 2 24 1 4 0 25 1 5 4 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
35 12 2 2 1 24 1 4 0 25 1 5 4 3 76 15 1 6 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 1 23 77 0 2 2 0 97 6 7 2 0 0 30 77 0 4 4 5 97 0 5 5 31 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 1 23 77 0 2 2 0 97 6 7 2 0 0 27 77 0 4 4 5 97 0 5 5 31 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
3 1 1 1 23 77 0 2 2 0 97 6 7 2 0 0 30 77 0 4 4 5 97 0 5 5 31 5 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 23 77 0 6 6 21 77 0 2 2 0 97 7 1 0 0 30 77 0 4 4 5 97 0 5 5 31 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 4 0 5 4 5 101 3 1 1 1 23 77 0 6 6 21 77 0 2 2 0 97 7 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 34 33 28 26 22 20 14 13 11 9 6 5 0 36 1 36 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = uring;
layers = (
{
anchors = (
{
name = bottom;
pos = (501,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
ref = uni030A;
}
);
width = 600;
}
);
note = uring;
unicode = 367;
},
{
glyphname = utilde;
layers = (
{
anchors = (
{
name = bottom;
pos = (501,0);
},
{
name = top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
ref = tildecomb;
}
);
width = 600;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(545,488,l),
(467,488,l),
(302,83,l),
(134,488,l),
(55,488,l),
(265,0,l),
(335,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
3 1 2 0 1 76 1 1 0 0 23 77 3 1 2 2 21 2 78 0 0 0 6 0 6 18 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
layers = (
{
anchors = (
{
name = top;
pos = (302,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,393,l),
(399,0,l),
(465,0,l),
(562,488,l),
(502,488,l),
(434,101,l),
(335,488,l),
(270,488,l),
(172,101,l),
(103,488,l),
(38,488,l),
(135,0,l),
(203,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 23 77 5 4 2 3 3 21 3 78 0 0 0 12 0 12 17 18 18 17 6 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = w;
unicode = 119;
},
{
glyphname = wacute;
layers = (
{
anchors = (
{
name = top;
pos = (302,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (2,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = wcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (302,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (2,0);
ref = uni0302;
}
);
width = 600;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = wdieresis;
layers = (
{
anchors = (
{
name = top;
pos = (302,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (2,0);
ref = uni0308;
}
);
width = 600;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = wgrave;
layers = (
{
anchors = (
{
name = top;
pos = (302,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (2,0);
ref = gravecomb;
}
);
width = 600;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(297,201,l),
(455,0,l),
(542,0,l),
(344,253,l),
(533,488,l),
(450,488,l),
(301,301,l),
(154,488,l),
(67,488,l),
(255,251,l),
(58,0,l),
(141,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 7 4 1 4 2 0 1 76 1 1 0 0 23 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 18 18 18 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
layers = (
{
anchors = (
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(257,-170,o),
(282,-111,qs),
(539,488,l),
(460,488,l),
(294,84,l),
(134,488,l),
(54,488,l),
(252,-3,l),
(215,-89,ls),
(201,-123,o),
(155,-151,o),
(121,-151,qs),
(99,-151,o),
(61,-142,q),
(61,-211,l),
(78,-215,o),
(113,-219,o),
(129,-219,qs),
(188,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
13 10 4 3 1 2 3 1 0 1 2 76 3 1 2 2 23 77 0 1 1 0 97 4 1 0 0 31 0 78 1 0 15 14 12 11 7 5 0 18 1 18 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
layers = (
{
anchors = (
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (-4,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ycircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (-4,0);
ref = uni0302;
}
);
width = 600;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = ydieresis;
layers = (
{
anchors = (
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (-4,0);
ref = uni0308;
}
);
width = 600;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = ygrave;
layers = (
{
anchors = (
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (-4,0);
ref = gravecomb;
}
);
width = 600;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = z;
layers = (
{
anchors = (
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,66,l),
(182,65,l),
(499,431,l),
(499,488,l),
(92,488,l),
(92,421,l),
(404,422,l),
(89,58,l),
(89,0,l),
(503,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
6 1 0 1 1 1 3 2 2 76 0 0 0 1 95 0 1 1 23 77 0 2 2 3 95 4 1 3 3 21 3 78 0 0 0 9 0 9 18 17 18 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = z;
unicode = 122;
},
{
glyphname = zacute;
layers = (
{
anchors = (
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (-7,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = zcaron;
layers = (
{
anchors = (
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (-7,0);
ref = uni030C;
}
);
width = 600;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = zdotaccent;
layers = (
{
anchors = (
{
name = top;
pos = (293,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (-7,0);
ref = uni0307;
}
);
width = 600;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = g.alt;
layers = (
{
anchors = (
{
name = top;
pos = (291,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(542,-137,o),
(542,-68,qs),
(542,-21,o),
(476,30,o),
(414,34,qs),
(233,44,ls),
(174,47,o),
(174,84,qs),
(174,104,o),
(204,134,o),
(229,141,q),
(259,132,o),
(291,132,qs),
(347,132,o),
(437,181,o),
(490,264,o),
(490,314,qs),
(490,374,o),
(454,419,q),
(473,459,o),
(518,459,qs),
(532,459,o),
(554,457,o),
(563,454,q),
(563,525,l),
(557,526,o),
(544,527,o),
(538,527,qs),
(498,527,o),
(444,479,o),
(437,438,q),
(410,465,o),
(335,496,o),
(291,496,qs),
(236,496,o),
(145,447,o),
(92,365,o),
(92,314,qs),
(92,262,o),
(149,177,o),
(195,154,q),
(156,144,o),
(108,96,o),
(108,67,qs),
(108,11,o),
(169,-11,q),
(61,-43,o),
(61,-101,qs),
(61,-157,o),
(177,-219,o),
(282,-219,qs),
(402,-219,o)
);
},
{
closed = 1;
nodes = (
(197,221,o),
(163,279,o),
(163,314,qs),
(163,350,o),
(197,407,o),
(255,440,o),
(291,440,qs),
(327,440,o),
(385,407,o),
(419,350,o),
(419,314,qs),
(419,279,o),
(385,221,o),
(327,188,o),
(291,188,qs),
(255,188,o)
);
},
{
closed = 1;
nodes = (
(131,-125,o),
(131,-89,qs),
(131,-67,o),
(171,-31,o),
(206,-20,q),
(218,-23,o),
(232,-23,qs),
(406,-32,ls),
(469,-35,o),
(469,-79,qs),
(469,-119,o),
(365,-166,o),
(276,-166,qs),
(208,-166,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 103 values pushed */
27 1 7 3 32 20 2 6 7 40 10 2 4 6 5 1 9 5 4 76 0 2 0 3 7 2 3 105 11 1 6 0 4 5 6 4 105 0 5 0 9 8 5 9 103 0 7 7 1 97 0 1 1 29 77 12 1 8 8 0 97 10 1 0 0 31 0 78 69 68 53 52 1 0 75 72 68 81 69 81 61 59 52 67 53 67 47 44 39 37 31 29 25 22 18 16 0 51 1 51 13 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = g.alt;
},
{
glyphname = gbreve.alt;
layers = (
{
anchors = (
{
name = top;
pos = (291,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g.alt;
},
{
alignment = -1;
pos = (-9,0);
ref = uni0306;
}
);
width = 600;
}
);
note = gbreve.alt;
},
{
glyphname = gcircumflex.alt;
layers = (
{
anchors = (
{
name = top;
pos = (291,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g.alt;
},
{
alignment = -1;
pos = (-9,0);
ref = uni0302;
}
);
width = 600;
}
);
note = gcircumflex.alt;
},
{
glyphname = uni0123.alt;
layers = (
{
anchors = (
{
name = top;
pos = (291,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(245,611,l),
(318,611,l),
(367,798,l),
(314,798,l)
);
},
{
closed = 1;
nodes = (
(542,-137,o),
(542,-68,qs),
(542,-21,o),
(476,30,o),
(414,34,qs),
(233,44,ls),
(174,47,o),
(174,84,qs),
(174,104,o),
(204,134,o),
(229,141,q),
(259,132,o),
(291,132,qs),
(347,132,o),
(437,181,o),
(490,264,o),
(490,314,qs),
(490,374,o),
(454,419,q),
(473,459,o),
(518,459,qs),
(532,459,o),
(554,457,o),
(563,454,q),
(563,525,l),
(557,526,o),
(544,527,o),
(538,527,qs),
(498,527,o),
(444,479,o),
(437,438,q),
(410,465,o),
(335,496,o),
(291,496,qs),
(236,496,o),
(145,447,o),
(92,365,o),
(92,314,qs),
(92,262,o),
(149,177,o),
(195,154,q),
(156,144,o),
(108,96,o),
(108,67,qs),
(108,11,o),
(169,-11,q),
(61,-43,o),
(61,-101,qs),
(61,-157,o),
(177,-219,o),
(282,-219,qs),
(402,-219,o)
);
},
{
closed = 1;
nodes = (
(197,221,o),
(163,279,o),
(163,314,qs),
(163,350,o),
(197,407,o),
(255,440,o),
(291,440,qs),
(327,440,o),
(385,407,o),
(419,350,o),
(419,314,qs),
(419,279,o),
(385,221,o),
(327,188,o),
(291,188,qs),
(255,188,o)
);
},
{
closed = 1;
nodes = (
(131,-125,o),
(131,-89,qs),
(131,-67,o),
(171,-31,o),
(206,-20,q),
(218,-23,o),
(232,-23,qs),
(406,-32,ls),
(469,-35,o),
(469,-79,qs),
(469,-119,o),
(365,-166,o),
(276,-166,qs),
(208,-166,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 119 values pushed */
31 1 9 5 36 24 2 8 9 44 14 2 6 8 9 1 11 7 4 76 12 1 1 0 0 4 1 0 103 0 4 0 5 9 4 5 105 14 1 8 0 6 7 8 6 105 0 7 0 11 10 7 11 103 0 9 9 3 97 0 3 3 29 77 15 1 10 10 2 97 13 1 2 2 31 2 78 73 72 57 56 5 4 0 0 79 76 72 85 73 85 65 63 56 71 57 71 51 48 43 41 35 33 29 26 22 20 4 55 5 55 0 3 0 3 17 16 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni0123.alt;
},
{
glyphname = gdotaccent.alt;
layers = (
{
anchors = (
{
name = top;
pos = (291,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g.alt;
},
{
alignment = -1;
pos = (-9,0);
ref = uni0307;
}
);
width = 600;
}
);
note = gdotaccent.alt;
},
{
glyphname = a.school;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(436,65,q),
(436,0,l),
(509,0,l),
(509,488,l),
(436,488,l),
(436,426,l),
(376,494,o),
(284,494,qs),
(220,494,o),
(116,427,o),
(55,314,o),
(55,243,qs),
(55,173,o),
(115,60,o),
(217,-7,o),
(280,-7,qs),
(379,-7,o)
);
},
{
closed = 1;
nodes = (
(172,106,o),
(127,191,o),
(127,244,qs),
(127,298,o),
(172,382,o),
(249,430,o),
(298,430,qs),
(339,430,o),
(412,395,o),
(436,364,q),
(436,122,l),
(413,91,o),
(341,57,o),
(298,57,qs),
(249,57,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
21 20 15 10 4 4 5 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 29 77 7 1 4 4 0 97 3 6 2 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 29 77 7 1 4 4 0 97 3 6 2 0 0 30 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 1 97 2 1 1 1 29 77 0 3 3 21 77 7 1 4 4 0 97 6 1 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 23 77 0 5 5 1 97 0 1 1 29 77 0 3 3 21 77 7 1 4 4 0 97 6 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
18 17 1 0 25 23 17 31 18 31 14 13 12 11 9 7 0 16 1 16 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = a.school;
},
{
glyphname = aacute.school;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-4,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = aacute.school;
},
{
glyphname = abreve.school;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-4,0);
ref = uni0306;
}
);
width = 600;
}
);
note = abreve.school;
},
{
glyphname = acircumflex.school;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-4,0);
ref = uni0302;
}
);
width = 600;
}
);
note = acircumflex.school;
},
{
glyphname = adieresis.school;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-4,0);
ref = uni0308;
}
);
width = 600;
}
);
note = adieresis.school;
},
{
glyphname = agrave.school;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-4,0);
ref = gravecomb;
}
);
width = 600;
}
);
note = agrave.school;
},
{
glyphname = amacron.school;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-4,0);
ref = uni0304;
}
);
width = 600;
}
);
note = amacron.school;
},
{
glyphname = aogonek.school;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(436,65,q),
(436,0,l),
(454,0,l),
(402,-37,o),
(355,-103,o),
(355,-140,qs),
(355,-181,o),
(413,-231,o),
(461,-231,qs),
(504,-231,o),
(534,-212,q),
(520,-173,l),
(511,-179,o),
(485,-185,o),
(472,-185,qs),
(441,-185,o),
(405,-155,o),
(405,-128,qs),
(405,-97,o),
(455,-35,o),
(509,0,q),
(509,488,l),
(436,488,l),
(436,426,l),
(376,494,o),
(284,494,qs),
(220,494,o),
(116,427,o),
(55,314,o),
(55,243,qs),
(55,173,o),
(115,60,o),
(217,-7,o),
(280,-7,qs),
(379,-7,o)
);
},
{
closed = 1;
nodes = (
(172,106,o),
(127,191,o),
(127,244,qs),
(127,298,o),
(172,382,o),
(249,430,o),
(298,430,qs),
(339,430,o),
(412,395,o),
(436,364,q),
(436,122,l),
(413,91,o),
(341,57,o),
(298,57,qs),
(249,57,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
39 38 33 10 4 6 7 13 1 0 6 22 1 3 0 23 1 4 3 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
39 38 33 10 4 6 7 22 1 3 0 23 1 4 3 3 76 13 1 5 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 7 7 1 97 2 1 1 1 29 77 9 1 6 6 0 97 5 8 2 0 0 27 77 0 3 3 4 97 0 4 4 31 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 7 7 1 97 2 1 1 1 29 77 9 1 6 6 0 97 5 8 2 0 0 30 77 0 3 3 4 97 0 4 4 31 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 7 7 1 97 2 1 1 1 29 77 0 5 5 21 77 9 1 6 6 0 97 8 1 0 0 30 77 0 3 3 4 97 0 4 4 31 4 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
0 2 2 23 77 0 7 7 1 97 0 1 1 29 77 0 5 5 21 77 9 1 6 6 0 97 8 1 0 0 30 77 0 3 3 4 97 0 4 4 31 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 3 0 4 3 4 101 0 2 2 23 77 0 7 7 1 97 0 1 1 29 77 0 5 5 21 77 9 1 6 6 0 97 8 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
36 35 1 0 43 41 35 49 36 49 32 31 26 24 20 18 12 11 9 7 0 34 1 34 10 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = aogonek.school;
},
{
glyphname = aring.school;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-4,0);
ref = uni030A;
}
);
width = 600;
}
);
note = aring.school;
},
{
glyphname = atilde.school;
layers = (
{
anchors = (
{
name = bottom;
pos = (509,0);
},
{
name = top;
pos = (296,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-4,0);
ref = tildecomb;
}
);
width = 600;
}
);
note = atilde.school;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(381,366,q),
(381,326,l),
(442,326,l),
(442,578,ls),
(442,642,o),
(364,711,o),
(291,711,qs),
(257,711,o),
(185,693,o),
(143,673,q),
(166,626,l),
(233,658,o),
(284,658,qs),
(381,658,o),
(381,571,qs),
(381,522,l),
(331,548,o),
(274,548,qs),
(204,548,o),
(121,486,o),
(121,433,qs),
(121,383,o),
(199,319,o),
(261,319,qs),
(330,319,o)
);
},
{
closed = 1;
nodes = (
(181,404,o),
(181,435,qs),
(181,467,o),
(233,504,o),
(276,504,qs),
(338,504,o),
(381,477,q),
(381,406,l),
(338,367,o),
(273,367,qs),
(232,367,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
14 1 2 3 13 1 1 2 8 1 6 1 28 27 2 5 6 23 1 0 5 5 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
14 1 2 3 13 1 1 2 8 1 6 1 28 27 2 5 6 23 1 4 5 5 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 6 5 1 6 105 8 1 5 4 7 2 0 5 0 101 0 2 2 3 97 0 3 3 46 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 0 5 4 0 128 0 1 0 6 5 1 6 105 8 1 5 7 1 0 5 0 101 0 2 2 3 97 0 3 3 46 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
26 25 1 0 31 29 25 35 26 35 22 21 18 16 12 10 7 5 0 24 1 24 9 9 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,369,o),
(494,459,o),
(494,514,qs),
(494,570,o),
(442,659,o),
(354,711,o),
(300,711,qs),
(246,711,o),
(158,659,o),
(106,570,o),
(106,514,qs),
(106,459,o),
(158,369,o),
(246,317,o),
(300,317,qs),
(354,317,o)
);
},
{
closed = 1;
nodes = (
(203,410,o),
(168,474,o),
(168,514,qs),
(168,554,o),
(203,618,o),
(263,656,o),
(300,656,qs),
(337,656,o),
(397,618,o),
(432,554,o),
(432,514,qs),
(432,474,o),
(397,410,o),
(337,372,o),
(300,372,qs),
(263,372,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 2 4 1 0 2 0 101 0 3 3 1 97 0 1 1 46 3 78 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 9 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 600;
}
);
note = space;
unicode = 32;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = uni2002;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni2002;
unicode = 8194;
},
{
glyphname = uni2003;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni2003;
unicode = 8195;
},
{
glyphname = uni2009;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni2009;
unicode = 8201;
},
{
glyphname = uni200A;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni200A;
unicode = 8202;
},
{
glyphname = uni200B;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uni200B;
unicode = 8203;
},
{
glyphname = uniFEFF;
layers = (
{
layerId = m01;
width = 0;
}
);
note = uniFEFF;
unicode = 65279;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 600;
}
);
note = CR;
unicode = 13;
},
{
glyphname = NULL;
layers = (
{
layerId = m01;
width = 600;
}
);
note = NULL;
},
{
glyphname = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,29,o),
(365,56,qs),
(365,83,o),
(328,121,o),
(300,121,qs),
(272,121,o),
(235,83,o),
(235,56,qs),
(235,29,o),
(272,-9,o),
(300,-9,qs),
(328,-9,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 1 1 0 97 2 1 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
0 1 1 0 97 2 1 0 0 30 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(355,74,l),
(262,74,l),
(207,-157,l),
(264,-157,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = period;
},
{
alignment = -1;
pos = (0,397);
ref = period;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHW[ ]	/* 1 value pushed */
397
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (8,397);
ref = period;
},
{
alignment = -1;
pos = (-7,0);
ref = comma;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
397
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = ellipsis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(160,29,o),
(160,56,qs),
(160,83,o),
(123,121,o),
(95,121,qs),
(67,121,o),
(30,83,o),
(30,56,qs),
(30,29,o),
(67,-9,o),
(95,-9,qs),
(123,-9,o)
);
},
{
closed = 1;
nodes = (
(365,29,o),
(365,56,qs),
(365,83,o),
(328,121,o),
(300,121,qs),
(272,121,o),
(235,83,o),
(235,56,qs),
(235,29,o),
(272,-9,o),
(300,-9,qs),
(328,-9,o)
);
},
{
closed = 1;
nodes = (
(570,29,o),
(570,56,qs),
(570,83,o),
(533,121,o),
(505,121,qs),
(477,121,o),
(440,83,o),
(440,56,qs),
(440,29,o),
(477,-9,o),
(505,-9,qs),
(533,-9,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
5 3 2 1 1 0 97 8 4 7 2 6 5 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
5 3 2 1 1 0 97 8 4 7 2 6 5 0 0 30 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
25 24 13 12 1 0 31 29 24 35 25 35 19 17 12 23 13 23 7 5 0 11 1 11 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,727,l),
(262,727,l),
(271,215,l),
(328,215,l)
);
},
{
closed = 1;
nodes = (
(365,29,o),
(365,56,qs),
(365,83,o),
(328,121,o),
(300,121,qs),
(272,121,o),
(235,83,o),
(235,56,qs),
(235,29,o),
(272,-9,o),
(300,-9,qs),
(328,-9,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 1 1 0 95 0 0 0 22 77 0 3 3 2 97 5 1 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
4 1 1 1 0 95 0 0 0 22 77 0 3 3 2 97 5 1 2 2 30 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
5 4 0 0 11 9 4 15 5 15 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,463,o),
(235,436,qs),
(235,409,o),
(272,371,o),
(300,371,qs),
(328,371,o),
(365,409,o),
(365,436,qs),
(365,463,o),
(328,501,o),
(300,501,qs),
(272,501,o)
);
},
{
closed = 1;
nodes = (
(263,-235,l),
(338,-235,l),
(329,277,l),
(272,277,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 3 0 2 3 2 99 0 1 1 0 97 4 1 0 0 29 1 78 12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(300,254,o),
(325,307,o),
(371,348,o),
(426,385,o),
(476,429,o),
(508,491,o),
(508,535,qs),
(508,586,o),
(454,665,o),
(362,711,o),
(303,711,qs),
(237,711,o),
(124,650,o),
(83,593,q),
(139,555,l),
(205,645,o),
(300,645,qs),
(339,645,o),
(401,616,o),
(437,566,o),
(437,534,qs),
(437,498,o),
(407,450,o),
(360,414,o),
(308,379,o),
(263,333,o),
(238,266,o),
(242,215,q),
(305,215,l)
);
},
{
closed = 1;
nodes = (
(339,29,o),
(339,56,qs),
(339,83,o),
(302,121,o),
(274,121,qs),
(246,121,o),
(209,83,o),
(209,56,qs),
(209,29,o),
(246,-9,o),
(274,-9,qs),
(302,-9,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
14 13 2 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
5 1 2 0 4 0 2 4 128 0 0 0 1 97 0 1 1 26 77 0 4 4 3 97 6 1 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
5 1 2 0 4 0 2 4 128 0 0 0 1 97 0 1 1 26 77 0 4 4 3 97 6 1 3 3 30 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
30 29 0 0 36 34 29 40 30 40 0 28 0 28 36 42 7 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,463,o),
(261,436,qs),
(261,409,o),
(298,371,o),
(326,371,qs),
(354,371,o),
(391,409,o),
(391,436,qs),
(391,463,o),
(354,501,o),
(326,501,qs),
(298,501,o)
);
},
{
closed = 1;
nodes = (
(300,238,o),
(275,185,o),
(229,144,o),
(174,107,o),
(124,63,o),
(92,2,o),
(92,-43,qs),
(92,-93,o),
(146,-173,o),
(239,-219,o),
(297,-219,qs),
(363,-219,o),
(477,-158,o),
(517,-101,q),
(461,-63,l),
(395,-153,o),
(300,-153,qs),
(262,-153,o),
(199,-124,o),
(163,-73,o),
(163,-42,qs),
(163,-6,o),
(193,42,o),
(240,78,o),
(292,113,o),
(337,159,o),
(362,227,o),
(358,277,q),
(295,277,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
26 25 2 2 4 1 76 6 1 4 1 2 1 4 2 128 0 1 1 0 97 5 1 0 0 29 77 0 2 2 3 98 0 3 3 31 3 78 12 12 1 0 12 40 12 40 30 28 24 22 7 5 0 11 1 11 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,266,o),
(365,293,qs),
(365,320,o),
(328,358,o),
(300,358,qs),
(272,358,o),
(235,320,o),
(235,293,qs),
(235,266,o),
(272,228,o),
(300,228,qs),
(328,228,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(400,310,o),
(400,353,qs),
(400,396,o),
(341,454,o),
(300,454,qs),
(260,454,o),
(200,396,o),
(200,353,qs),
(200,310,o),
(260,252,o),
(300,252,qs),
(341,252,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,454,l),
(460,356,l),
(490,401,l),
(346,499,l),
(486,596,l),
(456,640,l),
(324,545,l),
(325,700,l),
(273,700,l),
(274,544,l),
(142,640,l),
(114,596,l),
(253,499,l),
(110,401,l),
(139,356,l),
(275,454,l),
(273,291,l),
(325,291,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
16 15 14 13 12 11 10 7 6 5 4 3 2 1 14 1 0 1 76 2 1 1 1 0 95 0 0 0 20 1 78 0 0 0 17 0 17 24 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(182,219,l),
(329,219,l),
(254,0,l),
(320,0,l),
(395,219,l),
(533,219,l),
(533,277,l),
(415,277,l),
(465,423,l),
(581,423,l),
(581,481,l),
(485,481,l),
(560,700,l),
(494,700,l),
(419,481,l),
(272,481,l),
(347,700,l),
(281,700,l),
(206,481,l),
(67,481,l),
(67,423,l),
(186,423,l),
(136,277,l),
(19,277,l),
(19,219,l),
(116,219,l),
(41,0,l),
(107,0,l)
);
},
{
closed = 1;
nodes = (
(399,423,l),
(349,277,l),
(202,277,l),
(252,423,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
14 9 2 1 12 10 2 0 11 1 0 103 6 1 4 4 20 77 15 8 2 2 2 3 95 7 5 2 3 3 23 77 16 13 2 11 11 21 11 78 0 0 31 30 29 28 0 27 0 27 26 25 24 23 22 21 20 19 17 17 17 17 17 17 17 17 17 17 7 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,700,l),
(439,700,l),
(39,-209,l),
(111,-209,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 20 77 2 1 1 1 25 1 78 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(163,700,l),
(87,700,l),
(487,-209,l),
(563,-209,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 20 77 2 1 1 1 25 1 78 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = exclamdown.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(235,671,o),
(235,644,qs),
(235,617,o),
(272,579,o),
(300,579,qs),
(328,579,o),
(365,617,o),
(365,644,qs),
(365,671,o),
(328,709,o),
(300,709,qs),
(272,709,o)
);
},
{
closed = 1;
nodes = (
(263,-27,l),
(338,-27,l),
(329,485,l),
(272,485,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 1 1 0 97 4 1 0 0 26 77 0 2 2 3 95 5 1 3 3 23 2 78 12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = exclamdown.case;
},
{
glyphname = questiondown.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,671,o),
(261,644,qs),
(261,617,o),
(298,579,o),
(326,579,qs),
(354,579,o),
(391,617,o),
(391,644,qs),
(391,671,o),
(354,709,o),
(326,709,qs),
(298,709,o)
);
},
{
closed = 1;
nodes = (
(300,446,o),
(275,393,o),
(229,352,o),
(174,315,o),
(124,271,o),
(92,210,o),
(92,165,qs),
(92,115,o),
(146,35,o),
(239,-11,o),
(297,-11,qs),
(363,-11,o),
(477,50,o),
(517,107,q),
(461,145,l),
(395,55,o),
(300,55,qs),
(262,55,o),
(199,84,o),
(163,135,o),
(163,166,qs),
(163,202,o),
(193,250,o),
(240,286,o),
(292,321,o),
(337,367,o),
(362,435,o),
(358,485,q),
(295,485,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
26 25 2 2 4 1 76 0 1 1 0 97 5 1 0 0 26 77 6 1 4 4 23 77 0 2 2 3 98 0 3 3 27 3 78 12 12 1 0 12 40 12 40 30 28 24 22 7 5 0 11 1 11 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = questiondown.case;
},
{
glyphname = periodcentered.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,65);
ref = periodcentered;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHB[ ]	/* 1 value pushed */
65
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = periodcentered.case;
},
{
glyphname = periodcentered.loclCAT;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,434,o),
(365,461,qs),
(365,488,o),
(328,526,o),
(300,526,qs),
(272,526,o),
(235,488,o),
(235,461,qs),
(235,434,o),
(272,396,o),
(300,396,qs),
(328,396,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 11 1 11 3 6 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = periodcentered.loclCAT;
},
{
glyphname = periodcentered.loclCAT.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(365,434,o),
(365,461,qs),
(365,488,o),
(328,526,o),
(300,526,qs),
(272,526,o),
(235,488,o),
(235,461,qs),
(235,434,o),
(272,396,o),
(300,396,qs),
(328,396,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = periodcentered.loclCAT.case;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,310,l),
(134,310,l),
(134,250,l),
(466,250,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,310,l),
(86,310,l),
(86,250,l),
(514,250,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(585,310,l),
(15,310,l),
(15,250,l),
(585,250,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = uni2015;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(600,310,l),
(0,310,l),
(0,250,l),
(600,250,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2015;
unicode = 8213;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(530,-80,l),
(70,-80,l),
(70,-137,l),
(530,-137,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = hyphen.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,68);
ref = hyphen;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHB[ ]	/* 1 value pushed */
68
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = hyphen.case;
},
{
glyphname = endash.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,68);
ref = endash;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHB[ ]	/* 1 value pushed */
68
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = endash.case;
},
{
glyphname = emdash.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,68);
ref = emdash;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHB[ ]	/* 1 value pushed */
68
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = emdash.case;
},
{
glyphname = uni2015.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,68);
ref = uni2015;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHB[ ]	/* 1 value pushed */
68
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2015.case;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(361,-108,o),
(233,105,o),
(233,246,qs),
(233,387,o),
(361,600,o),
(482,657,q),
(451,714,l),
(366,675,o),
(236,537,o),
(163,354,o),
(163,246,qs),
(163,139,o),
(236,-45,o),
(366,-182,o),
(451,-222,q),
(482,-165,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
8 0 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(239,600,o),
(367,387,o),
(367,246,qs),
(367,105,o),
(239,-108,o),
(118,-165,q),
(149,-222,l),
(234,-182,o),
(364,-45,o),
(437,139,o),
(437,246,qs),
(437,354,o),
(364,537,o),
(234,675,o),
(149,714,q),
(118,657,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
8 0 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(433,-207,o),
(466,-191,q),
(446,-137,l),
(416,-150,o),
(367,-159,o),
(343,-159,qs),
(308,-159,o),
(267,-119,o),
(267,-88,qs),
(267,-64,o),
(293,-7,o),
(326,52,o),
(352,109,o),
(352,134,qs),
(352,173,o),
(302,236,o),
(262,246,q),
(301,257,o),
(352,319,o),
(352,358,qs),
(352,383,o),
(326,440,o),
(293,499,o),
(267,556,o),
(267,580,qs),
(267,612,o),
(308,651,o),
(343,651,qs),
(367,651,o),
(416,643,o),
(446,629,q),
(466,683,l),
(433,700,o),
(368,711,o),
(342,711,qs),
(279,711,o),
(203,636,o),
(203,580,qs),
(203,548,o),
(229,486,o),
(262,429,o),
(288,376,o),
(288,352,qs),
(288,319,o),
(237,277,o),
(193,277,qs),
(114,277,l),
(114,215,l),
(193,215,ls),
(237,215,o),
(288,173,o),
(288,140,qs),
(288,116,o),
(262,63,o),
(229,6,o),
(203,-56,o),
(203,-88,qs),
(203,-143,o),
(279,-219,o),
(342,-219,qs),
(368,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
28 1 4 3 29 1 2 4 43 1 1 2 57 1 5 1 58 1 0 5 5 76 0 2 0 1 5 2 1 103 0 4 4 3 97 0 3 3 26 77 0 5 5 0 97 6 1 0 0 31 0 78 1 0 55 53 33 31 26 24 15 13 12 10 0 60 1 60 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(167,700,o),
(134,683,q),
(154,629,l),
(184,643,o),
(233,651,o),
(257,651,qs),
(292,651,o),
(333,612,o),
(333,580,qs),
(333,556,o),
(307,499,o),
(274,440,o),
(248,383,o),
(248,358,qs),
(248,319,o),
(298,257,o),
(338,246,q),
(299,236,o),
(248,173,o),
(248,134,qs),
(248,109,o),
(274,52,o),
(307,-7,o),
(333,-64,o),
(333,-88,qs),
(333,-119,o),
(292,-159,o),
(257,-159,qs),
(233,-159,o),
(184,-150,o),
(154,-137,q),
(134,-191,l),
(167,-207,o),
(232,-219,o),
(258,-219,qs),
(321,-219,o),
(397,-143,o),
(397,-88,qs),
(397,-56,o),
(371,6,o),
(338,63,o),
(312,116,o),
(312,140,qs),
(312,173,o),
(363,215,o),
(407,215,qs),
(486,215,l),
(486,277,l),
(407,277,ls),
(363,277,o),
(312,319,o),
(312,352,qs),
(312,376,o),
(338,429,o),
(371,486,o),
(397,548,o),
(397,580,qs),
(397,636,o),
(321,711,o),
(258,711,qs),
(232,711,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
58 1 5 0 57 1 1 5 43 1 2 1 29 1 4 2 28 1 3 4 5 76 0 1 0 2 4 1 2 103 0 5 5 0 97 6 1 0 0 26 77 0 4 4 3 97 0 3 3 31 3 78 1 0 55 53 33 31 26 24 15 13 12 10 0 60 1 60 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(472,-155,l),
(251,-155,l),
(251,640,l),
(472,640,l),
(472,700,l),
(181,700,l),
(181,-215,l),
(472,-215,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 1 0 95 0 0 0 20 77 0 2 2 3 95 4 1 3 3 25 3 78 0 0 0 7 0 7 17 17 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,640,l),
(349,640,l),
(349,-155,l),
(128,-155,l),
(128,-215,l),
(419,-215,l),
(419,700,l),
(128,700,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 2 3 95 4 1 3 3 20 77 0 1 1 0 95 0 0 0 25 0 78 0 0 0 7 0 7 17 17 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-1,0);
ref = comma;
}
);
width = 600;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (90,0);
ref = comma;
},
{
alignment = -1;
pos = (-73,0);
ref = comma;
}
);
width = 600;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,519,l),
(229,519,l),
(284,750,l),
(227,750,l)
);
},
{
closed = 1;
nodes = (
(296,519,l),
(389,519,l),
(444,750,l),
(387,750,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
2 1 0 1 0 134 5 3 4 3 1 1 22 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
5 3 4 3 1 0 1 133 2 1 0 0 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(469,750,l),
(376,750,l),
(321,519,l),
(378,519,l)
);
},
{
closed = 1;
nodes = (
(309,750,l),
(216,750,l),
(161,519,l),
(218,519,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 0 1 134 2 1 0 0 22 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
2 1 0 1 0 133 5 3 4 3 1 1 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,519,l),
(309,519,l),
(364,750,l),
(307,750,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 1 0 134 2 1 1 1 22 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
2 1 1 0 1 133 0 0 0 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(389,750,l),
(296,750,l),
(241,519,l),
(298,519,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 134 0 0 0 22 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 0 1 0 133 2 1 1 1 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(126,246,l),
(343,488,l),
(266,488,l),
(43,245,l),
(263,0,l),
(343,0,l)
);
},
{
closed = 1;
nodes = (
(350,246,l),
(567,488,l),
(490,488,l),
(267,245,l),
(487,0,l),
(567,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
10 7 4 1 4 1 0 1 76 2 1 0 0 23 77 5 3 4 3 1 1 21 1 78 6 6 0 0 6 11 6 11 9 8 0 5 0 5 18 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(474,242,l),
(257,0,l),
(334,0,l),
(557,243,l),
(337,488,l),
(257,488,l)
);
},
{
closed = 1;
nodes = (
(250,242,l),
(33,0,l),
(110,0,l),
(333,243,l),
(113,488,l),
(33,488,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
10 7 4 1 4 0 1 1 76 5 3 4 3 1 1 23 77 2 1 0 0 21 0 78 6 6 0 0 6 11 6 11 9 8 0 5 0 5 18 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(238,246,l),
(455,488,l),
(378,488,l),
(155,245,l),
(375,0,l),
(455,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
4 1 2 1 0 1 76 0 0 0 23 77 2 1 1 1 21 1 78 0 0 0 5 0 5 18 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(362,242,l),
(145,0,l),
(222,0,l),
(445,243,l),
(225,488,l),
(145,488,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
4 1 2 0 1 1 76 2 1 1 1 23 77 0 0 0 21 0 78 0 0 0 5 0 5 18 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-72,0);
ref = quotesingle;
},
{
alignment = -1;
pos = (72,0);
ref = quotesingle;
}
);
width = 600;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(336,750,l),
(264,750,l),
(275,530,l),
(326,530,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 22 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(375,92,q),
(398,55,o),
(451,55,qs),
(517,55,o),
(588,174,o),
(588,266,qs),
(588,360,o),
(516,499,o),
(390,576,o),
(310,576,qs),
(225,576,o),
(90,482,o),
(12,317,o),
(12,210,qs),
(12,107,o),
(91,-53,o),
(228,-144,o),
(315,-144,qs),
(365,-144,o),
(453,-119,o),
(493,-92,q),
(469,-52,l),
(437,-76,o),
(358,-100,o),
(315,-100,qs),
(240,-100,o),
(124,-20,o),
(58,120,o),
(58,210,qs),
(58,304,o),
(123,449,o),
(236,532,o),
(308,532,qs),
(376,532,o),
(482,464,o),
(542,344,o),
(542,265,qs),
(542,189,o),
(495,99,o),
(456,99,qs),
(407,99,o),
(416,163,qs),
(446,366,l),
(391,366,l),
(388,343,l),
(354,379,o),
(301,379,qs),
(258,379,o),
(188,334,o),
(147,255,o),
(147,202,qs),
(147,134,o),
(222,51,o),
(277,51,qs),
(328,51,o)
);
},
{
closed = 1;
nodes = (
(201,158,o),
(201,206,qs),
(201,260,o),
(260,331,o),
(303,331,qs),
(327,331,o),
(369,309,o),
(380,289,q),
(363,168,ls),
(362,158,o),
(361,139,o),
(362,131,q),
(347,115,o),
(309,98,o),
(289,98,qs),
(250,98,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
9 1 10 1 62 1 3 10 53 1 0 3 33 32 2 5 0 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
9 1 10 2 62 1 3 10 53 1 0 3 33 32 2 5 0 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 7 0 4 1 7 4 105 2 1 1 0 10 3 1 10 105 12 9 2 3 8 11 2 0 5 3 0 106 0 5 6 6 5 89 0 5 5 6 97 0 6 5 6 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 2 1 10 1 2 10 128 0 7 0 4 1 7 4 105 0 1 0 10 3 1 10 105 12 9 2 3 8 11 2 0 5 3 0 106 0 5 6 6 5 89 0 5 5 6 97 0 6 5 6 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
56 55 1 0 66 64 55 70 56 70 52 50 45 43 37 35 30 28 22 20 15 13 11 10 8 6 0 54 1 54 13 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,83,q),
(466,52,o),
(521,6,o),
(545,-13,q),
(591,38,l),
(536,82,o),
(473,141,q),
(519,220,o),
(542,335,q),
(474,346,l),
(466,300,o),
(440,220,o),
(423,188,q),
(379,231,o),
(292,323,o),
(254,367,q),
(314,407,o),
(384,471,o),
(413,531,o),
(413,566,qs),
(413,630,o),
(328,711,o),
(260,711,qs),
(213,711,o),
(139,667,o),
(97,592,o),
(97,543,qs),
(97,505,o),
(129,421,o),
(159,377,q),
(97,334,o),
(40,242,o),
(40,183,qs),
(40,95,o),
(150,-11,o),
(241,-11,qs),
(350,-11,o)
);
},
{
closed = 1;
nodes = (
(218,651,o),
(258,651,qs),
(294,651,o),
(343,601,o),
(343,564,qs),
(343,523,o),
(289,458,o),
(218,414,q),
(167,487,o),
(167,545,qs),
(167,592,o)
);
},
{
closed = 1;
nodes = (
(196,327,q),
(234,281,o),
(329,181,o),
(384,128,q),
(324,52,o),
(244,52,qs),
(183,52,o),
(110,125,o),
(110,185,qs),
(110,260,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
56 53 39 35 29 27 26 23 20 6 10 3 2 31 1 0 3 2 76 32 1 0 73 0 2 2 1 97 0 1 1 26 77 0 3 3 0 97 4 1 0 0 27 0 78 1 0 52 50 46 44 14 12 0 36 1 36 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(364,288,l),
(478,288,l),
(478,0,l),
(544,0,l),
(544,700,l),
(243,700,ls),
(181,700,o),
(86,648,o),
(33,556,o),
(33,494,qs),
(33,433,o),
(86,340,o),
(181,288,o),
(243,288,qs),
(298,288,l),
(298,0,l),
(364,0,l)
);
},
{
closed = 1;
nodes = (
(364,637,l),
(478,637,l),
(478,351,l),
(364,351,l)
);
},
{
closed = 1;
nodes = (
(102,430,o),
(102,494,qs),
(102,558,o),
(180,637,o),
(244,637,qs),
(298,637,l),
(298,351,l),
(244,351,ls),
(180,351,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
11 7 10 3 6 3 1 0 2 6 0 105 8 1 5 5 1 95 0 1 1 20 77 9 4 2 2 2 21 2 78 22 21 17 17 0 0 25 23 21 29 22 29 17 20 17 20 19 18 0 16 0 16 17 17 38 33 12 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(461,26,o),
(461,87,qs),
(461,153,o),
(410,190,q),
(459,204,o),
(514,269,o),
(514,315,qs),
(514,370,o),
(454,435,o),
(380,460,qs),
(277,496,ls),
(204,521,o),
(204,577,qs),
(204,614,o),
(257,656,o),
(303,656,qs),
(365,656,o),
(445,609,q),
(474,662,l),
(431,685,o),
(344,711,o),
(303,711,qs),
(229,711,o),
(138,636,o),
(138,574,qs),
(138,509,o),
(189,470,q),
(141,457,o),
(86,393,o),
(86,346,qs),
(86,292,o),
(146,227,o),
(219,202,qs),
(323,166,ls),
(361,153,o),
(395,114,o),
(395,85,qs),
(395,48,o),
(343,6,o),
(297,6,qs),
(236,6,o),
(155,52,q),
(126,-1,l),
(211,-49,o),
(297,-49,qs),
(371,-49,o)
);
},
{
closed = 1;
nodes = (
(190,278,o),
(149,320,o),
(149,351,qs),
(149,389,o),
(201,436,o),
(245,441,q),
(247,440,o),
(253,438,o),
(255,437,qs),
(365,400,ls),
(409,384,o),
(451,342,o),
(451,310,qs),
(451,274,o),
(398,226,o),
(354,220,q),
(352,222,o),
(346,223,o),
(344,224,qs),
(235,261,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
26 1 3 2 41 27 18 3 4 1 3 2 1 0 1 3 76 0 1 4 1 0 1 0 101 0 3 3 2 97 0 2 2 26 3 78 1 0 30 28 24 22 6 4 0 45 1 45 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = section;
unicode = 167;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(506,79,o),
(582,242,o),
(582,350,qs),
(582,459,o),
(506,621,o),
(379,711,o),
(300,711,qs),
(222,711,o),
(94,621,o),
(18,459,o),
(18,350,qs),
(18,242,o),
(94,79,o),
(222,-11,o),
(300,-11,qs),
(379,-11,o)
);
},
{
closed = 1;
nodes = (
(127,115,o),
(65,258,o),
(65,350,qs),
(65,442,o),
(127,585,o),
(234,667,o),
(300,667,qs),
(366,667,o),
(473,585,o),
(535,442,o),
(535,350,qs),
(535,258,o),
(473,115,o),
(366,33,o),
(300,33,qs),
(234,33,o)
);
},
{
closed = 1;
nodes = (
(410,196,o),
(435,224,q),
(398,263,l),
(358,217,o),
(306,217,qs),
(261,217,o),
(198,290,o),
(198,350,qs),
(198,410,o),
(261,483,o),
(306,483,qs),
(358,483,o),
(398,437,q),
(435,476,l),
(410,504,o),
(343,535,o),
(305,535,qs),
(260,535,o),
(187,488,o),
(143,404,o),
(143,350,qs),
(143,296,o),
(187,213,o),
(260,165,o),
(305,165,qs),
(343,165,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 84 values pushed */
55 54 44 43 4 7 6 1 76 0 1 0 3 5 1 3 105 0 5 0 6 7 5 6 105 0 7 10 1 4 2 7 4 105 9 1 2 0 0 2 89 9 1 2 2 0 97 8 1 0 2 0 81 33 32 17 16 1 0 53 51 47 45 41 39 32 57 33 57 25 23 16 31 17 31 9 7 0 15 1 15 11 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(440,362,o),
(490,454,o),
(490,510,qs),
(490,567,o),
(440,658,o),
(354,711,o),
(300,711,qs),
(246,711,o),
(160,658,o),
(110,567,o),
(110,510,qs),
(110,454,o),
(160,362,o),
(246,309,o),
(300,309,qs),
(354,309,o)
);
},
{
closed = 1;
nodes = (
(186,386,o),
(146,462,o),
(146,510,qs),
(146,558,o),
(186,634,o),
(256,677,o),
(300,677,qs),
(344,677,o),
(414,634,o),
(454,558,o),
(454,510,qs),
(454,462,o),
(414,386,o),
(344,343,o),
(300,343,qs),
(256,343,o)
);
},
{
closed = 1;
nodes = (
(270,488,l),
(304,488,l),
(344,417,l),
(380,417,l),
(335,495,l),
(368,511,o),
(368,547,qs),
(368,574,o),
(337,605,o),
(309,605,qs),
(237,605,l),
(237,417,l),
(270,417,l)
);
},
{
closed = 1;
nodes = (
(336,546,qs),
(336,514,o),
(304,514,qs),
(270,514,l),
(270,577,l),
(304,577,ls),
(336,577,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 99 values pushed */
39 1 6 9 1 76 12 7 2 5 6 2 6 5 2 128 0 1 0 3 4 1 3 105 0 4 13 1 8 9 4 8 105 0 9 0 6 5 9 6 103 11 1 2 0 0 2 89 11 1 2 2 0 97 10 1 0 2 0 81 46 45 32 32 17 16 1 0 49 47 45 51 46 51 32 44 32 44 43 42 41 40 35 33 25 23 16 31 17 31 9 7 0 15 1 15 14 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = registered;
unicode = 174;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(325,643,l),
(422,440,l),
(519,645,l),
(519,421,l),
(558,421,l),
(558,700,l),
(505,700,l),
(422,519,l),
(339,700,l),
(286,700,l),
(286,421,l),
(325,421,l)
);
},
{
closed = 1;
nodes = (
(165,662,l),
(249,662,l),
(249,700,l),
(40,700,l),
(40,662,l),
(123,662,l),
(123,421,l),
(165,421,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
10 9 8 3 4 2 4 1 76 9 7 8 3 4 2 4 2 134 5 1 2 0 4 4 0 87 5 1 2 0 0 4 95 6 1 4 0 4 79 12 12 0 0 12 19 12 19 18 17 16 15 14 13 0 11 0 11 17 18 17 10 6 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(404,462,o),
(443,528,o),
(443,567,qs),
(443,607,o),
(404,672,o),
(340,711,o),
(300,711,qs),
(261,711,o),
(196,672,o),
(157,607,o),
(157,567,qs),
(157,528,o),
(196,462,o),
(261,423,o),
(300,423,qs),
(340,423,o)
);
},
{
closed = 1;
nodes = (
(207,528,o),
(207,567,qs),
(207,606,o),
(262,662,o),
(300,662,qs),
(338,662,o),
(393,606,o),
(393,567,qs),
(393,528,o),
(338,472,o),
(300,472,qs),
(262,472,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 1 0 3 2 1 3 105 5 1 2 0 0 2 89 5 1 2 2 0 97 4 1 0 2 0 81 17 16 1 0 23 21 16 27 17 27 9 7 0 15 1 15 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = degree;
unicode = 176;
},
{
glyphname = minute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,750,l),
(281,750,l),
(226,519,l),
(283,519,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 134 0 0 0 22 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 0 1 0 133 2 1 1 1 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = minute;
unicode = 8242;
},
{
glyphname = second;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,750,l),
(201,750,l),
(146,519,l),
(203,519,l)
);
},
{
closed = 1;
nodes = (
(454,750,l),
(361,750,l),
(306,519,l),
(363,519,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 0 1 134 2 1 0 0 22 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 13 values pushed */
2 1 0 1 0 133 5 3 4 3 1 1 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = second;
unicode = 8243;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,700,l),
(266,700,l),
(266,-209,l),
(334,-209,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 20 77 2 1 1 1 25 1 78 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = bar;
unicode = 124;
},
{
glyphname = brokenbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(334,700,l),
(266,700,l),
(266,287,l),
(334,287,l)
);
},
{
closed = 1;
nodes = (
(334,204,l),
(266,204,l),
(266,-209,l),
(334,-209,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 95 0 0 0 20 77 0 2 2 3 95 5 1 3 3 25 3 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = dagger;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(332,443,l),
(467,443,l),
(467,500,l),
(332,500,l),
(332,700,l),
(268,700,l),
(268,500,l),
(133,500,l),
(133,443,l),
(268,443,l),
(268,0,l),
(332,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 2 20 77 4 1 0 0 1 95 3 1 1 1 23 77 6 1 5 5 21 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
3 1 1 4 1 0 5 1 0 103 0 2 2 20 77 6 1 5 5 21 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(268,0,l),
(332,0,l),
(332,200,l),
(467,200,l),
(467,257,l),
(332,257,l),
(332,443,l),
(467,443,l),
(467,500,l),
(332,500,l),
(332,700,l),
(268,700,l),
(268,500,l),
(133,500,l),
(133,443,l),
(268,443,l),
(268,257,l),
(133,257,l),
(133,200,l),
(268,200,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
6 1 0 10 9 2 7 8 0 7 103 0 3 3 20 77 5 1 1 1 2 95 4 1 2 2 23 77 0 8 8 21 8 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
4 1 2 5 1 1 0 2 1 103 6 1 0 10 9 2 7 8 0 7 103 0 3 3 20 77 0 8 8 21 8 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 7 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = uniFFFD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(497,750,l),
(103,750,l),
(103,-100,l),
(497,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 6 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uniFFFD;
unicode = 65533;
},
{
glyphname = at.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,135);
ref = at;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 2
PUSHB[ ]	/* 1 value pushed */
135
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = at.case;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,-7,l),
(393,-3,o),
(485,44,o),
(514,81,q),
(458,120,l),
(437,95,o),
(375,61,o),
(337,57,q),
(337,431,l),
(375,427,o),
(437,394,o),
(458,368,q),
(514,407,l),
(485,445,o),
(393,491,o),
(337,495,q),
(337,606,l),
(283,606,l),
(283,494,l),
(222,486,o),
(126,417,o),
(72,310,o),
(72,244,qs),
(72,179,o),
(126,71,o),
(222,2,o),
(283,-6,q),
(283,-118,l),
(337,-118,l)
);
},
{
closed = 1;
nodes = (
(222,416,o),
(283,429,q),
(283,59,l),
(222,72,o),
(144,174,o),
(144,244,qs),
(144,315,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
33 32 27 24 23 20 19 16 15 12 9 1 12 1 0 1 76 0 0 1 0 133 2 1 1 1 118 0 0 0 28 0 28 26 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = cent;
unicode = 162;
},
{
glyphname = currency;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,131,o),
(254,100,o),
(300,100,qs),
(346,100,o),
(428,130,o),
(461,157,q),
(555,63,l),
(595,104,l),
(501,199,l),
(527,232,o),
(555,315,o),
(555,361,qs),
(555,408,o),
(525,491,o),
(499,524,q),
(594,619,l),
(555,659,l),
(461,564,l),
(428,591,o),
(346,621,o),
(300,621,qs),
(254,621,o),
(172,591,o),
(139,564,q),
(45,659,l),
(5,618,l),
(99,523,l),
(73,490,o),
(44,408,o),
(44,361,qs),
(44,315,o),
(73,231,o),
(98,198,q),
(5,104,l),
(44,64,l),
(137,158,l)
);
},
{
closed = 1;
nodes = (
(166,219,o),
(117,307,o),
(117,361,qs),
(117,416,o),
(166,503,o),
(249,555,o),
(300,555,qs),
(351,555,o),
(434,503,o),
(483,416,o),
(483,361,qs),
(483,307,o),
(434,219,o),
(351,167,o),
(300,167,qs),
(249,167,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
19 17 11 9 4 3 0 26 20 8 2 4 2 3 35 29 27 1 4 1 2 3 76 18 10 2 0 74 28 1 1 73 0 0 0 3 2 0 3 105 4 1 2 1 1 2 89 4 1 2 2 1 97 0 1 2 1 81 37 36 45 43 36 51 37 51 33 31 45 5 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = currency;
unicode = 164;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(330,22,l),
(389,27,o),
(479,75,o),
(529,152,o),
(529,201,qs),
(529,271,o),
(440,354,o),
(330,384,q),
(330,613,l),
(407,601,o),
(475,545,q),
(512,597,l),
(472,629,o),
(379,670,o),
(330,676,q),
(330,767,l),
(276,767,l),
(276,678,l),
(186,674,o),
(78,580,o),
(78,507,qs),
(78,468,o),
(112,402,o),
(198,348,o),
(276,327,q),
(276,84,l),
(233,89,o),
(148,124,o),
(107,155,q),
(71,101,l),
(161,31,o),
(276,22,q),
(276,-67,l),
(330,-67,l)
);
},
{
closed = 1;
nodes = (
(216,614,o),
(276,617,q),
(276,396,l),
(198,419,o),
(146,474,o),
(146,512,qs),
(146,556,o)
);
},
{
closed = 1;
nodes = (
(388,89,o),
(330,83,q),
(330,316,l),
(401,297,o),
(460,241,o),
(460,195,qs),
(460,150,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
45 44 37 32 25 24 22 21 8 7 4 3 1 13 2 3 1 76 18 1 0 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 0 1 133 4 1 2 3 2 134 0 3 3 0 97 0 0 0 20 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 1 133 4 1 2 3 2 134 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
0 1 0 1 133 4 1 2 3 2 134 0 3 3 0 97 0 0 0 20 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 1 0 1 133 4 1 2 3 2 134 0 0 3 3 0 89 0 0 0 3 97 0 3 0 3 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 39 38 0 33 0 33 17 30 5 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,75,o),
(580,152,q),
(511,183,l),
(487,123,o),
(406,59,o),
(356,59,qs),
(295,59,o),
(204,162,o),
(187,256,q),
(368,256,l),
(386,310,l),
(180,310,l),
(179,320,o),
(179,340,o),
(179,350,qs),
(179,361,o),
(179,380,o),
(180,390,q),
(416,390,l),
(435,444,l),
(187,444,l),
(204,539,o),
(295,641,o),
(356,641,qs),
(406,641,o),
(487,577,o),
(511,517,q),
(580,548,l),
(549,625,o),
(433,711,o),
(356,711,qs),
(298,711,o),
(195,650,o),
(122,531,o),
(108,444,q),
(28,444,l),
(28,390,l),
(102,390,l),
(101,380,o),
(101,361,o),
(101,350,qs),
(101,340,o),
(101,320,o),
(102,310,q),
(28,310,l),
(28,256,l),
(108,256,l),
(122,170,o),
(195,50,o),
(298,-11,o),
(356,-11,qs),
(433,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
24 23 2 4 6 49 48 2 11 1 2 76 7 1 4 8 1 3 2 4 3 103 9 1 2 10 1 1 11 2 1 103 0 6 6 5 97 0 5 5 26 77 0 11 11 0 97 12 1 0 0 27 0 78 1 0 46 44 42 41 40 39 33 32 31 30 28 26 21 19 16 15 14 13 7 6 5 4 0 51 1 51 13 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(190,263,o),
(201,215,o),
(201,192,qs),
(201,132,o),
(172,103,q),
(127,103,o),
(57,55,o),
(29,10,q),
(81,-28,l),
(100,4,o),
(145,39,o),
(176,39,qs),
(208,39,o),
(271,20,o),
(335,-6,o),
(399,-25,o),
(432,-25,qs),
(476,-25,o),
(546,20,o),
(572,63,q),
(518,100,l),
(501,72,o),
(458,42,o),
(429,42,qs),
(383,42,o),
(288,81,o),
(238,94,q),
(269,133,o),
(269,202,qs),
(269,222,o),
(261,266,o),
(254,289,q),
(391,289,l),
(391,343,l),
(238,343,l),
(225,384,o),
(203,467,o),
(203,506,qs),
(203,574,o),
(266,648,o),
(320,648,qs),
(414,648,o),
(455,524,q),
(519,550,l),
(491,628,o),
(397,711,o),
(320,711,qs),
(235,711,o),
(133,597,o),
(133,499,qs),
(133,460,o),
(153,381,o),
(165,343,q),
(69,343,l),
(69,289,l),
(182,289,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
12 11 2 0 2 35 34 28 3 5 8 47 1 6 7 3 76 46 1 6 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
3 1 0 10 9 2 4 8 0 4 103 0 8 0 7 6 8 7 105 0 2 2 1 97 0 1 1 26 77 0 5 5 6 97 0 6 6 27 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
3 1 0 10 9 2 4 8 0 4 103 0 8 0 7 6 8 7 105 0 5 0 6 5 6 101 0 2 2 1 97 0 1 1 26 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 55 0 55 21 35 37 39 17 21 36 37 17 11 7 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,0,l),
(338,0,l),
(338,134,l),
(516,134,l),
(516,188,l),
(338,188,l),
(338,263,l),
(516,263,l),
(516,317,l),
(356,317,l),
(577,700,l),
(497,700,l),
(302,355,l),
(107,700,l),
(23,700,l),
(244,317,l),
(84,317,l),
(84,263,l),
(261,263,l),
(261,188,l),
(84,188,l),
(84,134,l),
(261,134,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
9 1 2 3 1 76 5 1 2 6 1 1 0 2 1 104 7 1 0 11 10 2 8 9 0 8 103 4 1 3 3 20 77 0 9 9 21 9 78 0 0 0 22 0 22 21 20 17 17 17 17 18 17 17 17 17 12 7 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = yen;
unicode = 165;
},
{
glyphname = uni2215;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,700,l),
(431,700,l),
(38,0,l),
(96,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 6 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,318,l),
(523,318,l),
(523,378,l),
(331,378,l),
(331,584,l),
(269,584,l),
(269,378,l),
(77,378,l),
(77,318,l),
(269,318,l),
(269,112,l),
(331,112,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 1 5 2 87 3 1 1 4 1 0 5 1 0 103 0 2 2 5 95 6 1 5 2 5 79 0 0 0 11 0 11 17 17 17 17 17 7 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plus;
unicode = 43;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(523,378,l),
(77,378,l),
(77,318,l),
(523,318,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 6 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(471,136,l),
(511,177,l),
(337,360,l),
(510,542,l),
(471,582,l),
(299,400,l),
(127,582,l),
(89,541,l),
(261,359,l),
(89,177,l),
(126,137,l),
(298,319,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
10 4 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(353,510,o),
(353,532,qs),
(353,554,o),
(322,585,o),
(300,585,qs),
(278,585,o),
(247,554,o),
(247,532,qs),
(247,510,o),
(278,479,o),
(300,479,qs),
(322,479,o)
);
},
{
closed = 1;
nodes = (
(523,378,l),
(77,378,l),
(77,318,l),
(523,318,l)
);
},
{
closed = 1;
nodes = (
(353,142,o),
(353,164,qs),
(353,186,o),
(322,217,o),
(300,217,qs),
(278,217,o),
(247,186,o),
(247,164,qs),
(247,142,o),
(278,111,o),
(300,111,qs),
(322,111,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 1 6 1 0 2 1 0 105 0 2 7 1 3 5 2 3 103 0 5 4 4 5 89 0 5 5 4 97 8 1 4 5 4 81 17 16 12 12 1 0 23 21 16 27 17 27 12 15 12 15 14 13 7 5 0 11 1 11 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,-82);
ref = minus;
},
{
alignment = -1;
pos = (0,82);
ref = minus;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
-82
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
82
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = equal;
unicode = 61;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(253,235,l),
(523,235,l),
(523,295,l),
(294,295,l),
(365,398,l),
(523,398,l),
(523,458,l),
(406,458,l),
(489,579,l),
(431,579,l),
(348,458,l),
(77,458,l),
(77,398,l),
(307,398,l),
(236,295,l),
(77,295,l),
(77,235,l),
(195,235,l),
(111,113,l),
(169,113,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 4 3 3 4 112 10 1 9 0 0 9 113 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 4 3 4 133 10 1 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 6 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(141,53,l),
(508,348,l),
(142,644,l),
(104,596,l),
(415,347,l),
(104,100,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 2 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(459,644,l),
(92,349,l),
(458,53,l),
(496,101,l),
(185,350,l),
(496,597,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 2 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = less;
unicode = 60;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,349,l),
(523,349,l),
(523,409,l),
(331,409,l),
(331,610,l),
(269,610,l),
(269,409,l),
(77,409,l),
(77,349,l),
(269,349,l),
(269,148,l),
(331,148,l)
);
},
{
closed = 1;
nodes = (
(523,59,l),
(77,59,l),
(77,-1,l),
(523,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
3 1 1 4 1 0 5 1 0 103 0 2 8 1 5 6 2 5 103 0 6 6 7 95 9 1 7 7 21 7 78 12 12 0 0 12 15 12 15 14 13 0 11 0 11 17 17 17 17 17 10 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,397,qs),
(193,397,o),
(221,387,o),
(248,372,qs),
(328,326,ls),
(357,309,o),
(402,295,o),
(421,295,qs),
(468,295,o),
(529,376,o),
(537,451,q),
(480,458,l),
(468,357,o),
(416,357,qs),
(403,357,o),
(374,367,o),
(347,382,qs),
(267,428,ls),
(238,445,o),
(194,459,o),
(174,459,qs),
(127,459,o),
(66,378,o),
(58,303,q),
(115,296,l),
(127,397,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
14 13 2 3 0 1 1 2 1 2 76 0 0 0 3 1 0 3 105 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 37 36 37 35 4 7 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = logicalnot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,314,l),
(76,314,l),
(76,254,l),
(462,254,l),
(462,0,l),
(524,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 1 0 0 2 1 0 103 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(300,634,l),
(463,350,l),
(534,350,l),
(332,700,l),
(268,700,l),
(66,350,l),
(137,350,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 0 1 76 0 0 1 0 133 3 2 2 1 1 118 0 0 0 6 0 6 17 17 4 7 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = uni00B5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(172,26,l),
(215,-8,o),
(276,-8,qs),
(376,-8,o),
(431,79,q),
(431,0,l),
(504,0,l),
(504,488,l),
(431,488,l),
(431,128,l),
(387,53,o),
(303,53,qs),
(243,53,o),
(172,129,o),
(172,193,qs),
(172,488,l),
(99,488,l),
(99,-209,l),
(172,-209,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
13 8 2 1 0 17 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 23 77 0 1 1 3 97 4 1 3 3 21 77 6 1 5 5 25 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
2 1 0 0 23 77 0 3 3 21 77 0 1 1 4 97 0 4 4 30 77 6 1 5 5 25 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 18 0 18 34 17 18 35 17 7 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,494,o),
(270,559,qs),
(270,624,o),
(204,705,o),
(149,705,qs),
(94,705,o),
(28,624,o),
(28,559,qs),
(28,494,o),
(94,413,o),
(149,413,qs),
(204,413,o)
);
},
{
closed = 1;
nodes = (
(524,700,l),
(468,700,l),
(76,0,l),
(132,0,l)
);
},
{
closed = 1;
nodes = (
(77,512,o),
(77,559,qs),
(77,606,o),
(116,660,o),
(149,660,qs),
(182,660,o),
(221,606,o),
(221,559,qs),
(221,512,o),
(182,458,o),
(149,458,qs),
(116,458,o)
);
},
{
closed = 1;
nodes = (
(572,76,o),
(572,141,qs),
(572,206,o),
(506,287,o),
(451,287,qs),
(396,287,o),
(330,206,o),
(330,141,qs),
(330,76,o),
(396,-5,o),
(451,-5,qs),
(506,-5,o)
);
},
{
closed = 1;
nodes = (
(379,94,o),
(379,141,qs),
(379,188,o),
(418,242,o),
(451,242,qs),
(484,242,o),
(523,188,o),
(523,141,qs),
(523,94,o),
(484,40,o),
(451,40,qs),
(418,40,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
12 1 4 10 1 0 7 4 0 105 0 7 0 9 8 7 9 106 0 5 5 1 97 2 1 1 1 20 77 14 1 8 8 3 97 13 6 11 3 3 3 21 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
12 1 4 10 1 0 7 4 0 105 0 7 0 9 8 7 9 106 0 2 2 20 77 0 5 5 1 97 0 1 1 20 77 11 1 3 3 21 77 14 1 8 8 6 97 13 1 6 6 21 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 43 values pushed */
41 40 29 28 17 16 12 12 1 0 47 45 40 51 41 51 35 33 28 39 29 39 23 21 16 27 17 27 12 15 12 15 14 13 7 5 0 11 1 11 15 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = percent;
unicode = 37;
},
{
glyphname = perthousand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(193,519,o),
(193,577,qs),
(193,635,o),
(143,705,o),
(104,705,qs),
(65,705,o),
(15,635,o),
(15,577,qs),
(15,519,o),
(65,449,o),
(104,449,qs),
(143,449,o)
);
},
{
closed = 1;
nodes = (
(352,700,l),
(304,700,l),
(46,0,l),
(94,0,l)
);
},
{
closed = 1;
nodes = (
(60,536,o),
(60,577,qs),
(60,618,o),
(84,664,o),
(104,664,qs),
(124,664,o),
(148,618,o),
(148,577,qs),
(148,536,o),
(124,490,o),
(104,490,qs),
(84,490,o)
);
},
{
closed = 1;
nodes = (
(383,65,o),
(383,123,qs),
(383,181,o),
(333,251,o),
(294,251,qs),
(255,251,o),
(205,181,o),
(205,123,qs),
(205,65,o),
(255,-5,o),
(294,-5,qs),
(333,-5,o)
);
},
{
closed = 1;
nodes = (
(585,65,o),
(585,123,qs),
(585,181,o),
(535,251,o),
(496,251,qs),
(457,251,o),
(407,181,o),
(407,123,qs),
(407,65,o),
(457,-5,o),
(496,-5,qs),
(535,-5,o)
);
},
{
closed = 1;
nodes = (
(250,82,o),
(250,123,qs),
(250,164,o),
(275,210,o),
(294,210,qs),
(314,210,o),
(338,164,o),
(338,123,qs),
(338,82,o),
(314,36,o),
(294,36,qs),
(275,36,o)
);
},
{
closed = 1;
nodes = (
(452,82,o),
(452,123,qs),
(452,164,o),
(477,210,o),
(496,210,qs),
(516,210,o),
(540,164,o),
(540,123,qs),
(540,82,o),
(516,36,o),
(496,36,qs),
(477,36,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
9 1 7 13 1 11 10 7 11 106 0 5 5 1 97 2 1 1 1 20 77 14 1 0 0 4 97 16 1 4 4 23 77 20 12 19 3 10 10 3 97 18 8 17 6 15 5 3 3 21 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 60 values pushed */
9 1 7 13 1 11 10 7 11 106 0 2 2 20 77 0 5 5 1 97 0 1 1 20 77 14 1 0 0 4 97 16 1 4 4 23 77 15 1 3 3 21 77 20 12 19 3 10 10 6 97 18 8 17 3 6 6 21 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 59 values pushed */
65 64 53 52 41 40 29 28 17 16 12 12 1 0 71 69 64 75 65 75 59 57 52 63 53 63 47 45 40 51 41 51 35 33 28 39 29 39 23 21 16 27 17 27 12 15 12 15 14 13 7 5 0 11 1 11 21 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,614,l),
(499,395,l),
(546,432,l),
(300,750,l),
(54,432,l),
(102,394,l),
(265,609,l),
(265,0,l),
(333,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
7 6 5 4 3 2 1 7 0 74 1 1 0 0 118 0 0 0 8 0 8 2 6 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(267,86,l),
(101,305,l),
(54,268,l),
(300,-50,l),
(546,268,l),
(498,306,l),
(335,91,l),
(335,700,l),
(267,700,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
7 6 5 4 3 2 1 7 0 73 1 1 0 0 118 0 0 0 8 0 8 2 6 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = uni0308;
layers = (
{
anchors = (
{
name = _top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,641,o),
(261,666,qs),
(261,692,o),
(224,728,o),
(198,728,qs),
(172,728,o),
(135,692,o),
(135,666,qs),
(135,641,o),
(172,604,o),
(198,604,qs),
(224,604,o)
);
},
{
closed = 1;
nodes = (
(465,641,o),
(465,666,qs),
(465,692,o),
(428,728,o),
(402,728,qs),
(376,728,o),
(339,692,o),
(339,666,qs),
(339,641,o),
(376,604,o),
(402,604,qs),
(428,604,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 40 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 5 2 4 3 0 1 0 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni0307;
layers = (
{
anchors = (
{
name = _top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,641,o),
(363,666,qs),
(363,692,o),
(326,728,o),
(300,728,qs),
(274,728,o),
(237,692,o),
(237,666,qs),
(237,641,o),
(274,604,o),
(300,604,qs),
(326,604,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = gravecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(275,726,l),
(172,726,l),
(316,604,l),
(387,604,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,726,l),
(343,726,l),
(231,604,l),
(298,604,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni030B;
layers = (
{
anchors = (
{
name = _top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,706,l),
(294,706,l),
(165,582,l),
(234,582,l)
);
},
{
closed = 1;
nodes = (
(552,706,l),
(467,706,l),
(338,582,l),
(405,582,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 5 3 4 3 1 0 1 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C.alt;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,774,l),
(298,759,l),
(293,564,l),
(349,564,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
2 1 2 0 74 1 1 0 0 118 0 0 0 3 0 3 2 6 22
CALL[ ]	/* CallFunction */";
};
width = 0;
}
);
note = uni030C.alt;
},
{
glyphname = uni0302;
layers = (
{
anchors = (
{
name = _top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(299,683,l),
(393,599,l),
(453,599,l),
(339,726,l),
(261,726,l),
(147,599,l),
(206,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 0 1 76 0 0 1 0 133 3 2 2 1 1 118 0 0 0 6 0 6 17 17 4 7 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = uni030C;
layers = (
{
anchors = (
{
name = _top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(453,730,l),
(392,730,l),
(300,647,l),
(208,730,l),
(147,730,l),
(261,603,l),
(339,603,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 2 0 1 76 1 1 0 2 0 133 3 1 2 2 118 0 0 0 6 0 6 18 17 4 7 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0306;
layers = (
{
anchors = (
{
name = _top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,646,o),
(458,705,q),
(408,717,l),
(397,673,o),
(342,625,o),
(301,625,qs),
(216,625,o),
(193,717,q),
(142,705,l),
(156,646,o),
(240,579,o),
(301,579,qs),
(361,579,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
10 9 4 3 4 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 12 1 12 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni030A;
layers = (
{
anchors = (
{
name = _top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(382,602,o),
(412,653,o),
(412,683,qs),
(412,714,o),
(382,764,o),
(331,794,o),
(300,794,qs),
(269,794,o),
(218,764,o),
(188,714,o),
(188,683,qs),
(188,653,o),
(218,602,o),
(269,572,o),
(300,572,qs),
(331,572,o)
);
},
{
closed = 1;
nodes = (
(230,654,o),
(230,683,qs),
(230,712,o),
(271,753,o),
(300,753,qs),
(329,753,o),
(370,712,o),
(370,683,qs),
(370,654,o),
(329,613,o),
(300,613,qs),
(271,613,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 1 0 3 2 1 3 105 5 1 2 0 0 2 89 5 1 2 2 0 97 4 1 0 2 0 81 17 16 1 0 23 21 16 27 17 27 9 7 0 15 1 15 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = tildecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,664,o),
(231,664,qs),
(252,664,o),
(297,634,o),
(347,604,o),
(375,604,qs),
(443,604,o),
(471,708,q),
(420,718,l),
(410,682,o),
(391,654,o),
(374,654,qs),
(354,654,o),
(309,684,o),
(258,714,o),
(229,714,qs),
(157,714,o),
(129,610,q),
(180,600,l),
(189,635,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
11 1 3 0 1 1 2 1 2 76 10 1 0 74 0 0 0 3 1 0 3 105 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 34 36 34 34 4 7 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
anchors = (
{
name = _top;
pos = (300,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(437,683,l),
(164,683,l),
(164,631,l),
(437,631,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0312;
layers = (
{
anchors = (
{
name = _top;
pos = (298,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(359,790,l),
(306,790,l),
(237,603,l),
(310,603,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0326;
layers = (
{
anchors = (
{
name = _bottom;
pos = (300,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(341,-87,l),
(268,-87,l),
(219,-274,l),
(272,-274,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = uni0327;
layers = (
{
anchors = (
{
name = _bottom;
pos = (300,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,-186,o),
(403,-146,qs),
(403,-111,o),
(350,-68,o),
(306,-66,q),
(321,0,l),
(279,0,l),
(254,-99,l),
(283,-99,ls),
(317,-99,o),
(354,-125,o),
(354,-148,qs),
(354,-172,o),
(320,-200,o),
(289,-200,qs),
(245,-200,o),
(210,-171,q),
(182,-203,l),
(223,-239,o),
(292,-239,qs),
(341,-239,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 10 values pushed */
3 1 1 2 2 1 0 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 4 3 2 3 4 114 0 3 0 2 1 3 2 105 0 1 0 0 1 89 0 1 1 0 97 5 1 0 1 0 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 4 3 2 3 4 2 128 0 3 0 2 1 3 2 105 0 1 0 0 1 89 0 1 1 0 97 5 1 0 1 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 16 15 14 13 12 10 6 4 0 20 1 20 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,-212,q),
(364,-173,l),
(355,-179,o),
(329,-185,o),
(316,-185,qs),
(285,-185,o),
(249,-155,o),
(249,-128,qs),
(249,-97,o),
(299,-35,o),
(353,0,q),
(321,16,l),
(256,-27,o),
(199,-99,o),
(199,-140,qs),
(199,-181,o),
(257,-231,o),
(305,-231,qs),
(348,-231,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 40 values pushed */
17 1 0 1 1 76 16 7 6 3 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 14 12 0 18 1 18 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(261,641,o),
(261,666,qs),
(261,692,o),
(224,728,o),
(198,728,qs),
(172,728,o),
(135,692,o),
(135,666,qs),
(135,641,o),
(172,604,o),
(198,604,qs),
(224,604,o)
);
},
{
closed = 1;
nodes = (
(465,641,o),
(465,666,qs),
(465,692,o),
(428,728,o),
(402,728,qs),
(376,728,o),
(339,692,o),
(339,666,qs),
(339,641,o),
(376,604,o),
(402,604,qs),
(428,604,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 40 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 5 2 4 3 0 1 0 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,641,o),
(363,666,qs),
(363,692,o),
(326,728,o),
(300,728,qs),
(274,728,o),
(237,692,o),
(237,666,qs),
(237,641,o),
(274,604,o),
(300,604,qs),
(326,604,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(275,726,l),
(172,726,l),
(316,604,l),
(387,604,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,726,l),
(343,726,l),
(231,604,l),
(298,604,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = acute;
unicode = 180;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,706,l),
(294,706,l),
(165,582,l),
(234,582,l)
);
},
{
closed = 1;
nodes = (
(552,706,l),
(467,706,l),
(338,582,l),
(405,582,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 5 3 4 3 1 0 1 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(299,683,l),
(393,599,l),
(453,599,l),
(339,726,l),
(261,726,l),
(147,599,l),
(206,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 0 1 76 0 0 1 0 133 3 2 2 1 1 118 0 0 0 6 0 6 17 17 4 7 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(453,730,l),
(392,730,l),
(300,647,l),
(208,730,l),
(147,730,l),
(261,603,l),
(339,603,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 2 0 1 76 1 1 0 2 0 133 3 1 2 2 118 0 0 0 6 0 6 18 17 4 7 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = caron;
unicode = 711;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(445,646,o),
(458,705,q),
(408,717,l),
(397,673,o),
(342,625,o),
(301,625,qs),
(216,625,o),
(193,717,q),
(142,705,l),
(156,646,o),
(240,579,o),
(301,579,qs),
(361,579,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
10 9 4 3 4 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 12 1 12 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = breve;
unicode = 728;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(382,602,o),
(412,653,o),
(412,683,qs),
(412,714,o),
(382,764,o),
(331,794,o),
(300,794,qs),
(269,794,o),
(218,764,o),
(188,714,o),
(188,683,qs),
(188,653,o),
(218,602,o),
(269,572,o),
(300,572,qs),
(331,572,o)
);
},
{
closed = 1;
nodes = (
(230,654,o),
(230,683,qs),
(230,712,o),
(271,753,o),
(300,753,qs),
(329,753,o),
(370,712,o),
(370,683,qs),
(370,654,o),
(329,613,o),
(300,613,qs),
(271,613,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 1 0 3 2 1 3 105 5 1 2 0 0 2 89 5 1 2 2 0 97 4 1 0 2 0 81 17 16 1 0 23 21 16 27 17 27 9 7 0 15 1 15 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,664,o),
(231,664,qs),
(252,664,o),
(297,634,o),
(347,604,o),
(375,604,qs),
(443,604,o),
(471,708,q),
(420,718,l),
(410,682,o),
(391,654,o),
(374,654,qs),
(354,654,o),
(309,684,o),
(258,714,o),
(229,714,qs),
(157,714,o),
(129,610,q),
(180,600,l),
(189,635,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 45 values pushed */
11 1 3 0 1 1 2 1 2 76 10 1 0 74 0 0 0 3 1 0 3 105 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 34 36 34 34 4 7 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(437,683,l),
(164,683,l),
(164,631,l),
(437,631,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = macron;
unicode = 175;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,-186,o),
(403,-146,qs),
(403,-111,o),
(350,-68,o),
(306,-66,q),
(321,0,l),
(279,0,l),
(254,-99,l),
(283,-99,ls),
(317,-99,o),
(354,-125,o),
(354,-148,qs),
(354,-172,o),
(320,-200,o),
(289,-200,qs),
(245,-200,o),
(210,-171,q),
(182,-203,l),
(223,-239,o),
(292,-239,qs),
(341,-239,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 10 values pushed */
3 1 1 2 2 1 0 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 4 3 2 3 4 114 0 3 0 2 1 3 2 105 0 1 0 0 1 89 0 1 1 0 97 5 1 0 1 0 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 4 3 2 3 4 2 128 0 3 0 2 1 3 2 105 0 1 0 0 1 89 0 1 1 0 97 5 1 0 1 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 16 15 14 13 12 10 6 4 0 20 1 20 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,-212,q),
(364,-173,l),
(355,-179,o),
(329,-185,o),
(316,-185,qs),
(285,-185,o),
(249,-155,o),
(249,-128,qs),
(249,-97,o),
(299,-35,o),
(353,0,q),
(321,16,l),
(256,-27,o),
(199,-99,o),
(199,-140,qs),
(199,-181,o),
(257,-231,o),
(305,-231,qs),
(348,-231,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 40 values pushed */
17 1 0 1 1 76 16 7 6 3 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 14 12 0 18 1 18 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = uni02BC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,750,l),
(281,750,l),
(226,519,l),
(283,519,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni02BC;
unicode = 700;
},
{
glyphname = uni02BB;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(226,519,l),
(319,519,l),
(374,750,l),
(317,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni02BB;
unicode = 699;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(492,77,o),
(558,239,o),
(558,350,qs),
(558,462,o),
(492,623,o),
(376,711,o),
(300,711,qs),
(225,711,o),
(108,623,o),
(42,462,o),
(42,350,qs),
(42,239,o),
(108,77,o),
(225,-11,o),
(300,-11,qs),
(376,-11,o)
);
},
{
closed = 1;
nodes = (
(161,573,o),
(244,646,o),
(300,646,qs),
(355,646,o),
(396,611,q),
(158,147,l),
(138,185,o),
(115,288,o),
(115,350,qs),
(115,440,o)
);
},
{
closed = 1;
nodes = (
(204,89,q),
(442,553,l),
(462,515,o),
(485,412,o),
(485,350,qs),
(485,260,o),
(439,127,o),
(356,54,o),
(300,54,qs),
(245,54,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */
34 33 20 19 4 3 2 1 76 0 2 2 1 97 0 1 1 26 77 5 1 3 3 0 97 4 1 0 0 27 0 78 27 26 1 0 26 35 27 35 23 21 9 7 0 15 1 15 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,63,l),
(333,63,l),
(333,700,l),
(288,700,l),
(84,610,l),
(84,544,l),
(261,622,l),
(261,63,l),
(84,63,l),
(84,0,l),
(535,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
5 4 3 3 0 1 1 76 0 1 1 20 77 2 1 0 0 3 95 4 1 3 3 21 3 78 0 0 0 10 0 10 17 20 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(525,63,l),
(164,62,l),
(403,321,ls),
(446,368,o),
(492,435,o),
(510,494,o),
(510,529,qs),
(510,582,o),
(454,664,o),
(356,711,o),
(293,711,qs),
(173,711,o),
(65,612,q),
(107,562,l),
(159,609,o),
(243,647,o),
(292,647,qs),
(356,647,o),
(439,578,o),
(439,525,qs),
(439,485,o),
(404,413,o),
(354,359,qs),
(74,53,l),
(74,0,l),
(525,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
12 11 2 2 0 1 1 3 2 2 76 0 0 0 1 97 0 1 1 26 77 0 2 2 3 95 4 1 3 3 21 3 78 0 0 0 25 0 25 24 36 39 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,41,o),
(531,133,o),
(531,191,qs),
(531,252,o),
(445,344,o),
(374,360,q),
(433,377,o),
(505,464,o),
(505,519,qs),
(505,574,o),
(447,661,o),
(346,711,o),
(282,711,qs),
(146,711,o),
(50,610,q),
(98,562,l),
(142,608,o),
(227,647,o),
(281,647,qs),
(324,647,o),
(393,612,o),
(433,552,o),
(433,515,qs),
(433,459,o),
(362,389,o),
(305,389,qs),
(225,389,l),
(225,327,l),
(308,327,ls),
(374,327,o),
(459,252,o),
(459,193,qs),
(459,131,o),
(362,52,o),
(285,52,qs),
(226,52,o),
(133,91,o),
(89,135,q),
(41,88,l),
(138,-11,o),
(286,-11,qs),
(357,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
26 25 2 3 4 35 1 2 3 3 2 2 1 2 3 76 0 3 0 2 1 3 2 103 0 4 4 5 97 0 5 5 26 77 0 1 1 0 97 6 1 0 0 27 0 78 1 0 29 27 23 21 16 14 13 11 7 5 0 41 1 41 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(478,187,l),
(575,187,l),
(575,250,l),
(478,250,l),
(478,700,l),
(401,700,l),
(29,244,l),
(29,187,l),
(407,187,l),
(407,0,l),
(478,0,l)
);
},
{
closed = 1;
nodes = (
(407,250,l),
(113,250,l),
(407,613,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
13 1 2 1 3 1 0 2 2 76 5 1 2 3 1 0 4 2 0 104 0 1 1 20 77 6 1 4 4 21 4 78 0 0 12 11 0 10 0 10 17 17 18 17 7 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(471,48,o),
(533,152,o),
(533,221,qs),
(533,284,o),
(476,379,o),
(373,432,o),
(304,432,qs),
(263,432,o),
(189,415,o),
(149,395,q),
(160,637,l),
(496,637,l),
(496,700,l),
(98,700,l),
(82,350,l),
(132,334,l),
(173,355,o),
(249,374,o),
(289,374,qs),
(366,374,o),
(461,288,o),
(461,218,qs),
(461,144,o),
(366,51,o),
(289,51,qs),
(232,51,o),
(141,90,o),
(95,133,q),
(50,84,l),
(150,-11,o),
(288,-11,qs),
(361,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
21 1 2 5 16 15 3 2 4 1 2 2 76 0 5 0 2 1 5 2 105 0 4 4 3 95 0 3 3 20 77 0 1 1 0 97 6 1 0 0 27 0 78 1 0 25 23 20 19 18 17 13 11 7 5 0 31 1 31 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(496,50,o),
(558,155,o),
(558,221,qs),
(558,284,o),
(498,383,o),
(392,439,o),
(324,439,qs),
(266,439,o),
(158,383,o),
(119,333,q),
(121,479,o),
(247,646,o),
(355,646,qs),
(390,646,o),
(458,626,o),
(489,608,q),
(525,664,l),
(491,687,o),
(405,711,o),
(361,711,qs),
(267,711,o),
(125,615,o),
(47,442,o),
(47,326,qs),
(47,227,o),
(117,76,o),
(240,-10,o),
(321,-10,qs),
(389,-10,o)
);
},
{
closed = 1;
nodes = (
(442,339,o),
(486,266,o),
(486,219,qs),
(486,172,o),
(443,96,o),
(368,53,o),
(320,53,qs),
(240,53,o),
(132,176,o),
(121,277,q),
(158,325,o),
(259,380,o),
(314,380,qs),
(365,380,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
11 1 2 1 12 1 3 2 32 18 2 5 4 3 76 0 3 7 1 4 5 3 4 105 0 2 2 1 97 0 1 1 26 77 0 5 5 0 97 6 1 0 0 30 0 78 30 29 1 0 36 34 29 42 30 42 22 20 16 14 9 7 0 28 1 28 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,644,l),
(549,700,l),
(51,700,l),
(51,637,l),
(471,637,l),
(123,0,l),
(205,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 0 1 1 76 0 0 0 1 95 0 1 1 20 77 3 1 2 2 21 2 78 0 0 0 6 0 6 17 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(485,41,o),
(549,132,o),
(549,189,qs),
(549,253,o),
(457,352,o),
(384,369,q),
(446,386,o),
(522,474,o),
(522,529,qs),
(522,581,o),
(464,663,o),
(364,711,o),
(300,711,qs),
(237,711,o),
(136,663,o),
(78,581,o),
(78,529,qs),
(78,474,o),
(155,386,o),
(216,369,q),
(143,352,o),
(51,253,o),
(51,189,qs),
(51,132,o),
(116,41,o),
(228,-11,o),
(300,-11,qs),
(372,-11,o)
);
},
{
closed = 1;
nodes = (
(188,433,o),
(148,490,o),
(148,526,qs),
(148,562,o),
(188,620,o),
(257,653,o),
(300,653,qs),
(343,653,o),
(412,620,o),
(452,562,o),
(452,526,qs),
(452,490,o),
(412,433,o),
(343,399,o),
(300,399,qs),
(257,399,o)
);
},
{
closed = 1;
nodes = (
(169,85,o),
(122,151,o),
(122,192,qs),
(122,233,o),
(169,299,o),
(249,337,o),
(300,337,qs),
(351,337,o),
(431,299,o),
(478,233,o),
(478,192,qs),
(478,151,o),
(431,85,o),
(351,47,o),
(300,47,qs),
(249,47,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
21 7 2 5 2 1 76 7 1 2 0 5 4 2 5 105 0 3 3 1 97 0 1 1 26 77 8 1 4 4 0 97 6 1 0 0 27 0 78 45 44 29 28 1 0 53 51 44 59 45 59 37 35 28 43 29 43 15 13 0 27 1 27 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(104,650,o),
(42,546,o),
(42,479,qs),
(42,416,o),
(102,318,o),
(208,261,o),
(276,261,qs),
(334,261,o),
(442,317,o),
(481,367,q),
(479,221,o),
(353,54,o),
(245,54,qs),
(211,54,o),
(142,74,o),
(111,92,q),
(75,36,l),
(109,14,o),
(196,-11,o),
(239,-11,qs),
(334,-11,o),
(475,85,o),
(553,258,o),
(553,374,qs),
(553,473,o),
(483,624,o),
(360,710,o),
(279,710,qs),
(211,710,o)
);
},
{
closed = 1;
nodes = (
(158,361,o),
(114,434,o),
(114,481,qs),
(114,529,o),
(157,604,o),
(233,647,o),
(280,647,qs),
(360,647,o),
(468,524,o),
(479,423,q),
(442,375,o),
(341,320,o),
(286,320,qs),
(236,320,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
32 18 2 4 5 12 1 2 3 11 1 1 2 3 76 7 1 4 0 3 2 4 3 105 0 5 5 0 97 6 1 0 0 26 77 0 2 2 1 97 0 1 1 27 1 78 30 29 1 0 36 34 29 42 30 42 22 20 16 14 9 7 0 28 1 28 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = nine;
unicode = 57;
},
{
glyphname = zero.slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(492,77,o),
(558,239,o),
(558,350,qs),
(558,462,o),
(492,623,o),
(376,711,o),
(300,711,qs),
(225,711,o),
(108,623,o),
(42,462,o),
(42,350,qs),
(42,239,o),
(108,77,o),
(225,-11,o),
(300,-11,qs),
(376,-11,o)
);
},
{
closed = 1;
nodes = (
(161,573,o),
(244,646,o),
(300,646,qs),
(356,646,o),
(439,573,o),
(485,440,o),
(485,350,qs),
(485,260,o),
(439,127,o),
(356,54,o),
(300,54,qs),
(244,54,o),
(161,127,o),
(115,260,o),
(115,350,qs),
(115,440,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 3 3 1 97 0 1 1 26 77 0 2 2 0 97 4 1 0 0 27 0 78 1 0 29 27 21 19 9 7 0 15 1 15 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = zero.slash;
},
{
glyphname = fraction;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(508,700,l),
(452,700,l),
(60,0,l),
(116,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 20 77 2 1 1 1 21 1 78 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = onehalf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,700,l),
(134,700,l),
(61,670,l),
(61,626,l),
(115,647,l),
(115,416,l),
(165,416,l)
);
},
{
closed = 1;
nodes = (
(508,700,l),
(452,700,l),
(60,0,l),
(116,0,l)
);
},
{
closed = 1;
nodes = (
(546,43,l),
(413,43,l),
(495,120,ls),
(521,144,o),
(542,182,o),
(542,205,qs),
(542,240,o),
(487,288,o),
(443,288,qs),
(415,288,o),
(362,264,o),
(338,243,q),
(366,209,l),
(389,230,o),
(423,243,o),
(442,243,qs),
(465,243,o),
(494,219,o),
(494,201,qs),
(494,186,o),
(479,161,o),
(461,144,qs),
(347,36,l),
(347,0,l),
(546,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 88 values pushed */
3 2 1 3 1 0 22 1 6 4 12 1 3 6 3 76 23 1 4 1 75 2 1 0 8 1 1 5 0 1 103 0 5 0 4 6 5 4 106 0 6 3 3 6 87 0 6 6 3 95 10 7 9 3 3 6 3 79 11 11 7 7 0 0 11 35 11 35 34 33 27 25 20 18 7 10 7 10 9 8 0 6 0 6 20 11 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = onequarter;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,700,l),
(134,700,l),
(61,670,l),
(61,626,l),
(115,647,l),
(115,416,l),
(165,416,l)
);
},
{
closed = 1;
nodes = (
(508,700,l),
(452,700,l),
(60,0,l),
(116,0,l)
);
},
{
closed = 1;
nodes = (
(525,68,l),
(559,68,l),
(559,109,l),
(525,109,l),
(525,284,l),
(468,284,l),
(318,109,l),
(318,68,l),
(475,68,l),
(475,0,l),
(525,0,l)
);
},
{
closed = 1;
nodes = (
(475,109,l),
(369,109,l),
(475,232,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 96 values pushed */
3 2 1 3 1 0 24 1 6 5 2 76 14 1 6 1 75 0 5 1 6 1 5 6 128 12 8 11 3 3 4 3 134 2 1 0 10 1 1 5 0 1 103 9 1 6 4 4 6 87 9 1 6 6 4 96 7 1 4 6 4 80 11 11 7 7 0 0 23 22 11 21 11 21 20 19 18 17 16 15 13 12 7 10 7 10 9 8 0 6 0 6 20 13 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = threequarters;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(251,459,o),
(251,496,qs),
(251,522,o),
(214,556,o),
(183,561,q),
(210,568,o),
(243,603,o),
(243,626,qs),
(243,661,o),
(185,705,o),
(141,705,qs),
(113,705,o),
(57,685,o),
(36,665,q),
(67,630,l),
(86,647,o),
(121,660,o),
(140,660,qs),
(162,660,o),
(192,638,o),
(192,620,qs),
(192,601,o),
(162,578,o),
(138,578,qs),
(115,578,l),
(115,538,l),
(143,538,ls),
(169,538,o),
(201,517,o),
(201,498,qs),
(201,479,o),
(167,457,o),
(141,457,qs),
(101,457,o),
(62,487,q),
(32,450,l),
(78,413,o),
(141,413,qs),
(189,413,o)
);
},
{
closed = 1;
nodes = (
(508,700,l),
(452,700,l),
(60,0,l),
(116,0,l)
);
},
{
closed = 1;
nodes = (
(525,68,l),
(559,68,l),
(559,109,l),
(525,109,l),
(525,284,l),
(468,284,l),
(318,109,l),
(318,68,l),
(475,68,l),
(475,0,l),
(525,0,l)
);
},
{
closed = 1;
nodes = (
(475,109,l),
(369,109,l),
(475,232,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
24 1 4 5 23 1 3 4 33 1 2 3 3 1 1 2 2 1 0 1 56 1 10 9 6 76 46 1 10 1 75
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
24 1 4 6 23 1 3 4 33 1 2 3 3 1 1 2 2 1 0 1 56 1 10 9 6 76 46 1 10 1 75
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 9 0 10 0 9 10 128 16 12 15 3 7 8 7 134 6 1 5 0 4 3 5 4 105 0 3 0 2 1 3 2 105 0 1 14 1 0 9 1 0 105 13 1 10 8 8 10 87 13 1 10 10 8 96 11 1 8 10 8 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 68 values pushed */
0 6 5 4 5 6 4 128 0 9 0 10 0 9 10 128 16 12 15 3 7 8 7 134 0 5 0 4 3 5 4 105 0 3 0 2 1 3 2 105 0 1 14 1 0 9 1 0 105 13 1 10 8 8 10 87 13 1 10 10 8 96 11 1 8 10 8 80
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 43 values pushed */
43 43 39 39 1 0 55 54 43 53 43 53 52 51 50 49 48 47 45 44 39 42 39 42 41 40 28 26 21 19 15 13 12 10 6 4 0 38 1 38 17 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = uni2080;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(446,95,o),
(446,175,qs),
(446,255,o),
(365,355,o),
(300,355,qs),
(235,355,o),
(154,255,o),
(154,175,qs),
(154,95,o),
(235,-5,o),
(300,-5,qs),
(365,-5,o)
);
},
{
closed = 1;
nodes = (
(204,113,o),
(204,175,qs),
(204,237,o),
(257,309,o),
(300,309,qs),
(344,309,o),
(396,237,o),
(396,175,qs),
(396,113,o),
(344,41,o),
(300,41,qs),
(257,41,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 97 0 1 1 38 77 5 1 2 2 0 97 4 1 0 0 39 0 78 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2080;
unicode = 8320;
},
{
glyphname = uni2081;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(330,350,l),
(298,350,l),
(186,315,l),
(186,270,l),
(279,298,l),
(279,0,l),
(330,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
3 2 1 3 1 0 1 76 0 0 0 36 77 2 1 1 1 37 1 78 0 0 0 6 0 6 20 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2081;
unicode = 8321;
},
{
glyphname = uni2082;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(408,42,l),
(231,42,l),
(340,144,ls),
(375,176,o),
(403,224,o),
(403,254,qs),
(403,298,o),
(336,355,o),
(283,355,qs),
(249,355,o),
(187,328,o),
(158,302,q),
(187,267,l),
(215,292,o),
(258,310,o),
(282,310,qs),
(313,310,o),
(353,276,o),
(353,250,qs),
(353,229,o),
(332,193,o),
(306,168,qs),
(166,38,l),
(166,0,l),
(408,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
12 11 2 2 0 1 1 3 2 2 76 0 0 0 1 97 0 1 1 38 77 0 2 2 3 95 4 1 3 3 37 3 78 0 0 0 24 0 24 22 37 39 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2082;
unicode = 8322;
},
{
glyphname = uni2083;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(401,52,o),
(401,97,qs),
(401,129,o),
(354,172,o),
(316,179,q),
(350,188,o),
(389,231,o),
(389,259,qs),
(389,301,o),
(321,355,o),
(268,355,qs),
(198,355,o),
(142,307,q),
(173,271,l),
(219,309,o),
(267,309,qs),
(297,309,o),
(337,278,o),
(337,255,qs),
(337,229,o),
(296,195,o),
(264,195,qs),
(236,195,l),
(236,155,l),
(269,155,ls),
(306,155,o),
(350,124,o),
(350,98,qs),
(350,72,o),
(304,40,o),
(268,40,qs),
(243,40,o),
(193,58,o),
(167,78,q),
(137,40,l),
(194,-5,o),
(268,-5,qs),
(327,-5,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
24 23 2 3 4 32 1 2 3 3 1 1 2 3 76 2 1 1 1 75 0 3 0 2 1 3 2 105 0 4 4 5 97 0 5 5 38 77 0 1 1 0 97 6 1 0 0 39 0 78 1 0 27 25 22 20 16 14 13 11 7 5 0 37 1 37 7 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2083;
unicode = 8323;
},
{
glyphname = uni2084;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(393,88,l),
(435,88,l),
(435,130,l),
(393,130,l),
(393,350,l),
(336,350,l),
(145,129,l),
(145,88,l),
(342,88,l),
(342,0,l),
(393,0,l)
);
},
{
closed = 1;
nodes = (
(342,130,l),
(199,130,l),
(342,295,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
13 1 2 1 3 1 0 2 2 76 5 1 2 3 1 0 4 2 0 104 0 1 1 36 77 6 1 4 4 37 4 78 0 0 12 11 0 10 0 10 17 17 18 17 7 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2084;
unicode = 8324;
},
{
glyphname = uni2085;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(416,58,o),
(416,110,qs),
(416,157,o),
(347,217,o),
(288,217,qs),
(253,217,o),
(220,203,q),
(224,308,l),
(397,308,l),
(397,350,l),
(182,350,l),
(174,173,l),
(206,163,l),
(226,171,o),
(263,178,o),
(282,178,qs),
(320,178,o),
(364,140,o),
(364,109,qs),
(364,78,o),
(318,37,o),
(280,37,qs),
(237,37,o),
(182,72,q),
(157,32,l),
(214,-5,o),
(281,-5,qs),
(342,-5,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
20 1 2 5 15 14 3 3 1 2 2 1 0 1 3 76 0 5 0 2 1 5 2 105 0 4 4 3 95 0 3 3 36 77 0 1 1 0 97 6 1 0 0 39 0 78 1 0 23 21 19 18 17 16 12 10 6 4 0 27 1 27 7 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2085;
unicode = 8325;
},
{
glyphname = uni2086;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(437,61,o),
(437,110,qs),
(437,157,o),
(371,215,o),
(319,215,qs),
(288,215,o),
(233,190,o),
(215,168,q),
(215,234,o),
(275,310,o),
(328,310,qs),
(343,310,o),
(381,299,o),
(399,290,q),
(420,333,l),
(379,355,o),
(333,355,qs),
(257,355,o),
(164,251,o),
(164,165,qs),
(164,89,o),
(246,-5,o),
(311,-5,qs),
(366,-5,o)
);
},
{
closed = 1;
nodes = (
(386,138,o),
(386,109,qs),
(386,79,o),
(344,39,o),
(312,39,qs),
(275,39,o),
(225,90,o),
(217,133,q),
(252,176,o),
(305,176,qs),
(341,176,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
8 1 2 1 9 1 3 2 26 15 2 5 4 3 76 0 3 7 1 4 5 3 4 105 0 2 2 1 97 0 1 1 38 77 0 5 5 0 97 6 1 0 0 39 0 78 25 24 1 0 30 28 24 34 25 34 19 17 13 11 7 5 0 23 1 23 8 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2086;
unicode = 8326;
},
{
glyphname = uni2087;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(428,311,l),
(428,350,l),
(159,350,l),
(159,308,l),
(372,308,l),
(199,0,l),
(259,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
5 1 0 1 1 76 0 0 0 1 95 0 1 1 36 77 3 1 2 2 37 2 78 0 0 0 6 0 6 17 17 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2087;
unicode = 8327;
},
{
glyphname = uni2088;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(434,52,o),
(434,95,qs),
(434,126,o),
(392,173,o),
(358,182,q),
(387,191,o),
(421,234,o),
(421,262,qs),
(421,302,o),
(351,355,o),
(300,355,qs),
(249,355,o),
(179,302,o),
(179,262,qs),
(179,234,o),
(214,191,o),
(242,182,q),
(208,173,o),
(166,126,o),
(166,95,qs),
(166,52,o),
(242,-5,o),
(300,-5,qs),
(359,-5,o)
);
},
{
closed = 1;
nodes = (
(229,234,o),
(229,258,qs),
(229,282,o),
(269,314,o),
(300,314,qs),
(331,314,o),
(371,282,o),
(371,258,qs),
(371,234,o),
(331,202,o),
(300,202,qs),
(269,202,o)
);
},
{
closed = 1;
nodes = (
(217,72,o),
(217,99,qs),
(217,126,o),
(264,162,o),
(300,162,qs),
(336,162,o),
(383,126,o),
(383,99,qs),
(383,72,o),
(336,36,o),
(300,36,qs),
(264,36,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
18 6 2 5 2 1 76 7 1 2 0 5 4 2 5 105 0 3 3 1 97 0 1 1 38 77 8 1 4 4 0 97 6 1 0 0 39 0 78 37 36 25 24 1 0 43 41 36 47 37 47 31 29 24 35 25 35 13 11 0 23 1 23 9 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2088;
unicode = 8328;
},
{
glyphname = uni2089;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,290,o),
(176,240,qs),
(176,194,o),
(242,135,o),
(294,135,qs),
(325,135,o),
(380,160,o),
(398,182,q),
(398,116,o),
(338,40,o),
(285,40,qs),
(270,40,o),
(232,51,o),
(214,60,q),
(193,17,l),
(234,-5,o),
(280,-5,qs),
(357,-5,o),
(449,99,o),
(449,185,qs),
(449,261,o),
(367,355,o),
(302,355,qs),
(247,355,o)
);
},
{
closed = 1;
nodes = (
(227,212,o),
(227,241,qs),
(227,271,o),
(269,311,o),
(301,311,qs),
(338,311,o),
(389,260,o),
(396,217,q),
(361,174,o),
(308,174,qs),
(272,174,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
26 15 2 4 5 9 1 2 3 8 1 1 2 3 76 7 1 4 0 3 2 4 3 105 0 5 5 0 97 6 1 0 0 38 77 0 2 2 1 97 0 1 1 39 1 78 25 24 1 0 30 28 24 34 25 34 19 17 13 11 7 5 0 23 1 23 8 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2089;
unicode = 8329;
},
{
glyphname = uni2070;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,350);
ref = uni2080;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 2
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2070;
unicode = 8304;
},
{
glyphname = uni00B9;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,350);
ref = uni2081;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = uni00B2;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,350);
ref = uni2082;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,350);
ref = uni2083;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = uni2074;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,350);
ref = uni2084;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 2
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2074;
unicode = 8308;
},
{
glyphname = uni2075;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,350);
ref = uni2085;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2075;
unicode = 8309;
},
{
glyphname = uni2076;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,350);
ref = uni2086;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 2
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2076;
unicode = 8310;
},
{
glyphname = uni2077;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,350);
ref = uni2087;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2077;
unicode = 8311;
},
{
glyphname = uni2078;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (0,350);
ref = uni2088;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 3
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2078;
unicode = 8312;
},
{
glyphname = uni2079;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(164,639,o),
(164,589,qs),
(164,543,o),
(230,484,o),
(282,484,qs),
(313,484,o),
(368,509,o),
(386,531,q),
(386,465,o),
(326,389,o),
(273,389,qs),
(258,389,o),
(220,400,o),
(202,409,q),
(181,366,l),
(222,344,o),
(268,344,qs),
(345,344,o),
(437,448,o),
(437,534,qs),
(437,610,o),
(355,704,o),
(290,704,qs),
(235,704,o)
);
},
{
closed = 1;
nodes = (
(215,561,o),
(215,590,qs),
(215,620,o),
(257,660,o),
(289,660,qs),
(326,660,o),
(377,609,o),
(384,566,q),
(349,523,o),
(296,523,qs),
(260,523,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
26 15 2 4 5 9 1 2 3 8 1 1 2 3 76 7 1 4 0 3 2 4 3 105 0 5 5 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 25 24 1 0 30 28 24 34 25 34 19 17 13 11 7 5 0 23 1 23 8 9 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2079;
unicode = 8313;
},
{
glyphname = caronSlovak;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(348,737,l),
(272,722,l),
(267,527,l),
(323,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
2 1 2 0 74 1 1 0 0 118 0 0 0 3 0 3 2 6 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = caronSlovak;
},
{
glyphname = commaaccencomb;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(341,-87,l),
(268,-87,l),
(219,-274,l),
(272,-274,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 6 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = commaaccencomb;
},
{
glyphname = cordinal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,377,q),
(449,421,l),
(427,398,o),
(369,373,o),
(340,373,qs),
(303,373,o),
(242,410,o),
(207,474,o),
(207,514,qs),
(207,554,o),
(242,618,o),
(303,655,o),
(340,655,qs),
(369,655,o),
(427,630,o),
(449,607,q),
(488,651,l),
(426,711,o),
(338,711,qs),
(284,711,o),
(197,659,o),
(145,570,o),
(145,514,qs),
(145,459,o),
(197,369,o),
(284,317,o),
(338,317,qs),
(426,317,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
26 25 11 10 4 3 2 1 76 0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 4 1 0 3 0 81 1 0 23 21 15 13 9 7 0 27 1 27 5 6 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = cordinal;
},
{
glyphname = reversequotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(136,750,l),
(227,519,l),
(284,519,l),
(229,750,l)
);
},
{
closed = 1;
nodes = (
(296,750,l),
(387,519,l),
(444,519,l),
(389,750,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
3 1 1 0 1 133 2 1 0 0 118 17 17 17 16 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = reversequotedblleft;
},
{
glyphname = reversequoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(216,750,l),
(307,519,l),
(364,519,l),
(309,750,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 1 0 1 133 0 0 0 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = reversequoteleft;
},
{
glyphname = hyphen_greater.liga;
lastChange = "2025-09-06 11:42:53 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(922,395,ls),
(948,364,o),
(969,351,q),
(129,351,l),
(129,291,l),
(970,291,l),
(952,280,o),
(922,247,qs),
(758,62,l),
(808,18,l),
(1071,321,l),
(808,624,l),
(758,581,l)
);
}
);
width = 1200;
}
);
},
{
glyphname = colon_colon.liga;
lastChange = "2025-09-06 11:43:00 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(399,364,qs),
(431,364,o),
(474,409,o),
(474,473,o),
(431,515,o),
(399,515,qs),
(368,515,o),
(326,473,o),
(326,409,o),
(368,364,o)
);
},
{
closed = 1;
nodes = (
(800,364,qs),
(832,364,o),
(875,409,o),
(875,473,o),
(832,515,o),
(800,515,qs),
(769,515,o),
(727,473,o),
(727,409,o),
(769,364,o)
);
},
{
closed = 1;
nodes = (
(368,-10,o),
(399,-10,qs),
(431,-10,o),
(474,34,o),
(474,66,qs),
(474,97,o),
(431,142,o),
(399,142,qs),
(368,142,o),
(326,97,o),
(326,66,qs),
(326,34,o)
);
},
{
closed = 1;
nodes = (
(769,-10,o),
(800,-10,qs),
(832,-10,o),
(875,34,o),
(875,66,qs),
(875,97,o),
(832,142,o),
(800,142,qs),
(769,142,o),
(727,97,o),
(727,66,qs),
(727,34,o)
);
}
);
width = 1200;
}
);
},
{
glyphname = exclam_equal.liga;
lastChange = "2025-09-06 11:43:07 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(701,443,l),
(853,705,l),
(803,731,l),
(634,443,l),
(115,443,l),
(115,384,l),
(600,384,l),
(525,254,l),
(115,254,l),
(115,195,l),
(490,195,l),
(346,-52,l),
(399,-79,l),
(558,195,l),
(1085,195,l),
(1085,254,l),
(592,254,l),
(667,384,l),
(1085,384,l),
(1085,443,l)
);
}
);
width = 1200;
}
);
},
{
glyphname = exclam_equal_equal.liga;
lastChange = "2025-09-06 11:43:13 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1056,537,l),
(1153,705,l),
(1102,731,l),
(990,537,l),
(114,537,l),
(114,479,l),
(956,479,l),
(880,349,l),
(114,349,l),
(114,290,l),
(845,290,l),
(770,161,l),
(114,161,l),
(114,101,l),
(736,101,l),
(646,-52,l),
(700,-79,l),
(803,101,l),
(1685,101,l),
(1685,161,l),
(838,161,l),
(913,290,l),
(1685,290,l),
(1685,349,l),
(947,349,l),
(1022,479,l),
(1685,479,l),
(1685,537,l)
);
}
);
width = 1800;
}
);
},
{
glyphname = equal_equal.liga;
lastChange = "2025-09-06 11:41:00 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,384,l),
(1085,384,l),
(1085,443,l),
(115,443,l)
);
},
{
closed = 1;
nodes = (
(115,195,l),
(1085,195,l),
(1085,254,l),
(115,254,l)
);
}
);
width = 1200;
}
);
},
{
glyphname = equal_equal_equal.liga;
lastChange = "2025-09-06 11:41:14 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(114,479,l),
(1685,479,l),
(1685,537,l),
(114,537,l)
);
},
{
closed = 1;
nodes = (
(114,290,l),
(1685,290,l),
(1685,349,l),
(114,349,l)
);
},
{
closed = 1;
nodes = (
(114,101,l),
(1685,101,l),
(1685,161,l),
(114,161,l)
);
}
);
width = 1800;
}
);
},
{
glyphname = equal_greater.liga;
lastChange = "2025-09-06 11:41:23 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(849,500,ls),
(881,463,o),
(915,443,q),
(107,443,l),
(107,384,l),
(951,384,l),
(1009,319,l),
(951,254,l),
(107,254,l),
(107,195,l),
(915,195,l),
(881,176,o),
(849,139,qs),
(779,59,l),
(829,16,l),
(1092,319,l),
(829,622,l),
(779,578,l)
);
}
);
width = 1200;
}
);
},
{
glyphname = greater_equal.liga;
lastChange = "2025-09-06 11:41:31 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(878,468,l),
(331,717,l),
(307,662,l),
(819,431,l),
(307,201,l),
(331,146,l),
(878,395,l)
);
},
{
closed = 1;
nodes = (
(345,-84,l),
(892,165,l),
(869,217,l),
(322,-28,l)
);
}
);
width = 1200;
}
);
},
{
glyphname = less_hyphen_greater.liga;
lastChange = "2025-09-06 11:41:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1522,395,ls),
(1548,364,o),
(1569,351,q),
(230,351,l),
(251,364,o),
(277,395,qs),
(442,581,l),
(392,624,l),
(129,321,l),
(392,18,l),
(442,62,l),
(277,247,ls),
(247,280,o),
(229,291,q),
(1570,291,l),
(1552,280,o),
(1522,247,qs),
(1358,62,l),
(1408,18,l),
(1671,321,l),
(1408,624,l),
(1358,581,l)
);
}
);
width = 1800;
}
);
},
{
glyphname = less_equal.liga;
lastChange = "2025-09-06 11:41:51 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,468,l),
(321,395,l),
(868,146,l),
(892,201,l),
(380,431,l),
(892,662,l),
(868,717,l)
);
},
{
closed = 1;
nodes = (
(877,-28,l),
(330,217,l),
(307,165,l),
(854,-84,l)
);
}
);
width = 1200;
}
);
},
{
glyphname = less_equal_greater.liga;
lastChange = "2025-09-06 11:41:58 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1478,500,ls),
(1510,463,o),
(1544,443,q),
(256,443,l),
(288,462,o),
(321,500,qs),
(392,578,l),
(342,622,l),
(79,319,l),
(342,16,l),
(392,59,l),
(321,139,ls),
(288,177,o),
(256,195,q),
(1544,195,l),
(1510,176,o),
(1478,139,qs),
(1408,59,l),
(1458,16,l),
(1721,319,l),
(1458,622,l),
(1408,578,l)
);
},
{
closed = 1;
nodes = (
(220,384,l),
(1580,384,l),
(1638,319,l),
(1580,254,l),
(220,254,l),
(162,319,l)
);
}
);
width = 1800;
}
);
},
{
glyphname = pipe_greater.liga;
lastChange = "2025-09-06 11:42:20 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,-93,l),
(340,-93,l),
(922,282,l),
(922,362,l),
(340,731,l),
(278,731,l)
);
},
{
closed = 1;
nodes = (
(870,321,l),
(340,-18,l),
(340,661,l)
);
}
);
width = 1200;
}
);
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Regular;
properties = (
{
key = postscriptFontName;
value = "RedHatMono-Regular";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Red Hat Mono Regular";
}
);
}
);
}
);
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2024 The Red Hat Project Authors (https://github.com/RedHatOfficial/RedHatFont)";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Pentagram, MCKL";
}
);
},
{
key = designerURL;
value = "https://pentagram.com/,https://www.mckltype.com";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://openfontlicense.org";
}
);
},
{
key = licenseURL;
value = "https://openfontlicense.org";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = MCKL;
}
);
},
{
key = manufacturerURL;
value = "https://www.mckltype.com";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 30;
}
