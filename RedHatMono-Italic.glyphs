{
.appVersion = "3424";
.formatVersion = 3;
customParameters = (
{
name = vendorID;
value = MCKL;
},
{
name = panose;
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
6,
29,
31,
32,
33,
35,
37,
38,
67,
69
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
A,
Aacute,
Abreve,
Acircumflex,
Adieresis,
Agrave,
Amacron,
Aogonek,
Aring,
Atilde,
AE,
B,
C,
Cacute,
Ccaron,
Ccedilla,
Ccircumflex,
Cdotaccent,
D,
Dcaron,
Dcroat,
Eth,
E,
Eacute,
Ebreve,
Ecaron,
Ecircumflex,
Edieresis,
Edotaccent,
Egrave,
Emacron,
Eogonek,
F,
G,
Gbreve,
Gcircumflex,
uni0122,
Gdotaccent,
H,
Hbar,
Hcircumflex,
I,
IJ,
Iacute,
Ibreve,
Icircumflex,
Idieresis,
Idotaccent,
Igrave,
Imacron,
Iogonek,
Itilde,
J,
uni004A0301,
Jcircumflex,
K,
uni0136,
L,
Lacute,
Lcaron,
uni013B,
Lslash,
M,
N,
Nacute,
Ncaron,
uni0145,
Ntilde,
Eng,
O,
Oacute,
Obreve,
Ocircumflex,
Odieresis,
Ograve,
Ohungarumlaut,
Omacron,
Oslash,
Otilde,
OE,
P,
Thorn,
Q,
R,
Racute,
Rcaron,
uni0156,
S,
Sacute,
Scaron,
Scedilla,
Scircumflex,
uni0218,
uni1E9E,
T,
Tbar,
Tcaron,
uni0162,
uni021A,
U,
Uacute,
Ubreve,
Ucircumflex,
Udieresis,
Ugrave,
Uhungarumlaut,
Umacron,
Uogonek,
Uring,
Utilde,
V,
W,
Wacute,
Wcircumflex,
Wdieresis,
Wgrave,
X,
Y,
Yacute,
Ycircumflex,
Ydieresis,
Ygrave,
Z,
Zacute,
Zcaron,
Zdotaccent,
a,
aacute,
abreve,
acircumflex,
adieresis,
agrave,
amacron,
aogonek,
aring,
atilde,
ae,
b,
c,
cacute,
ccaron,
ccedilla,
ccircumflex,
cdotaccent,
d,
dcaron,
dcroat,
eth,
e,
eacute,
ebreve,
ecaron,
ecircumflex,
edieresis,
edotaccent,
egrave,
emacron,
eogonek,
f,
g,
gbreve,
gcircumflex,
uni0123,
gdotaccent,
h,
hbar,
hcircumflex,
i,
dotlessi,
iacute,
ibreve,
icircumflex,
idieresis,
i.loclTRK,
igrave,
imacron,
iogonek,
itilde,
ij,
j,
uni0237,
uni006A0301,
jcircumflex,
k,
uni0137,
kgreenlandic,
l,
lacute,
lcaron,
uni013C,
lslash,
m,
n,
nacute,
ncaron,
uni0146,
ntilde,
eng,
o,
oacute,
obreve,
ocircumflex,
odieresis,
ograve,
ohungarumlaut,
omacron,
oslash,
otilde,
oe,
p,
thorn,
q,
r,
racute,
rcaron,
uni0157,
s,
sacute,
scaron,
scedilla,
scircumflex,
uni0219,
germandbls,
t,
tbar,
tcaron,
uni0163,
uni021B,
u,
uacute,
ubreve,
ucircumflex,
udieresis,
ugrave,
uhungarumlaut,
umacron,
uogonek,
uring,
utilde,
v,
w,
wacute,
wcircumflex,
wdieresis,
wgrave,
x,
y,
yacute,
ycircumflex,
ydieresis,
ygrave,
z,
zacute,
zcaron,
zdotaccent,
g.alt,
gbreve.alt,
gcircumflex.alt,
uni0123.alt,
gdotaccent.alt,
a.school,
aacute.school,
abreve.school,
acircumflex.school,
adieresis.school,
agrave.school,
amacron.school,
aogonek.school,
aring.school,
atilde.school,
ordfeminine,
ordmasculine,
space,
uni00A0,
uni2002,
uni2003,
uni2009,
uni200A,
uni200B,
uniFEFF,
CR,
NULL,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
exclamdown.case,
questiondown.case,
periodcentered.case,
periodcentered.loclCAT,
periodcentered.loclCAT.case,
hyphen,
endash,
emdash,
uni2015,
underscore,
hyphen.case,
endash.case,
emdash.case,
uni2015.case,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
at,
ampersand,
paragraph,
section,
copyright,
registered,
trademark,
degree,
minute,
second,
bar,
brokenbar,
dagger,
daggerdbl,
uniFFFD,
at.case,
cent,
currency,
dollar,
Euro,
sterling,
yen,
uni2215,
plus,
minus,
multiply,
divide,
equal,
notequal,
greater,
less,
plusminus,
asciitilde,
logicalnot,
asciicircum,
uni00B5,
percent,
perthousand,
arrowup,
arrowdown,
uni0308,
uni0307,
gravecomb,
acutecomb,
uni030B,
uni030C.alt,
uni0302,
uni030C,
uni0306,
uni030A,
tildecomb,
uni0304,
uni0312,
uni0326,
uni0327,
uni0328,
dieresis,
dotaccent,
grave,
acute,
hungarumlaut,
circumflex,
caron,
breve,
ring,
tilde,
macron,
cedilla,
ogonek,
uni02BC,
uni02BB,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
zero.slash,
fraction,
onehalf,
onequarter,
threequarters,
uni2080,
uni2081,
uni2082,
uni2083,
uni2084,
uni2085,
uni2086,
uni2087,
uni2088,
uni2089,
uni2070,
uni00B9,
uni00B2,
uni00B3,
uni2074,
uni2075,
uni2076,
uni2077,
uni2078,
uni2079,
caronSlovak,
commabelowcomb,
cordinal,
reversequotedblleft,
reversequoteleft
);
},
{
disabled = 1;
name = isFixedPitch;
value = 1;
}
);
date = "2024-10-14 19:29:26 +0000";
familyName = "Red Hat Mono";
featurePrefixes = (
{
code = "lookup SUB_14 {
	sub hyphen by hyphen.case;
	sub endash by endash.case;
	sub emdash by emdash.case;
	sub uni2015 by uni2015.case;
} SUB_14;
lookup SUB_16 {
	sub hyphen by hyphen.case;
	sub endash by endash.case;
	sub emdash by emdash.case;
	sub uni2015 by uni2015.case;
} SUB_16;
lookup SUB_18 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub i by dotlessi;
	sub j by uni0237;
} SUB_18;
lookup SUB_21 {
	sub A by ordfeminine;
	sub O by ordmasculine;
	sub a by ordfeminine;
	sub o by ordmasculine;
} SUB_21;
";
name = Prefix;
},
{
automatic = 1;
code = "languagesystem DFLT dflt;

languagesystem latn dflt;
languagesystem latn AZE;
languagesystem latn CRT;
languagesystem latn TRK;
languagesystem latn ROM;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature locl;
feature ss01;
feature ss02;
feature case;
feature frac;
feature dnom;
feature subs;
feature numr;
feature sups;
feature zero;
feature calt;
feature sinf;
feature ordn;
";
tag = aalt;
},
{
code = "script latn;
language AZE;
lookup SUB_2 {
	sub i by i.loclTRK;
} SUB_2;
language CRT;
lookup SUB_2;
language TRK;
lookup SUB_2;
language ROM;
lookup SUB_3 {
	sub Scedilla by uni0218;
	sub uni0162 by uni021A;
	sub scedilla by uni0219;
	sub uni0163 by uni021B;
} SUB_3;
";
tag = locl;
},
{
code = "script DFLT;
language dflt;
lookup SUB_4 {
	sub a by a.school;
	sub aacute by aacute.school;
	sub abreve by abreve.school;
	sub acircumflex by acircumflex.school;
	sub adieresis by adieresis.school;
	sub agrave by agrave.school;
	sub amacron by amacron.school;
	sub aogonek by aogonek.school;
	sub aring by aring.school;
	sub atilde by atilde.school;
} SUB_4;
script latn;
language dflt;
lookup SUB_4;
language AZE;
lookup SUB_4;
language CRT;
lookup SUB_4;
language ROM;
lookup SUB_4;
language TRK;
lookup SUB_4;
";
tag = ss01;
},
{
code = "script DFLT;
language dflt;
lookup SUB_5 {
	sub g by g.alt;
	sub gbreve by gbreve.alt;
	sub gcircumflex by gcircumflex.alt;
	sub uni0123 by uni0123.alt;
	sub gdotaccent by gdotaccent.alt;
} SUB_5;
script latn;
language dflt;
lookup SUB_5;
language AZE;
lookup SUB_5;
language CRT;
lookup SUB_5;
language ROM;
lookup SUB_5;
language TRK;
lookup SUB_5;
";
tag = ss02;
},
{
code = "script DFLT;
language dflt;
lookup SUB_6 {
	sub exclamdown by exclamdown.case;
	sub questiondown by questiondown.case;
	sub periodcentered by periodcentered.case;
	sub periodcentered.loclCAT by periodcentered.loclCAT.case;
	sub hyphen by hyphen.case;
	sub endash by endash.case;
	sub emdash by emdash.case;
	sub uni2015 by uni2015.case;
	sub at by at.case;
} SUB_6;
script latn;
language dflt;
lookup SUB_6;
language AZE;
lookup SUB_6;
language CRT;
lookup SUB_6;
language ROM;
lookup SUB_6;
language TRK;
lookup SUB_6;
";
tag = case;
},
{
code = "script DFLT;
language dflt;
lookup SUB_7 {
	sub one slash two by onehalf;
	sub one slash four by onequarter;
	sub three slash four by threequarters;
} SUB_7;
script latn;
language dflt;
lookup SUB_7;
language AZE;
lookup SUB_7;
language CRT;
lookup SUB_7;
language ROM;
lookup SUB_7;
language TRK;
lookup SUB_7;
";
tag = frac;
},
{
code = "script DFLT;
language dflt;
lookup SUB_8 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_8;
script latn;
language dflt;
lookup SUB_8;
language AZE;
lookup SUB_8;
language CRT;
lookup SUB_8;
language ROM;
lookup SUB_8;
language TRK;
lookup SUB_8;
";
tag = dnom;
},
{
code = "script DFLT;
language dflt;
lookup SUB_9 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_9;
script latn;
language dflt;
lookup SUB_9;
language AZE;
lookup SUB_9;
language CRT;
lookup SUB_9;
language ROM;
lookup SUB_9;
language TRK;
lookup SUB_9;
";
tag = subs;
},
{
code = "script DFLT;
language dflt;
lookup SUB_10 {
	sub zero by uni2070;
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
	sub four by uni2074;
	sub five by uni2075;
	sub six by uni2076;
	sub seven by uni2077;
	sub eight by uni2078;
	sub nine by uni2079;
} SUB_10;
script latn;
language dflt;
lookup SUB_10;
language AZE;
lookup SUB_10;
language CRT;
lookup SUB_10;
language ROM;
lookup SUB_10;
language TRK;
lookup SUB_10;
";
tag = numr;
},
{
code = "script DFLT;
language dflt;
lookup SUB_11 {
	sub zero by uni2070;
	sub one by uni00B9;
	sub two by uni00B2;
	sub three by uni00B3;
	sub four by uni2074;
	sub five by uni2075;
	sub six by uni2076;
	sub seven by uni2077;
	sub eight by uni2078;
	sub nine by uni2079;
} SUB_11;
script latn;
language dflt;
lookup SUB_11;
language AZE;
lookup SUB_11;
language CRT;
lookup SUB_11;
language ROM;
lookup SUB_11;
language TRK;
lookup SUB_11;
";
tag = sups;
},
{
code = "script DFLT;
language dflt;
lookup SUB_12 {
	sub zero by zero.slash;
} SUB_12;
script latn;
language dflt;
lookup SUB_12;
language AZE;
lookup SUB_12;
language CRT;
lookup SUB_12;
language ROM;
lookup SUB_12;
language TRK;
lookup SUB_12;
";
tag = zero;
},
{
code = "lookup SUB_CODING{
    sub hyphen greater by hyphen_greater.liga;
	sub colon colon by colon_colon.liga;
	sub exclam equal by exclam_equal.liga;
	sub exclam equal equal by exclam_equal_equal.liga;
	sub bar greater	by pipe_greater.liga;
	sub equal equal by equal_equal.liga;
	sub equal equal equal by equal_equal_equal.liga;
	sub equal greater by equal_greater.liga;
	sub greater equal by greater_equal.liga;
	sub less equal by less_equal.liga;
	sub less hyphen greater by less_hyphen_greater.liga;
	sub less equal greater by less_equal_greater.liga;
} SUB_CODING;
";
tag = liga;
},
{
code = "script DFLT;
language dflt;
lookup SUB_13 {
	@SUB_13_0_0 = [hyphen endash emdash uni2015];
	@SUB_13_0_LA_1 = [hyphen endash emdash uni2015 greater less];
	sub @SUB_13_0_0' lookup SUB_14 @SUB_13_0_LA_1;
	@SUB_13_1_BT_0 = [hyphen endash emdash uni2015 greater less];
	@SUB_13_1_1 = [hyphen endash emdash uni2015];
	sub @SUB_13_1_BT_0 @SUB_13_1_1' lookup SUB_14;
} SUB_13;
lookup SUB_15 {
	@SUB_15_0_BT_0 = [hyphen.case endash.case emdash.case uni2015.case];
	@SUB_15_0_1 = [hyphen endash emdash uni2015];
	sub @SUB_15_0_BT_0 @SUB_15_0_1' lookup SUB_16;
	@SUB_15_1_0 = [hyphen endash emdash uni2015];
	@SUB_15_1_LA_1 = [hyphen.case endash.case emdash.case uni2015.case];
	sub @SUB_15_1_0' lookup SUB_16 @SUB_15_1_LA_1;
} SUB_15;
script latn;
language dflt;
lookup SUB_13;
lookup SUB_15;
language AZE;
lookup SUB_13;
lookup SUB_15;
language CRT;
lookup SUB_13;
lookup SUB_15;
language ROM;
lookup SUB_13;
lookup SUB_15;
language TRK;
lookup SUB_13;
lookup SUB_15;
";
tag = calt;
},
{
code = "script DFLT;
language dflt;
lookup SUB_17 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	@SUB_17_0_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub i' lookup SUB_18 @SUB_17_0_LA_0;
	@SUB_17_1_LA_0 = [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	sub j' lookup SUB_18 @SUB_17_1_LA_0;
} SUB_17;
script latn;
language dflt;
lookup SUB_17;
language AZE;
lookup SUB_17;
language CRT;
lookup SUB_17;
language ROM;
lookup SUB_17;
language TRK;
lookup SUB_17;
";
tag = ccmp;
},
{
code = "script DFLT;
language dflt;
lookup SUB_19 {
	sub zero by uni2080;
	sub one by uni2081;
	sub two by uni2082;
	sub three by uni2083;
	sub four by uni2084;
	sub five by uni2085;
	sub six by uni2086;
	sub seven by uni2087;
	sub eight by uni2088;
	sub nine by uni2089;
} SUB_19;
script latn;
language dflt;
lookup SUB_19;
language AZE;
lookup SUB_19;
language CRT;
lookup SUB_19;
language ROM;
lookup SUB_19;
language TRK;
lookup SUB_19;
";
tag = sinf;
},
{
code = "script DFLT;
language dflt;
lookup SUB_20 {
	@SUB_20_0_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_20_0_BT_0 [A a]' lookup SUB_21;
	@SUB_20_1_BT_0 = [zero one two three four five six seven eight nine];
	sub @SUB_20_1_BT_0 [O o]' lookup SUB_21;
} SUB_20;
script latn;
language dflt;
lookup SUB_20;
language AZE;
lookup SUB_20;
language CRT;
lookup SUB_20;
language ROM;
lookup SUB_20;
language TRK;
lookup SUB_20;
";
tag = ordn;
},
{
code = "script DFLT;
language dflt;
lookup POS_0 {
	markClass uni0327 <anchor 248 0> @POS_0_0_MARK_0;
	markClass uni0328 <anchor 298 0> @POS_0_0_MARK_0;
	pos base A <anchor 532 0> mark @POS_0_0_MARK_0;
	pos base Aacute <anchor 532 0> mark @POS_0_0_MARK_0;
	pos base Abreve <anchor 532 0> mark @POS_0_0_MARK_0;
	pos base Acircumflex <anchor 532 0> mark @POS_0_0_MARK_0;
	pos base Adieresis <anchor 532 0> mark @POS_0_0_MARK_0;
	pos base Agrave <anchor 532 0> mark @POS_0_0_MARK_0;
	pos base Amacron <anchor 532 0> mark @POS_0_0_MARK_0;
	pos base Aring <anchor 532 0> mark @POS_0_0_MARK_0;
	pos base Atilde <anchor 532 0> mark @POS_0_0_MARK_0;
	pos base C <anchor 287 0> mark @POS_0_0_MARK_0;
	pos base Cacute <anchor 287 0> mark @POS_0_0_MARK_0;
	pos base Ccaron <anchor 287 0> mark @POS_0_0_MARK_0;
	pos base Ccircumflex <anchor 287 0> mark @POS_0_0_MARK_0;
	pos base Cdotaccent <anchor 287 0> mark @POS_0_0_MARK_0;
	pos base E <anchor 487 0> mark @POS_0_0_MARK_0;
	pos base Eacute <anchor 487 0> mark @POS_0_0_MARK_0;
	pos base Ebreve <anchor 487 0> mark @POS_0_0_MARK_0;
	pos base Ecaron <anchor 487 0> mark @POS_0_0_MARK_0;
	pos base Ecircumflex <anchor 487 0> mark @POS_0_0_MARK_0;
	pos base Edieresis <anchor 487 0> mark @POS_0_0_MARK_0;
	pos base Edotaccent <anchor 487 0> mark @POS_0_0_MARK_0;
	pos base Egrave <anchor 487 0> mark @POS_0_0_MARK_0;
	pos base Emacron <anchor 487 0> mark @POS_0_0_MARK_0;
	pos base G <anchor 287 0> mark @POS_0_0_MARK_0;
	pos base Gbreve <anchor 287 0> mark @POS_0_0_MARK_0;
	pos base Gcircumflex <anchor 287 0> mark @POS_0_0_MARK_0;
	pos base uni0122 <anchor 287 0> mark @POS_0_0_MARK_0;
	pos base Gdotaccent <anchor 287 0> mark @POS_0_0_MARK_0;
	pos base I <anchor 468 0> mark @POS_0_0_MARK_0;
	pos base Iacute <anchor 468 0> mark @POS_0_0_MARK_0;
	pos base Ibreve <anchor 468 0> mark @POS_0_0_MARK_0;
	pos base Icircumflex <anchor 468 0> mark @POS_0_0_MARK_0;
	pos base Idieresis <anchor 468 0> mark @POS_0_0_MARK_0;
	pos base Idotaccent <anchor 468 0> mark @POS_0_0_MARK_0;
	pos base Igrave <anchor 468 0> mark @POS_0_0_MARK_0;
	pos base Imacron <anchor 468 0> mark @POS_0_0_MARK_0;
	pos base Itilde <anchor 468 0> mark @POS_0_0_MARK_0;
	pos base K <anchor 248 0> mark @POS_0_0_MARK_0;
	pos base uni0136 <anchor 248 0> mark @POS_0_0_MARK_0;
	pos base L <anchor 273 0> mark @POS_0_0_MARK_0;
	pos base Lacute <anchor 273 0> mark @POS_0_0_MARK_0;
	pos base Lcaron <anchor 273 0> mark @POS_0_0_MARK_0;
	pos base uni013B <anchor 273 0> mark @POS_0_0_MARK_0;
	pos base N <anchor 244 0> mark @POS_0_0_MARK_0;
	pos base Nacute <anchor 244 0> mark @POS_0_0_MARK_0;
	pos base Ncaron <anchor 244 0> mark @POS_0_0_MARK_0;
	pos base uni0145 <anchor 244 0> mark @POS_0_0_MARK_0;
	pos base Ntilde <anchor 244 0> mark @POS_0_0_MARK_0;
	pos base R <anchor 254 0> mark @POS_0_0_MARK_0;
	pos base Racute <anchor 254 0> mark @POS_0_0_MARK_0;
	pos base Rcaron <anchor 254 0> mark @POS_0_0_MARK_0;
	pos base uni0156 <anchor 254 0> mark @POS_0_0_MARK_0;
	pos base S <anchor 284 0> mark @POS_0_0_MARK_0;
	pos base Sacute <anchor 284 0> mark @POS_0_0_MARK_0;
	pos base Scaron <anchor 284 0> mark @POS_0_0_MARK_0;
	pos base Scircumflex <anchor 284 0> mark @POS_0_0_MARK_0;
	pos base uni0218 <anchor 284 0> mark @POS_0_0_MARK_0;
	pos base T <anchor 248 0> mark @POS_0_0_MARK_0;
	pos base Tcaron <anchor 248 0> mark @POS_0_0_MARK_0;
	pos base uni021A <anchor 248 0> mark @POS_0_0_MARK_0;
	pos base U <anchor 352 0> mark @POS_0_0_MARK_0;
	pos base Uacute <anchor 352 0> mark @POS_0_0_MARK_0;
	pos base Ubreve <anchor 352 0> mark @POS_0_0_MARK_0;
	pos base Ucircumflex <anchor 352 0> mark @POS_0_0_MARK_0;
	pos base Udieresis <anchor 352 0> mark @POS_0_0_MARK_0;
	pos base Ugrave <anchor 352 0> mark @POS_0_0_MARK_0;
	pos base Uhungarumlaut <anchor 352 0> mark @POS_0_0_MARK_0;
	pos base Umacron <anchor 352 0> mark @POS_0_0_MARK_0;
	pos base Uring <anchor 352 0> mark @POS_0_0_MARK_0;
	pos base Utilde <anchor 352 0> mark @POS_0_0_MARK_0;
	pos base a <anchor 434 0> mark @POS_0_0_MARK_0;
	pos base aacute <anchor 434 0> mark @POS_0_0_MARK_0;
	pos base abreve <anchor 434 0> mark @POS_0_0_MARK_0;
	pos base acircumflex <anchor 434 0> mark @POS_0_0_MARK_0;
	pos base adieresis <anchor 434 0> mark @POS_0_0_MARK_0;
	pos base agrave <anchor 434 0> mark @POS_0_0_MARK_0;
	pos base amacron <anchor 434 0> mark @POS_0_0_MARK_0;
	pos base aring <anchor 434 0> mark @POS_0_0_MARK_0;
	pos base atilde <anchor 434 0> mark @POS_0_0_MARK_0;
	pos base c <anchor 281 0> mark @POS_0_0_MARK_0;
	pos base cacute <anchor 281 0> mark @POS_0_0_MARK_0;
	pos base ccaron <anchor 281 0> mark @POS_0_0_MARK_0;
	pos base ccircumflex <anchor 281 0> mark @POS_0_0_MARK_0;
	pos base cdotaccent <anchor 281 0> mark @POS_0_0_MARK_0;
	pos base e <anchor 358 0> mark @POS_0_0_MARK_0;
	pos base eacute <anchor 358 0> mark @POS_0_0_MARK_0;
	pos base ebreve <anchor 358 0> mark @POS_0_0_MARK_0;
	pos base ecaron <anchor 358 0> mark @POS_0_0_MARK_0;
	pos base ecircumflex <anchor 358 0> mark @POS_0_0_MARK_0;
	pos base edieresis <anchor 358 0> mark @POS_0_0_MARK_0;
	pos base edotaccent <anchor 358 0> mark @POS_0_0_MARK_0;
	pos base egrave <anchor 358 0> mark @POS_0_0_MARK_0;
	pos base emacron <anchor 358 0> mark @POS_0_0_MARK_0;
	pos base i <anchor 441 0> mark @POS_0_0_MARK_0;
	pos base dotlessi <anchor 441 0> mark @POS_0_0_MARK_0;
	pos base iacute <anchor 441 0> mark @POS_0_0_MARK_0;
	pos base ibreve <anchor 441 0> mark @POS_0_0_MARK_0;
	pos base icircumflex <anchor 441 0> mark @POS_0_0_MARK_0;
	pos base idieresis <anchor 441 0> mark @POS_0_0_MARK_0;
	pos base i.loclTRK <anchor 441 0> mark @POS_0_0_MARK_0;
	pos base igrave <anchor 441 0> mark @POS_0_0_MARK_0;
	pos base imacron <anchor 441 0> mark @POS_0_0_MARK_0;
	pos base itilde <anchor 441 0> mark @POS_0_0_MARK_0;
	pos base k <anchor 251 0> mark @POS_0_0_MARK_0;
	pos base uni0137 <anchor 251 0> mark @POS_0_0_MARK_0;
	pos base l <anchor 355 0> mark @POS_0_0_MARK_0;
	pos base lacute <anchor 355 0> mark @POS_0_0_MARK_0;
	pos base lcaron <anchor 355 0> mark @POS_0_0_MARK_0;
	pos base uni013C <anchor 355 0> mark @POS_0_0_MARK_0;
	pos base n <anchor 249 0> mark @POS_0_0_MARK_0;
	pos base nacute <anchor 249 0> mark @POS_0_0_MARK_0;
	pos base ncaron <anchor 249 0> mark @POS_0_0_MARK_0;
	pos base uni0146 <anchor 249 0> mark @POS_0_0_MARK_0;
	pos base ntilde <anchor 249 0> mark @POS_0_0_MARK_0;
	pos base r <anchor 212 0> mark @POS_0_0_MARK_0;
	pos base racute <anchor 212 0> mark @POS_0_0_MARK_0;
	pos base rcaron <anchor 212 0> mark @POS_0_0_MARK_0;
	pos base uni0157 <anchor 212 0> mark @POS_0_0_MARK_0;
	pos base s <anchor 270 0> mark @POS_0_0_MARK_0;
	pos base sacute <anchor 270 0> mark @POS_0_0_MARK_0;
	pos base scaron <anchor 270 0> mark @POS_0_0_MARK_0;
	pos base scircumflex <anchor 270 0> mark @POS_0_0_MARK_0;
	pos base uni0219 <anchor 270 0> mark @POS_0_0_MARK_0;
	pos base t <anchor 317 0> mark @POS_0_0_MARK_0;
	pos base tcaron <anchor 317 0> mark @POS_0_0_MARK_0;
	pos base uni021B <anchor 317 0> mark @POS_0_0_MARK_0;
	pos base u <anchor 449 0> mark @POS_0_0_MARK_0;
	pos base uacute <anchor 449 0> mark @POS_0_0_MARK_0;
	pos base ubreve <anchor 449 0> mark @POS_0_0_MARK_0;
	pos base ucircumflex <anchor 449 0> mark @POS_0_0_MARK_0;
	pos base udieresis <anchor 449 0> mark @POS_0_0_MARK_0;
	pos base ugrave <anchor 449 0> mark @POS_0_0_MARK_0;
	pos base uhungarumlaut <anchor 449 0> mark @POS_0_0_MARK_0;
	pos base umacron <anchor 449 0> mark @POS_0_0_MARK_0;
	pos base uring <anchor 449 0> mark @POS_0_0_MARK_0;
	pos base utilde <anchor 449 0> mark @POS_0_0_MARK_0;
	pos base a.school <anchor 457 0> mark @POS_0_0_MARK_0;
	pos base aacute.school <anchor 457 0> mark @POS_0_0_MARK_0;
	pos base abreve.school <anchor 457 0> mark @POS_0_0_MARK_0;
	pos base acircumflex.school <anchor 457 0> mark @POS_0_0_MARK_0;
	pos base adieresis.school <anchor 457 0> mark @POS_0_0_MARK_0;
	pos base agrave.school <anchor 457 0> mark @POS_0_0_MARK_0;
	pos base amacron.school <anchor 457 0> mark @POS_0_0_MARK_0;
	pos base aring.school <anchor 457 0> mark @POS_0_0_MARK_0;
	pos base atilde.school <anchor 457 0> mark @POS_0_0_MARK_0;
} POS_0;
lookup POS_1 {
	markClass uni0308 <anchor 352 488> @POS_1_0_MARK_0;
	markClass uni0307 <anchor 352 488> @POS_1_0_MARK_0;
	markClass gravecomb <anchor 352 488> @POS_1_0_MARK_0;
	markClass acutecomb <anchor 352 488> @POS_1_0_MARK_0;
	markClass uni030B <anchor 352 488> @POS_1_0_MARK_0;
	markClass uni0302 <anchor 352 488> @POS_1_0_MARK_0;
	markClass uni030C <anchor 352 488> @POS_1_0_MARK_0;
	markClass uni0306 <anchor 352 488> @POS_1_0_MARK_0;
	markClass uni030A <anchor 352 488> @POS_1_0_MARK_0;
	markClass tildecomb <anchor 352 488> @POS_1_0_MARK_0;
	markClass uni0304 <anchor 352 488> @POS_1_0_MARK_0;
	markClass uni0312 <anchor 402 488> @POS_1_0_MARK_0;
	pos base A <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Aacute <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Abreve <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Acircumflex <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Adieresis <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Agrave <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Amacron <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Aring <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Atilde <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base C <anchor 377 700> mark @POS_1_0_MARK_0;
	pos base Cacute <anchor 377 700> mark @POS_1_0_MARK_0;
	pos base Ccaron <anchor 377 700> mark @POS_1_0_MARK_0;
	pos base Ccircumflex <anchor 377 700> mark @POS_1_0_MARK_0;
	pos base Cdotaccent <anchor 377 700> mark @POS_1_0_MARK_0;
	pos base D <anchor 367 700> mark @POS_1_0_MARK_0;
	pos base Dcaron <anchor 367 700> mark @POS_1_0_MARK_0;
	pos base E <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Eacute <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Ebreve <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Ecaron <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Ecircumflex <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Edieresis <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Edotaccent <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Egrave <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Emacron <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base G <anchor 377 700> mark @POS_1_0_MARK_0;
	pos base Gbreve <anchor 377 700> mark @POS_1_0_MARK_0;
	pos base Gcircumflex <anchor 377 700> mark @POS_1_0_MARK_0;
	pos base uni0122 <anchor 377 700> mark @POS_1_0_MARK_0;
	pos base Gdotaccent <anchor 377 700> mark @POS_1_0_MARK_0;
	pos base H <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Hcircumflex <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base I <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Iacute <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Ibreve <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Icircumflex <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Idieresis <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Idotaccent <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Igrave <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Imacron <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Itilde <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base J <anchor 575 700> mark @POS_1_0_MARK_0;
	pos base uni004A0301 <anchor 575 700> mark @POS_1_0_MARK_0;
	pos base Jcircumflex <anchor 575 700> mark @POS_1_0_MARK_0;
	pos base L <anchor 238 700> mark @POS_1_0_MARK_0;
	pos base Lacute <anchor 238 700> mark @POS_1_0_MARK_0;
	pos base Lcaron <anchor 238 700> mark @POS_1_0_MARK_0;
	pos base uni013B <anchor 238 700> mark @POS_1_0_MARK_0;
	pos base N <anchor 406 700> mark @POS_1_0_MARK_0;
	pos base Nacute <anchor 406 700> mark @POS_1_0_MARK_0;
	pos base Ncaron <anchor 406 700> mark @POS_1_0_MARK_0;
	pos base uni0145 <anchor 406 700> mark @POS_1_0_MARK_0;
	pos base Ntilde <anchor 406 700> mark @POS_1_0_MARK_0;
	pos base O <anchor 381 700> mark @POS_1_0_MARK_0;
	pos base Oacute <anchor 381 700> mark @POS_1_0_MARK_0;
	pos base Obreve <anchor 381 700> mark @POS_1_0_MARK_0;
	pos base Ocircumflex <anchor 381 700> mark @POS_1_0_MARK_0;
	pos base Odieresis <anchor 381 700> mark @POS_1_0_MARK_0;
	pos base Ograve <anchor 381 700> mark @POS_1_0_MARK_0;
	pos base Ohungarumlaut <anchor 381 700> mark @POS_1_0_MARK_0;
	pos base Omacron <anchor 381 700> mark @POS_1_0_MARK_0;
	pos base Otilde <anchor 381 700> mark @POS_1_0_MARK_0;
	pos base R <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Racute <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Rcaron <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base uni0156 <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base S <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Sacute <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Scaron <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Scircumflex <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base uni0218 <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base T <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Tcaron <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base uni021A <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base U <anchor 394 700> mark @POS_1_0_MARK_0;
	pos base Uacute <anchor 394 700> mark @POS_1_0_MARK_0;
	pos base Ubreve <anchor 394 700> mark @POS_1_0_MARK_0;
	pos base Ucircumflex <anchor 394 700> mark @POS_1_0_MARK_0;
	pos base Udieresis <anchor 394 700> mark @POS_1_0_MARK_0;
	pos base Ugrave <anchor 394 700> mark @POS_1_0_MARK_0;
	pos base Uhungarumlaut <anchor 394 700> mark @POS_1_0_MARK_0;
	pos base Umacron <anchor 394 700> mark @POS_1_0_MARK_0;
	pos base Uring <anchor 394 700> mark @POS_1_0_MARK_0;
	pos base Utilde <anchor 394 700> mark @POS_1_0_MARK_0;
	pos base W <anchor 399 700> mark @POS_1_0_MARK_0;
	pos base Wacute <anchor 399 700> mark @POS_1_0_MARK_0;
	pos base Wcircumflex <anchor 399 700> mark @POS_1_0_MARK_0;
	pos base Wdieresis <anchor 399 700> mark @POS_1_0_MARK_0;
	pos base Wgrave <anchor 399 700> mark @POS_1_0_MARK_0;
	pos base Y <anchor 396 700> mark @POS_1_0_MARK_0;
	pos base Yacute <anchor 396 700> mark @POS_1_0_MARK_0;
	pos base Ycircumflex <anchor 396 700> mark @POS_1_0_MARK_0;
	pos base Ydieresis <anchor 396 700> mark @POS_1_0_MARK_0;
	pos base Ygrave <anchor 396 700> mark @POS_1_0_MARK_0;
	pos base Z <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Zacute <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Zcaron <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base Zdotaccent <anchor 397 700> mark @POS_1_0_MARK_0;
	pos base a <anchor 332 488> mark @POS_1_0_MARK_0;
	pos base aacute <anchor 332 488> mark @POS_1_0_MARK_0;
	pos base abreve <anchor 332 488> mark @POS_1_0_MARK_0;
	pos base acircumflex <anchor 332 488> mark @POS_1_0_MARK_0;
	pos base adieresis <anchor 332 488> mark @POS_1_0_MARK_0;
	pos base agrave <anchor 332 488> mark @POS_1_0_MARK_0;
	pos base amacron <anchor 332 488> mark @POS_1_0_MARK_0;
	pos base aring <anchor 332 488> mark @POS_1_0_MARK_0;
	pos base atilde <anchor 332 488> mark @POS_1_0_MARK_0;
	pos base c <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base cacute <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base ccaron <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base ccircumflex <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base cdotaccent <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base e <anchor 327 488> mark @POS_1_0_MARK_0;
	pos base eacute <anchor 327 488> mark @POS_1_0_MARK_0;
	pos base ebreve <anchor 327 488> mark @POS_1_0_MARK_0;
	pos base ecaron <anchor 327 488> mark @POS_1_0_MARK_0;
	pos base ecircumflex <anchor 327 488> mark @POS_1_0_MARK_0;
	pos base edieresis <anchor 327 488> mark @POS_1_0_MARK_0;
	pos base edotaccent <anchor 327 488> mark @POS_1_0_MARK_0;
	pos base egrave <anchor 327 488> mark @POS_1_0_MARK_0;
	pos base emacron <anchor 327 488> mark @POS_1_0_MARK_0;
	pos base g <anchor 335 488> mark @POS_1_0_MARK_0;
	pos base gbreve <anchor 335 488> mark @POS_1_0_MARK_0;
	pos base gcircumflex <anchor 335 488> mark @POS_1_0_MARK_0;
	pos base uni0123 <anchor 335 488> mark @POS_1_0_MARK_0;
	pos base gdotaccent <anchor 335 488> mark @POS_1_0_MARK_0;
	pos base h <anchor 232 700> mark @POS_1_0_MARK_0;
	pos base hcircumflex <anchor 232 700> mark @POS_1_0_MARK_0;
	pos base i <anchor 346 488> mark @POS_1_0_MARK_0;
	pos base dotlessi <anchor 346 488> mark @POS_1_0_MARK_0;
	pos base iacute <anchor 346 488> mark @POS_1_0_MARK_0;
	pos base ibreve <anchor 346 488> mark @POS_1_0_MARK_0;
	pos base icircumflex <anchor 346 488> mark @POS_1_0_MARK_0;
	pos base idieresis <anchor 346 488> mark @POS_1_0_MARK_0;
	pos base i.loclTRK <anchor 346 488> mark @POS_1_0_MARK_0;
	pos base igrave <anchor 346 488> mark @POS_1_0_MARK_0;
	pos base imacron <anchor 346 488> mark @POS_1_0_MARK_0;
	pos base itilde <anchor 346 488> mark @POS_1_0_MARK_0;
	pos base uni0237 <anchor 437 488> mark @POS_1_0_MARK_0;
	pos base uni006A0301 <anchor 437 488> mark @POS_1_0_MARK_0;
	pos base jcircumflex <anchor 437 488> mark @POS_1_0_MARK_0;
	pos base l <anchor 372 700> mark @POS_1_0_MARK_0;
	pos base lacute <anchor 372 700> mark @POS_1_0_MARK_0;
	pos base lcaron <anchor 372 700> mark @POS_1_0_MARK_0;
	pos base uni013C <anchor 372 700> mark @POS_1_0_MARK_0;
	pos base n <anchor 363 488> mark @POS_1_0_MARK_0;
	pos base nacute <anchor 363 488> mark @POS_1_0_MARK_0;
	pos base ncaron <anchor 363 488> mark @POS_1_0_MARK_0;
	pos base uni0146 <anchor 363 488> mark @POS_1_0_MARK_0;
	pos base ntilde <anchor 363 488> mark @POS_1_0_MARK_0;
	pos base o <anchor 340 484> mark @POS_1_0_MARK_0;
	pos base oacute <anchor 340 484> mark @POS_1_0_MARK_0;
	pos base obreve <anchor 340 484> mark @POS_1_0_MARK_0;
	pos base ocircumflex <anchor 340 484> mark @POS_1_0_MARK_0;
	pos base odieresis <anchor 340 484> mark @POS_1_0_MARK_0;
	pos base ograve <anchor 340 484> mark @POS_1_0_MARK_0;
	pos base ohungarumlaut <anchor 340 484> mark @POS_1_0_MARK_0;
	pos base omacron <anchor 340 484> mark @POS_1_0_MARK_0;
	pos base otilde <anchor 340 484> mark @POS_1_0_MARK_0;
	pos base r <anchor 425 488> mark @POS_1_0_MARK_0;
	pos base racute <anchor 425 488> mark @POS_1_0_MARK_0;
	pos base rcaron <anchor 425 488> mark @POS_1_0_MARK_0;
	pos base uni0157 <anchor 425 488> mark @POS_1_0_MARK_0;
	pos base s <anchor 312 488> mark @POS_1_0_MARK_0;
	pos base sacute <anchor 312 488> mark @POS_1_0_MARK_0;
	pos base scaron <anchor 312 488> mark @POS_1_0_MARK_0;
	pos base scircumflex <anchor 312 488> mark @POS_1_0_MARK_0;
	pos base uni0219 <anchor 312 488> mark @POS_1_0_MARK_0;
	pos base u <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base uacute <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base ubreve <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base ucircumflex <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base udieresis <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base ugrave <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base uhungarumlaut <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base umacron <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base uring <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base utilde <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base w <anchor 355 488> mark @POS_1_0_MARK_0;
	pos base wacute <anchor 355 488> mark @POS_1_0_MARK_0;
	pos base wcircumflex <anchor 355 488> mark @POS_1_0_MARK_0;
	pos base wdieresis <anchor 355 488> mark @POS_1_0_MARK_0;
	pos base wgrave <anchor 355 488> mark @POS_1_0_MARK_0;
	pos base y <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base yacute <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base ycircumflex <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base ydieresis <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base ygrave <anchor 351 488> mark @POS_1_0_MARK_0;
	pos base z <anchor 355 488> mark @POS_1_0_MARK_0;
	pos base zacute <anchor 355 488> mark @POS_1_0_MARK_0;
	pos base zcaron <anchor 355 488> mark @POS_1_0_MARK_0;
	pos base zdotaccent <anchor 355 488> mark @POS_1_0_MARK_0;
	pos base g.alt <anchor 320 488> mark @POS_1_0_MARK_0;
	pos base gbreve.alt <anchor 320 488> mark @POS_1_0_MARK_0;
	pos base gcircumflex.alt <anchor 320 488> mark @POS_1_0_MARK_0;
	pos base uni0123.alt <anchor 320 488> mark @POS_1_0_MARK_0;
	pos base gdotaccent.alt <anchor 320 488> mark @POS_1_0_MARK_0;
	pos base a.school <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base aacute.school <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base abreve.school <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base acircumflex.school <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base adieresis.school <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base agrave.school <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base amacron.school <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base aring.school <anchor 339 488> mark @POS_1_0_MARK_0;
	pos base atilde.school <anchor 339 488> mark @POS_1_0_MARK_0;
} POS_1;
script latn;
language dflt;
lookup POS_0;
lookup POS_1;
language AZE;
lookup POS_0;
lookup POS_1;
language CRT;
lookup POS_0;
lookup POS_1;
language ROM;
lookup POS_0;
lookup POS_1;
language TRK;
lookup POS_0;
lookup POS_1;
";
tag = mark;
},
{
code = "script DFLT;
language dflt;
lookup POS_2 {
	lookupflag UseMarkFilteringSet [uni0308 uni0307 gravecomb acutecomb uni030B uni0302 uni030C uni0306 uni030A tildecomb uni0304 uni0312];
	markClass uni0308 <anchor 352 488> @POS_2_0_MARK_0;
	markClass uni0307 <anchor 352 488> @POS_2_0_MARK_0;
	markClass gravecomb <anchor 352 488> @POS_2_0_MARK_0;
	markClass acutecomb <anchor 352 488> @POS_2_0_MARK_0;
	markClass uni030B <anchor 352 488> @POS_2_0_MARK_0;
	markClass uni0302 <anchor 352 488> @POS_2_0_MARK_0;
	markClass uni030C <anchor 352 488> @POS_2_0_MARK_0;
	markClass uni0306 <anchor 352 488> @POS_2_0_MARK_0;
	markClass uni030A <anchor 352 488> @POS_2_0_MARK_0;
	markClass tildecomb <anchor 352 488> @POS_2_0_MARK_0;
	markClass uni0304 <anchor 352 488> @POS_2_0_MARK_0;
	markClass uni0312 <anchor 402 488> @POS_2_0_MARK_0;
	pos mark uni0312 <anchor 466 790> mark @POS_2_0_MARK_0;
} POS_2;
script latn;
language dflt;
lookup POS_2;
language AZE;
lookup POS_2;
language CRT;
lookup POS_2;
language ROM;
lookup POS_2;
language TRK;
lookup POS_2;
";
tag = mkmk;
}
);
fontMaster = (
{
customParameters = (
{
name = typoAscender;
value = 1018;
},
{
name = typoDescender;
value = -305;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1018;
},
{
name = winDescent;
value = 305;
},
{
name = hheaAscender;
value = 1018;
},
{
name = hheaDescender;
value = -305;
},
{
name = strikeoutPosition;
value = 317;
},
{
name = strikeoutSize;
value = 50;
},
{
name = underlinePosition;
value = -200;
},
{
name = underlineThickness;
value = 100;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 5 values pushed */
0 0 29 3 0
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 8 values pushed */
42 4 34 4 18 8 3 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 8 values pushed */
46 2 38 2 26 6 3 10
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 10
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 5 values pushed */
2752 2240 1216 3 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 13
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 5 values pushed */
64 64 64 3 11
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
44 2 36 2 20 6 3 14
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
14
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
3
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    71,
    71,
    65,
    65,
    700,
    0,
    732,
    488,
    0,
    \"-209\",
    711,
    \"-11\",
    732,
    496,
    \"-10\",
    \"-219\",
    49,
    49,
    45,
    45,
    350,
    0,
    355,
    \"-5\",
    49,
    49,
    45,
    45,
    700,
    350,
    705,
    345
)";
}
);
id = m01;
metricValues = (
{
pos = 1018;
},
{
pos = 700;
},
{
pos = 488;
},
{
},
{
pos = -305;
},
{
pos = 12;
}
);
name = Italic;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(497,750,l),
(103,750,l),
(103,-100,l),
(497,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 6 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = .notdef;
},
{
glyphname = A;
layers = (
{
anchors = (
{
name = ogonek;
pos = (532,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,195,l),
(431,195,l),
(453,0,l),
(532,0,l),
(447,700,l),
(348,700,l),
(-36,0,l),
(46,0,l)
);
},
{
closed = 1;
nodes = (
(424,256,l),
(184,256,l),
(381,622,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
10 1 4 0 1 76 0 4 0 2 1 4 2 104 0 0 0 20 77 5 3 2 1 1 21 1 78 0 0 9 8 0 7 0 7 17 17 17 6 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = A;
unicode = 65;
},
{
glyphname = Aacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (532,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (45,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
layers = (
{
anchors = (
{
name = ogonek;
pos = (532,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (45,212);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = Acircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (532,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (45,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Adieresis;
layers = (
{
anchors = (
{
name = ogonek;
pos = (532,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (45,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Adieresis;
unicode = 196;
},
{
glyphname = Agrave;
layers = (
{
anchors = (
{
name = ogonek;
pos = (532,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (45,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Amacron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (532,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (45,212);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Amacron;
unicode = 256;
},
{
glyphname = Aogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(151,195,l),
(431,195,l),
(453,0,l),
(472,0,l),
(350,-71,o),
(350,-154,qs),
(350,-189,o),
(402,-232,o),
(445,-232,qs),
(483,-232,o),
(511,-218,q),
(507,-178,l),
(497,-182,o),
(472,-187,o),
(461,-187,qs),
(435,-187,o),
(401,-161,o),
(401,-139,qs),
(401,-71,o),
(532,0,q),
(447,700,l),
(348,700,l),
(-36,0,l),
(46,0,l)
);
},
{
closed = 1;
nodes = (
(424,256,l),
(184,256,l),
(381,622,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
26 1 6 0 11 1 1 3 12 1 2 1 3 76 3 1 3 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 6 0 4 3 6 4 104 0 0 0 20 77 7 5 2 3 3 21 77 0 1 1 2 97 0 2 2 31 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 6 0 4 3 6 4 104 0 1 0 2 1 2 101 0 0 0 20 77 7 5 2 3 3 21 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 25 24 0 23 0 23 17 20 36 37 17 8 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Aogonek;
unicode = 260;
},
{
glyphname = Aring;
layers = (
{
anchors = (
{
name = ogonek;
pos = (532,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (45,212);
ref = uni030A;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Aring;
unicode = 197;
},
{
glyphname = Atilde;
layers = (
{
anchors = (
{
name = ogonek;
pos = (532,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = A;
},
{
alignment = -1;
pos = (45,212);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = AE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(139,170,l),
(283,170,l),
(247,0,l),
(536,0,l),
(550,67,l),
(336,67,l),
(390,320,l),
(527,320,l),
(541,387,l),
(404,387,l),
(456,633,l),
(666,633,l),
(680,700,l),
(350,700,l),
(-30,0,l),
(49,0,l)
);
},
{
closed = 1;
nodes = (
(296,231,l),
(171,231,l),
(379,625,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
18 1 2 1 1 76 0 2 0 3 8 2 3 103 0 8 0 6 4 8 6 103 0 1 1 0 95 0 0 0 20 77 0 4 4 5 95 9 7 2 5 5 21 5 78 0 0 17 16 0 15 0 15 17 17 17 17 17 17 17 10 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = AE;
unicode = 198;
},
{
glyphname = B;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,0,o),
(469,56,o),
(533,155,o),
(533,217,qs),
(533,270,o),
(475,344,o),
(423,360,q),
(492,378,o),
(576,478,o),
(576,545,qs),
(576,617,o),
(477,700,o),
(391,700,qs),
(192,700,l),
(43,0,l),
(285,0,ls)
);
},
{
closed = 1;
nodes = (
(378,634,ls),
(435,634,o),
(499,579,o),
(499,532,qs),
(499,471,o),
(413,394,o),
(344,394,qs),
(204,394,l),
(255,634,l)
);
},
{
closed = 1;
nodes = (
(321,331,ls),
(385,331,o),
(457,271,o),
(457,218,qs),
(457,151,o),
(361,66,o),
(284,66,qs),
(134,66,l),
(190,331,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
8 1 5 2 1 76 0 2 0 5 4 2 5 103 0 3 3 0 95 0 0 0 20 77 0 4 4 1 95 6 1 1 1 21 1 78 0 0 33 31 27 25 24 22 18 16 0 15 0 14 33 7 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = B;
unicode = 66;
},
{
glyphname = C;
layers = (
{
anchors = (
{
name = ogonek;
pos = (287,0);
},
{
name = top;
pos = (377,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(523,103,o),
(563,204,q),
(492,227,l),
(464,146,o),
(357,59,o),
(295,59,qs),
(225,59,o),
(136,181,o),
(136,292,qs),
(136,396,o),
(196,553,o),
(297,641,o),
(357,641,qs),
(419,641,o),
(506,554,o),
(518,473,q),
(593,496,l),
(576,597,o),
(454,711,o),
(361,711,qs),
(301,711,o),
(192,652,o),
(107,540,o),
(58,384,o),
(58,286,qs),
(58,190,o),
(118,57,o),
(224,-11,o),
(291,-11,qs),
(382,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
27 26 13 12 4 3 2 1 76 0 2 2 1 97 0 1 1 26 77 0 3 3 0 97 4 1 0 0 27 0 78 1 0 24 22 17 15 10 8 0 29 1 29 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = C;
unicode = 67;
},
{
glyphname = Cacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (287,0);
},
{
name = top;
pos = (377,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (25,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Cacute;
unicode = 262;
},
{
glyphname = Ccaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (287,0);
},
{
name = top;
pos = (377,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (25,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ccaron;
unicode = 268;
},
{
glyphname = Ccedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,-181,o),
(360,-138,qs),
(360,-109,o),
(317,-69,o),
(279,-66,q),
(303,-11,l),
(390,-6,o),
(525,107,o),
(563,204,q),
(492,227,l),
(464,146,o),
(357,59,o),
(295,59,qs),
(225,59,o),
(136,181,o),
(136,292,qs),
(136,396,o),
(196,553,o),
(297,641,o),
(357,641,qs),
(419,641,o),
(506,554,o),
(518,473,q),
(593,496,l),
(576,597,o),
(454,711,o),
(361,711,qs),
(301,711,o),
(192,652,o),
(107,540,o),
(58,384,o),
(58,286,qs),
(58,153,o),
(172,2,o),
(262,-9,q),
(222,-99,l),
(250,-99,ls),
(280,-99,o),
(314,-123,o),
(314,-144,qs),
(314,-169,o),
(275,-199,o),
(242,-199,qs),
(198,-199,o),
(169,-167,q),
(138,-197,l),
(155,-217,o),
(210,-239,o),
(244,-239,qs),
(294,-239,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
40 39 26 25 4 5 4 44 1 2 6 4 3 2 1 2 3 76 14 1 6 1 75
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 6 1 6 2 114 0 4 4 3 97 0 3 3 26 77 0 5 5 6 97 0 6 6 27 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 6 1 6 2 114 0 4 4 3 97 0 3 3 26 77 0 5 5 6 97 0 6 6 30 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 6 1 6 2 1 128 0 4 4 3 97 0 3 3 26 77 0 5 5 6 97 0 6 6 30 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 6 1 6 2 1 128 0 1 7 1 0 1 0 101 0 4 4 3 97 0 3 3 26 77 0 5 5 6 97 0 6 6 30 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 43 42 37 35 30 28 23 21 13 11 7 5 0 49 1 49 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ccedilla;
unicode = 199;
},
{
glyphname = Ccircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (287,0);
},
{
name = top;
pos = (377,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (25,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ccircumflex;
unicode = 264;
},
{
glyphname = Cdotaccent;
layers = (
{
anchors = (
{
name = ogonek;
pos = (287,0);
},
{
name = top;
pos = (377,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = C;
},
{
alignment = -1;
pos = (25,212);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Cdotaccent;
unicode = 266;
},
{
glyphname = D;
layers = (
{
anchors = (
{
name = top;
pos = (367,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(320,0,o),
(445,63,o),
(538,176,o),
(589,327,o),
(589,415,qs),
(589,512,o),
(521,638,o),
(403,700,o),
(327,700,qs),
(184,700,l),
(35,0,l),
(245,0,ls)
);
},
{
closed = 1;
nodes = (
(513,519,o),
(513,409,qs),
(513,339,o),
(475,215,o),
(404,120,o),
(304,67,o),
(243,67,qs),
(126,67,l),
(247,633,l),
(327,633,ls),
(414,633,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
5 1 2 2 0 95 0 0 0 20 77 0 3 3 1 95 4 1 1 1 21 1 78 13 12 0 0 16 14 12 22 13 22 0 11 0 10 33 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = D;
unicode = 68;
},
{
glyphname = Dcaron;
layers = (
{
anchors = (
{
name = top;
pos = (367,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = D;
},
{
alignment = -1;
pos = (15,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Dcaron;
unicode = 270;
},
{
glyphname = Dcroat;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,0,o),
(440,63,o),
(533,176,o),
(584,327,o),
(584,415,qs),
(584,512,o),
(516,638,o),
(398,700,o),
(322,700,qs),
(189,700,l),
(122,383,l),
(43,383,l),
(29,322,l),
(109,322,l),
(40,0,l),
(240,0,ls)
);
},
{
closed = 1;
nodes = (
(300,322,l),
(313,383,l),
(199,383,l),
(252,633,l),
(322,633,ls),
(409,633,o),
(508,519,o),
(508,409,qs),
(508,339,o),
(470,215,o),
(399,120,o),
(299,67,o),
(238,67,qs),
(131,67,l),
(186,322,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
6 1 1 7 1 0 4 1 0 103 0 5 5 2 95 0 2 2 20 77 0 4 4 3 95 8 1 3 3 21 3 78 0 0 30 29 28 27 26 24 18 16 0 15 0 14 33 17 17 9 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = Eth;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = Dcroat;
}
);
width = 600;
}
);
note = Eth;
unicode = 208;
},
{
glyphname = E;
layers = (
{
anchors = (
{
name = ogonek;
pos = (487,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(501,67,l),
(136,67,l),
(190,320,l),
(431,320,l),
(445,387,l),
(204,387,l),
(257,633,l),
(617,633,l),
(632,700,l),
(194,700,l),
(45,0,l),
(487,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 20 77 0 4 4 5 95 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = E;
unicode = 69;
},
{
glyphname = Eacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (487,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (45,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ebreve;
layers = (
{
anchors = (
{
name = ogonek;
pos = (487,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (45,212);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ebreve;
unicode = 276;
},
{
glyphname = Ecaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (487,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (45,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ecaron;
unicode = 282;
},
{
glyphname = Ecircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (487,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (45,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Edieresis;
layers = (
{
anchors = (
{
name = ogonek;
pos = (487,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (45,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Edieresis;
unicode = 203;
},
{
glyphname = Edotaccent;
layers = (
{
anchors = (
{
name = ogonek;
pos = (487,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (45,212);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Edotaccent;
unicode = 278;
},
{
glyphname = Egrave;
layers = (
{
anchors = (
{
name = ogonek;
pos = (487,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (45,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = Emacron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (487,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = E;
},
{
alignment = -1;
pos = (45,212);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Emacron;
unicode = 274;
},
{
glyphname = Eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(305,-71,o),
(305,-154,qs),
(305,-189,o),
(357,-232,o),
(400,-232,qs),
(438,-232,o),
(466,-218,q),
(462,-178,l),
(452,-182,o),
(427,-187,o),
(416,-187,qs),
(390,-187,o),
(356,-161,o),
(356,-139,qs),
(356,-71,o),
(487,0,q),
(501,67,l),
(136,67,l),
(190,320,l),
(431,320,l),
(445,387,l),
(204,387,l),
(257,633,l),
(617,633,l),
(632,700,l),
(194,700,l),
(45,0,l),
(427,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
19 1 5 7 20 1 6 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 20 77 0 4 4 7 95 8 1 7 7 21 77 0 5 5 6 97 0 6 6 31 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 0 3 4 2 3 103 0 5 0 6 5 6 101 0 1 1 0 95 0 0 0 20 77 0 4 4 7 95 8 1 7 7 21 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 27 0 27 36 37 17 17 17 17 17 9 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Eogonek;
unicode = 280;
},
{
glyphname = F;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,315,l),
(445,315,l),
(459,382,l),
(208,382,l),
(262,633,l),
(627,633,l),
(642,700,l),
(199,700,l),
(50,0,l),
(127,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 2 0 3 4 2 3 103 0 1 1 0 95 0 0 0 20 77 5 1 4 4 21 4 78 0 0 0 9 0 9 17 17 17 17 6 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = F;
unicode = 70;
},
{
glyphname = G;
layers = (
{
anchors = (
{
name = ogonek;
pos = (287,0);
},
{
name = top;
pos = (377,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,73,o),
(572,230,o),
(588,339,qs),
(592,366,l),
(356,366,l),
(341,298,l),
(501,298,l),
(486,226,o),
(425,118,o),
(341,59,o),
(291,59,qs),
(220,59,o),
(133,166,o),
(133,274,qs),
(133,351,o),
(169,484,o),
(232,584,o),
(318,641,o),
(367,641,qs),
(428,641,o),
(512,553,o),
(523,473,q),
(598,487,l),
(587,561,o),
(521,660,o),
(425,711,o),
(369,711,qs),
(305,711,o),
(191,642,o),
(106,520,o),
(57,361,o),
(57,270,qs),
(57,132,o),
(183,-11,o),
(285,-11,qs),
(364,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
13 12 2 5 2 1 76 0 5 0 4 3 5 4 103 0 2 2 1 97 0 1 1 26 77 0 3 3 0 97 6 1 0 0 27 0 78 1 0 31 30 29 28 25 23 17 15 9 7 0 35 1 35 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = G;
unicode = 71;
},
{
glyphname = Gbreve;
layers = (
{
anchors = (
{
name = ogonek;
pos = (287,0);
},
{
name = top;
pos = (377,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (25,212);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Gbreve;
unicode = 286;
},
{
glyphname = Gcircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (287,0);
},
{
name = top;
pos = (377,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (25,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Gcircumflex;
unicode = 284;
},
{
glyphname = uni0122;
layers = (
{
anchors = (
{
name = ogonek;
pos = (287,0);
},
{
name = top;
pos = (377,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (39,0);
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni0122;
unicode = 290;
},
{
glyphname = Gdotaccent;
layers = (
{
anchors = (
{
name = ogonek;
pos = (287,0);
},
{
name = top;
pos = (377,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = G;
},
{
alignment = -1;
pos = (25,212);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Gdotaccent;
unicode = 288;
},
{
glyphname = H;
layers = (
{
anchors = (
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,319,l),
(467,319,l),
(399,0,l),
(476,0,l),
(625,700,l),
(548,700,l),
(481,386,l),
(179,386,l),
(246,700,l),
(169,700,l),
(20,0,l),
(97,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
0 1 0 4 3 1 4 104 2 1 0 0 20 77 6 5 2 3 3 21 3 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = H;
unicode = 72;
},
{
glyphname = Hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(165,319,l),
(467,319,l),
(399,0,l),
(476,0,l),
(587,521,l),
(654,521,l),
(667,582,l),
(600,582,l),
(625,700,l),
(548,700,l),
(523,582,l),
(221,582,l),
(246,700,l),
(169,700,l),
(144,582,l),
(77,582,l),
(64,521,l),
(131,521,l),
(20,0,l),
(97,0,l)
);
},
{
closed = 1;
nodes = (
(510,521,l),
(481,386,l),
(179,386,l),
(208,521,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
5 3 2 1 11 6 2 0 10 1 0 104 0 10 0 8 7 10 8 103 4 1 2 2 20 77 12 9 2 7 7 21 7 78 0 0 23 22 21 20 0 19 0 19 17 17 17 17 17 17 17 17 17 13 7 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Hbar;
unicode = 294;
},
{
glyphname = Hcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = H;
},
{
alignment = -1;
pos = (45,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Hcircumflex;
unicode = 292;
},
{
glyphname = I;
layers = (
{
anchors = (
{
name = ogonek;
pos = (468,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,68,l),
(301,68,l),
(422,632,l),
(602,632,l),
(617,700,l),
(177,700,l),
(162,632,l),
(345,632,l),
(224,68,l),
(42,68,l),
(28,0,l),
(468,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
3 1 1 1 2 95 0 2 2 20 77 4 1 0 0 5 95 6 1 5 5 21 5 78 0 0 0 11 0 11 17 17 17 17 17 7 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = I;
unicode = 73;
},
{
glyphname = IJ;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(509,87,o),
(528,177,qs),
(638,700,l),
(561,700,l),
(453,186,ls),
(439,118,o),
(379,59,o),
(323,59,qs),
(296,59,o),
(247,77,o),
(229,93,q),
(187,37,l),
(207,16,o),
(280,-11,o),
(323,-11,qs),
(409,-11,o)
);
},
{
closed = 1;
nodes = (
(246,700,l),
(169,700,l),
(21,0,l),
(98,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
4 1 1 2 3 1 0 1 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
4 1 1 2 3 1 4 1 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
3 1 2 2 20 77 0 1 1 0 97 6 4 5 3 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 24 values pushed */
3 1 2 2 20 77 6 1 4 4 21 77 0 1 1 0 97 5 1 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
16 16 1 0 16 19 16 19 18 17 12 11 8 6 0 15 1 15 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = IJ;
unicode = 306;
},
{
glyphname = Iacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (468,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (45,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Ibreve;
layers = (
{
anchors = (
{
name = ogonek;
pos = (468,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (45,212);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ibreve;
unicode = 300;
},
{
glyphname = Icircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (468,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (45,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Icircumflex;
unicode = 206;
},
{
glyphname = Idieresis;
layers = (
{
anchors = (
{
name = ogonek;
pos = (468,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (45,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Idieresis;
unicode = 207;
},
{
glyphname = Idotaccent;
layers = (
{
anchors = (
{
name = ogonek;
pos = (468,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (45,212);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Idotaccent;
unicode = 304;
},
{
glyphname = Igrave;
layers = (
{
anchors = (
{
name = ogonek;
pos = (468,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (45,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Imacron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (468,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (45,212);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Imacron;
unicode = 298;
},
{
glyphname = Iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(286,-71,o),
(286,-154,qs),
(286,-189,o),
(338,-232,o),
(381,-232,qs),
(419,-232,o),
(447,-218,q),
(443,-178,l),
(433,-182,o),
(408,-187,o),
(397,-187,qs),
(371,-187,o),
(337,-161,o),
(337,-139,qs),
(337,-71,o),
(468,0,q),
(482,68,l),
(301,68,l),
(422,632,l),
(602,632,l),
(617,700,l),
(177,700,l),
(162,632,l),
(345,632,l),
(224,68,l),
(42,68,l),
(28,0,l),
(408,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
19 1 5 7 20 1 6 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
3 1 1 1 2 95 0 2 2 20 77 4 1 0 0 7 95 8 1 7 7 21 77 0 5 5 6 97 0 6 6 31 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 5 0 6 5 6 101 3 1 1 1 2 95 0 2 2 20 77 4 1 0 0 7 95 8 1 7 7 21 7 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 27 0 27 36 37 17 17 17 17 17 9 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Iogonek;
unicode = 302;
},
{
glyphname = Itilde;
layers = (
{
anchors = (
{
name = ogonek;
pos = (468,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = I;
},
{
alignment = -1;
pos = (45,212);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = J;
layers = (
{
anchors = (
{
name = top;
pos = (575,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(486,107,o),
(513,233,qs),
(613,700,l),
(537,700,l),
(440,248,ls),
(417,141,o),
(323,59,o),
(257,59,qs),
(191,59,o),
(113,139,o),
(101,200,q),
(33,175,l),
(50,86,o),
(166,-11,o),
(253,-11,qs),
(351,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 3 2 1 2 1 76 0 2 2 20 77 0 1 1 0 97 3 1 0 0 27 0 78 1 0 12 11 8 6 0 15 1 15 4 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = J;
unicode = 74;
},
{
glyphname = uni004A0301;
layers = (
{
anchors = (
{
name = top;
pos = (575,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (223,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni004A0301;
},
{
glyphname = Jcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (575,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = J;
},
{
alignment = -1;
pos = (223,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Jcircumflex;
unicode = 308;
},
{
glyphname = K;
layers = (
{
anchors = (
{
name = ogonek;
pos = (248,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,341,l),
(424,0,l),
(520,0,l),
(274,357,l),
(662,700,l),
(564,700,l),
(205,379,l),
(273,700,l),
(196,700,l),
(47,0,l),
(124,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 10 0 10 18 18 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = K;
unicode = 75;
},
{
glyphname = uni0136;
layers = (
{
anchors = (
{
name = ogonek;
pos = (248,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = K;
},
{
alignment = -1;
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni0136;
unicode = 310;
},
{
glyphname = L;
layers = (
{
anchors = (
{
name = ogonek;
pos = (273,0);
},
{
name = top;
pos = (238,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(503,68,l),
(143,68,l),
(278,700,l),
(201,700,l),
(52,0,l),
(489,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 20 77 0 1 1 2 95 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = L;
unicode = 76;
},
{
glyphname = Lacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (273,0);
},
{
name = top;
pos = (238,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (-114,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Lacute;
unicode = 313;
},
{
glyphname = Lcaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (273,0);
},
{
name = top;
pos = (238,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(592,737,l),
(517,722,l),
(468,527,l),
(526,527,l)
);
},
{
closed = 1;
nodes = (
(503,68,l),
(143,68,l),
(278,700,l),
(201,700,l),
(52,0,l),
(489,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
2 1 1 74 4 1 0 1 2 1 0 2 128 0 1 1 20 77 0 2 2 3 95 5 1 3 3 21 3 78 4 4 0 0 4 9 4 9 8 7 6 5 0 3 0 3 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Lcaron;
unicode = 317;
},
{
glyphname = uni013B;
layers = (
{
anchors = (
{
name = ogonek;
pos = (273,0);
},
{
name = top;
pos = (238,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = L;
},
{
alignment = -1;
pos = (25,0);
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni013B;
unicode = 315;
},
{
glyphname = Lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(508,68,l),
(148,68,l),
(197,297,l),
(406,433,l),
(421,514,l),
(214,379,l),
(283,700,l),
(206,700,l),
(126,324,l),
(8,247,l),
(-8,166,l),
(109,242,l),
(57,0,l),
(494,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
8 7 2 1 4 1 0 1 76 0 0 0 20 77 0 1 1 2 95 3 1 2 2 21 2 78 0 0 0 13 0 13 21 21 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Lslash;
unicode = 321;
},
{
glyphname = M;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(205,609,l),
(293,210,l),
(545,601,l),
(418,0,l),
(489,0,l),
(636,700,l),
(540,700,l),
(324,366,l),
(248,700,l),
(156,700,l),
(7,0,l),
(76,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 9 8 3 4 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 17 18 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = M;
unicode = 77;
},
{
glyphname = N;
layers = (
{
anchors = (
{
name = ogonek;
pos = (244,0);
},
{
name = top;
pos = (406,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,599,l),
(397,0,l),
(471,0,l),
(620,700,l),
(552,700,l),
(433,124,l),
(260,700,l),
(174,700,l),
(25,0,l),
(93,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
8 3 2 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 9 0 9 17 18 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = N;
unicode = 78;
},
{
glyphname = Nacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (244,0);
},
{
name = top;
pos = (406,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (54,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Nacute;
unicode = 323;
},
{
glyphname = Ncaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (244,0);
},
{
name = top;
pos = (406,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (54,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ncaron;
unicode = 327;
},
{
glyphname = uni0145;
layers = (
{
anchors = (
{
name = ogonek;
pos = (244,0);
},
{
name = top;
pos = (406,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (-4,0);
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni0145;
unicode = 325;
},
{
glyphname = Ntilde;
layers = (
{
anchors = (
{
name = ogonek;
pos = (244,0);
},
{
name = top;
pos = (406,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = N;
},
{
alignment = -1;
pos = (54,212);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ntilde;
unicode = 209;
},
{
glyphname = Eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(440,-144,o),
(455,-73,qs),
(620,700,l),
(550,700,l),
(431,130,l),
(262,700,l),
(174,700,l),
(25,0,l),
(95,0,l),
(218,587,l),
(398,-18,l),
(389,-63,ls),
(379,-112,o),
(334,-154,o),
(299,-154,qs),
(282,-154,o),
(244,-145,o),
(222,-138,q),
(209,-201,l),
(230,-211,o),
(282,-219,o),
(303,-219,qs),
(370,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
17 12 2 2 3 11 4 2 1 2 3 1 0 1 3 76 4 1 3 3 20 77 0 2 2 21 77 0 1 1 0 97 5 1 0 0 31 0 78 1 0 19 18 16 15 14 13 8 6 0 22 1 22 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Eng;
unicode = 330;
},
{
glyphname = O;
layers = (
{
anchors = (
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(452,56,o),
(538,176,o),
(588,336,o),
(588,430,qs),
(588,523,o),
(529,648,o),
(428,711,o),
(364,711,qs),
(303,711,o),
(192,644,o),
(106,524,o),
(56,364,o),
(56,270,qs),
(56,177,o),
(115,52,o),
(216,-11,o),
(280,-11,qs),
(341,-11,o)
);
},
{
closed = 1;
nodes = (
(132,171,o),
(132,274,qs),
(132,351,o),
(169,484,o),
(233,584,o),
(316,641,o),
(362,641,qs),
(428,641,o),
(512,530,o),
(512,426,qs),
(512,350,o),
(475,216,o),
(409,116,o),
(325,59,o),
(278,59,qs),
(214,59,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 97 0 1 1 26 77 5 1 2 2 0 97 4 1 0 0 27 0 78 19 18 1 0 27 25 18 33 19 33 10 8 0 17 1 17 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = O;
unicode = 79;
},
{
glyphname = Oacute;
layers = (
{
anchors = (
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (29,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Obreve;
layers = (
{
anchors = (
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (29,212);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Obreve;
unicode = 334;
},
{
glyphname = Ocircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (29,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Odieresis;
layers = (
{
anchors = (
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (29,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Odieresis;
unicode = 214;
},
{
glyphname = Ograve;
layers = (
{
anchors = (
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (29,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Ohungarumlaut;
layers = (
{
anchors = (
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (29,212);
ref = uni030B;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ohungarumlaut;
unicode = 336;
},
{
glyphname = Omacron;
layers = (
{
anchors = (
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (29,212);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Omacron;
unicode = 332;
},
{
glyphname = Oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(114,67,l),
(145,28,o),
(230,-11,o),
(280,-11,qs),
(341,-11,o),
(452,56,o),
(538,176,o),
(588,336,o),
(588,430,qs),
(588,515,o),
(562,578,q),
(669,700,l),
(589,700,l),
(530,633,l),
(500,672,o),
(414,711,o),
(364,711,qs),
(303,711,o),
(192,644,o),
(106,524,o),
(56,364,o),
(56,270,qs),
(56,182,o),
(83,122,q),
(-24,0,l),
(56,0,l)
);
},
{
closed = 1;
nodes = (
(169,484,o),
(233,584,o),
(316,641,o),
(362,641,qs),
(437,641,o),
(478,573,q),
(141,189,l),
(132,227,o),
(132,274,qs),
(132,351,o)
);
},
{
closed = 1;
nodes = (
(166,125,q),
(503,510,l),
(512,473,o),
(512,426,qs),
(512,350,o),
(475,216,o),
(409,116,o),
(325,59,o),
(278,59,qs),
(206,59,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
44 43 29 28 24 14 11 1 8 5 4 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 4 4 0 97 1 1 0 0 26 77 7 1 5 5 2 97 6 3 2 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 1 1 20 77 0 4 4 0 97 0 0 0 26 77 6 1 3 3 21 77 7 1 5 5 2 97 0 2 2 27 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
37 36 0 0 36 45 37 45 32 30 0 25 0 25 39 19 39 8 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Oslash;
unicode = 216;
},
{
glyphname = Otilde;
layers = (
{
anchors = (
{
name = top;
pos = (381,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = O;
},
{
alignment = -1;
pos = (29,212);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = OE;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(547,67,l),
(331,67,l),
(385,320,l),
(524,320,l),
(538,387,l),
(399,387,l),
(451,633,l),
(664,633,l),
(678,700,l),
(393,700,ls),
(315,700,o),
(186,637,o),
(93,521,o),
(42,364,o),
(42,270,qs),
(42,136,o),
(183,0,o),
(301,0,qs),
(533,0,l)
);
},
{
closed = 1;
nodes = (
(118,188,o),
(118,274,qs),
(118,374,o),
(182,533,o),
(298,629,o),
(376,633,q),
(256,70,l),
(190,82,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
0 3 0 4 5 3 4 103 6 1 2 2 1 95 0 1 1 20 77 0 5 5 0 95 7 1 0 0 21 0 78 1 0 21 20 17 16 15 14 13 12 11 10 9 7 0 18 1 18 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = OE;
unicode = 338;
},
{
glyphname = P;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(181,286,l),
(351,286,ls),
(422,286,o),
(533,346,o),
(596,452,o),
(596,520,qs),
(596,603,o),
(490,700,o),
(399,700,qs),
(192,700,l),
(43,0,l),
(120,0,l)
);
},
{
closed = 1;
nodes = (
(386,633,ls),
(449,633,o),
(521,571,o),
(521,516,qs),
(521,443,o),
(425,353,o),
(348,353,qs),
(195,353,l),
(255,633,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
0 3 0 1 2 3 1 103 0 4 4 0 95 0 0 0 20 77 5 1 2 2 21 2 78 0 0 20 18 14 12 0 11 0 11 37 33 6 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = P;
unicode = 80;
},
{
glyphname = Thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(150,143,l),
(340,143,ls),
(411,143,o),
(522,203,o),
(585,309,o),
(585,377,qs),
(585,460,o),
(479,557,o),
(388,557,qs),
(239,557,l),
(269,700,l),
(192,700,l),
(43,0,l),
(120,0,l)
);
},
{
closed = 1;
nodes = (
(375,490,ls),
(438,490,o),
(510,428,o),
(510,373,qs),
(510,300,o),
(414,210,o),
(337,210,qs),
(165,210,l),
(224,490,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 0 5 4 1 5 104 0 4 0 2 3 4 2 103 0 0 0 20 77 6 1 3 3 21 3 78 0 0 22 20 16 14 0 13 0 13 37 33 17 7 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Thorn;
unicode = 222;
},
{
glyphname = Q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(410,31,q),
(439,-16,l),
(516,-11,l),
(462,76,l),
(518,135,o),
(588,319,o),
(588,430,qs),
(588,523,o),
(529,648,o),
(428,711,o),
(364,711,qs),
(303,711,o),
(192,644,o),
(106,524,o),
(56,364,o),
(56,270,qs),
(56,177,o),
(115,52,o),
(216,-11,o),
(280,-11,qs),
(348,-11,o)
);
},
{
closed = 1;
nodes = (
(132,171,o),
(132,274,qs),
(132,351,o),
(169,484,o),
(233,584,o),
(316,641,o),
(362,641,qs),
(428,641,o),
(512,530,o),
(512,426,qs),
(512,339,o),
(464,190,o),
(423,140,q),
(370,226,l),
(294,222,l),
(373,92,l),
(351,76,o),
(304,59,o),
(278,59,qs),
(214,59,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
27 24 16 3 3 4 19 1 0 3 2 76 0 4 5 3 5 4 3 128 0 5 5 1 97 0 1 1 26 77 7 1 3 3 0 98 2 6 2 0 0 27 0 78 22 21 1 0 34 32 26 25 21 40 22 40 18 17 10 8 0 20 1 20 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Q;
unicode = 81;
},
{
glyphname = R;
layers = (
{
anchors = (
{
name = ogonek;
pos = (254,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(191,299,l),
(322,299,l),
(419,0,l),
(499,0,l),
(398,305,l),
(480,322,o),
(581,441,o),
(581,523,qs),
(581,604,o),
(476,700,o),
(387,700,qs),
(199,700,l),
(50,0,l),
(127,0,l)
);
},
{
closed = 1;
nodes = (
(376,632,ls),
(436,632,o),
(506,571,o),
(506,518,qs),
(506,473,o),
(463,403,o),
(387,363,o),
(338,363,qs),
(204,363,l),
(262,632,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
8 1 2 4 1 76 0 4 0 2 1 4 2 103 0 5 5 0 95 0 0 0 20 77 6 3 2 1 1 21 1 78 0 0 23 21 16 14 0 13 0 13 17 22 33 7 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = R;
unicode = 82;
},
{
glyphname = Racute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (254,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (45,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Racute;
unicode = 340;
},
{
glyphname = Rcaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (254,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (45,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Rcaron;
unicode = 344;
},
{
glyphname = uni0156;
layers = (
{
anchors = (
{
name = ogonek;
pos = (254,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = R;
},
{
alignment = -1;
pos = (6,0);
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni0156;
unicode = 342;
},
{
glyphname = S;
layers = (
{
anchors = (
{
name = ogonek;
pos = (284,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,40,o),
(531,134,o),
(531,198,qs),
(531,247,o),
(495,312,o),
(437,355,o),
(367,384,o),
(297,410,o),
(239,442,o),
(203,490,o),
(203,527,qs),
(203,577,o),
(281,646,o),
(352,646,qs),
(404,646,o),
(512,598,o),
(561,551,q),
(607,607,l),
(550,662,o),
(418,711,o),
(350,711,qs),
(282,711,o),
(182,661,o),
(129,575,o),
(129,521,qs),
(129,472,o),
(164,407,o),
(222,365,o),
(292,336,o),
(361,310,o),
(419,278,o),
(454,230,o),
(454,192,qs),
(454,151,o),
(412,89,o),
(341,55,o),
(297,55,qs),
(239,55,o),
(121,115,o),
(79,170,q),
(27,121,l),
(73,58,o),
(218,-11,o),
(295,-11,qs),
(361,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
27 26 4 3 4 1 3 1 76 0 3 3 2 97 0 2 2 26 77 0 1 1 0 97 4 1 0 0 27 0 78 1 0 31 29 24 22 8 6 0 44 1 44 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = S;
unicode = 83;
},
{
glyphname = Sacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (284,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (45,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Sacute;
unicode = 346;
},
{
glyphname = Scaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (284,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (45,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Scaron;
unicode = 352;
},
{
glyphname = Scedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(357,-181,o),
(357,-138,qs),
(357,-109,o),
(314,-69,o),
(276,-66,q),
(300,-11,l),
(363,-11,o),
(468,40,o),
(531,134,o),
(531,198,qs),
(531,247,o),
(495,312,o),
(437,355,o),
(367,384,o),
(297,410,o),
(239,442,o),
(203,490,o),
(203,527,qs),
(203,577,o),
(281,646,o),
(352,646,qs),
(404,646,o),
(512,598,o),
(561,551,q),
(607,607,l),
(550,662,o),
(418,711,o),
(350,711,qs),
(282,711,o),
(182,661,o),
(129,575,o),
(129,521,qs),
(129,472,o),
(164,407,o),
(222,365,o),
(292,336,o),
(361,310,o),
(419,278,o),
(454,230,o),
(454,192,qs),
(454,151,o),
(412,89,o),
(341,55,o),
(297,55,qs),
(239,55,o),
(121,115,o),
(79,170,q),
(27,121,l),
(68,66,o),
(191,-1,o),
(259,-9,q),
(219,-99,l),
(247,-99,ls),
(277,-99,o),
(311,-123,o),
(311,-144,qs),
(311,-169,o),
(272,-199,o),
(239,-199,qs),
(195,-199,o),
(166,-167,q),
(135,-197,l),
(152,-217,o),
(207,-239,o),
(241,-239,qs),
(291,-239,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
41 40 18 17 4 3 5 14 1 6 3 60 1 2 6 4 3 2 1 2 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
14
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 6 1 6 2 114 0 5 5 4 97 0 4 4 26 77 0 3 3 6 97 0 6 6 27 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 6 1 6 2 1 128 0 5 5 4 97 0 4 4 26 77 0 3 3 6 97 0 6 6 27 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 6 1 6 2 1 128 0 1 7 1 0 1 0 101 0 5 5 4 97 0 4 4 26 77 0 3 3 6 97 0 6 6 27 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 59 58 45 43 38 36 22 20 13 11 7 5 0 65 1 65 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Scedilla;
unicode = 350;
},
{
glyphname = Scircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (284,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (45,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Scircumflex;
unicode = 348;
},
{
glyphname = uni0218;
layers = (
{
anchors = (
{
name = ogonek;
pos = (284,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = S;
},
{
alignment = -1;
pos = (36,0);
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni0218;
unicode = 536;
},
{
glyphname = uni1E9E;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(464,18,o),
(532,72,o),
(574,148,o),
(574,194,qs),
(574,234,o),
(534,299,o),
(490,323,qs),
(445,348,o),
(414,373,o),
(414,386,qs),
(414,410,o),
(463,458,qs),
(619,611,l),
(638,700,l),
(177,700,l),
(28,0,l),
(105,0,l),
(240,636,l),
(553,636,l),
(405,485,ls),
(377,456,o),
(337,405,o),
(337,373,qs),
(337,348,o),
(379,306,o),
(425,278,qs),
(464,255,o),
(496,216,o),
(496,189,qs),
(496,144,o),
(451,85,o),
(387,55,o),
(357,55,qs),
(320,55,o),
(256,85,o),
(232,110,q),
(180,51,l),
(209,23,o),
(295,-11,o),
(344,-11,qs),
(383,-11,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 10 values pushed */
4 1 1 2 3 1 0 1 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
4 1 1 2 3 1 3 1 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 4 95 0 4 4 20 77 0 1 1 0 97 3 5 2 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 2 2 4 95 0 4 4 20 77 0 3 3 21 77 0 1 1 0 97 5 1 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 26 25 24 23 22 21 8 6 0 40 1 40 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni1E9E;
unicode = 7838;
},
{
glyphname = T;
layers = (
{
anchors = (
{
name = ogonek;
pos = (248,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(422,632,l),
(652,632,l),
(667,700,l),
(127,700,l),
(112,632,l),
(345,632,l),
(210,0,l),
(287,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 1 95 0 1 1 20 77 4 1 3 3 21 3 78 0 0 0 7 0 7 17 17 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = T;
unicode = 84;
},
{
glyphname = Tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,312,l),
(507,312,l),
(520,373,l),
(367,373,l),
(422,632,l),
(652,632,l),
(667,700,l),
(127,700,l),
(112,632,l),
(345,632,l),
(290,373,l),
(136,373,l),
(123,312,l),
(277,312,l),
(210,0,l),
(287,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
5 1 1 6 1 0 7 1 0 103 4 1 2 2 3 95 0 3 3 20 77 8 1 7 7 21 7 78 0 0 0 15 0 15 17 17 17 17 17 17 17 9 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Tbar;
unicode = 358;
},
{
glyphname = Tcaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (248,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
pos = (45,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Tcaron;
unicode = 356;
},
{
glyphname = uni0162;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(183,-99,l),
(211,-99,ls),
(241,-99,o),
(275,-123,o),
(275,-144,qs),
(275,-169,o),
(236,-199,o),
(203,-199,qs),
(159,-199,o),
(130,-167,q),
(99,-197,l),
(116,-217,o),
(171,-239,o),
(205,-239,qs),
(255,-239,o),
(321,-181,o),
(321,-138,qs),
(321,-109,o),
(278,-69,o),
(240,-66,q),
(269,0,l),
(287,0,l),
(422,632,l),
(652,632,l),
(667,700,l),
(127,700,l),
(112,632,l),
(345,632,l),
(210,0,l),
(227,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
9 1 6 3 19 18 2 5 6 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 6 3 5 3 6 5 128 2 1 0 0 1 95 0 1 1 20 77 8 7 2 3 3 21 77 0 5 5 4 97 0 4 4 31 4 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 6 3 5 3 6 5 128 0 5 0 4 5 4 101 2 1 0 0 1 95 0 1 1 20 77 8 7 2 3 3 21 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 29 0 29 36 36 38 17 17 17 17 9 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni0162;
unicode = 354;
},
{
glyphname = uni021A;
layers = (
{
anchors = (
{
name = ogonek;
pos = (248,0);
},
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = T;
},
{
alignment = -1;
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni021A;
unicode = 538;
},
{
glyphname = U;
layers = (
{
anchors = (
{
name = ogonek;
pos = (352,0);
},
{
name = top;
pos = (394,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(514,121,o),
(539,236,qs),
(638,700,l),
(561,700,l),
(464,246,ls),
(445,156,o),
(353,59,o),
(273,59,qs),
(192,59,o),
(120,168,o),
(139,259,qs),
(233,700,l),
(156,700,l),
(64,270,ls),
(45,180,o),
(88,54,o),
(195,-11,o),
(273,-11,qs),
(386,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 20 77 0 2 2 0 97 4 1 0 0 27 0 78 1 0 15 14 11 9 6 5 0 18 1 18 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (352,0);
},
{
name = top;
pos = (394,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (42,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ubreve;
layers = (
{
anchors = (
{
name = ogonek;
pos = (352,0);
},
{
name = top;
pos = (394,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (42,212);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ubreve;
unicode = 364;
},
{
glyphname = Ucircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (352,0);
},
{
name = top;
pos = (394,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (42,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ucircumflex;
unicode = 219;
},
{
glyphname = Udieresis;
layers = (
{
anchors = (
{
name = ogonek;
pos = (352,0);
},
{
name = top;
pos = (394,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (42,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Udieresis;
unicode = 220;
},
{
glyphname = Ugrave;
layers = (
{
anchors = (
{
name = ogonek;
pos = (352,0);
},
{
name = top;
pos = (394,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (42,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uhungarumlaut;
layers = (
{
anchors = (
{
name = ogonek;
pos = (352,0);
},
{
name = top;
pos = (394,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (42,212);
ref = uni030B;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Uhungarumlaut;
unicode = 368;
},
{
glyphname = Umacron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (352,0);
},
{
name = top;
pos = (394,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (42,212);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Umacron;
unicode = 362;
},
{
glyphname = Uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(331,-218,q),
(327,-178,l),
(317,-182,o),
(292,-187,o),
(281,-187,qs),
(255,-187,o),
(221,-161,o),
(221,-139,qs),
(221,-71,o),
(349,-2,q),
(426,18,o),
(519,142,o),
(539,236,qs),
(638,700,l),
(561,700,l),
(464,246,ls),
(445,156,o),
(353,59,o),
(273,59,qs),
(192,59,o),
(120,168,o),
(139,259,qs),
(233,700,l),
(156,700,l),
(64,270,ls),
(45,180,o),
(88,54,o),
(196,-11,o),
(274,-11,q),
(170,-78,o),
(170,-154,qs),
(170,-189,o),
(222,-232,o),
(265,-232,qs),
(303,-232,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
32 1 5 1 33 1 0 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
4 1 2 2 20 77 0 3 3 1 97 0 1 1 27 77 0 5 5 0 97 6 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
0 5 6 1 0 5 0 101 4 1 2 2 20 77 0 3 3 1 97 0 1 1 27 1 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 30 28 20 19 16 14 11 10 6 5 0 34 1 34 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Uogonek;
unicode = 370;
},
{
glyphname = Uring;
layers = (
{
anchors = (
{
name = ogonek;
pos = (352,0);
},
{
name = top;
pos = (394,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (42,212);
ref = uni030A;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Uring;
unicode = 366;
},
{
glyphname = Utilde;
layers = (
{
anchors = (
{
name = ogonek;
pos = (352,0);
},
{
name = top;
pos = (394,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = U;
},
{
alignment = -1;
pos = (42,212);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = V;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(681,700,l),
(599,700,l),
(264,78,l),
(192,700,l),
(113,700,l),
(198,0,l),
(297,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
3 1 2 0 1 76 1 1 0 0 20 77 3 1 2 2 21 2 78 0 0 0 6 0 6 18 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = V;
unicode = 86;
},
{
glyphname = W;
layers = (
{
anchors = (
{
name = top;
pos = (399,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(371,573,l),
(366,0,l),
(440,0,l),
(672,700,l),
(604,700,l),
(427,155,l),
(432,700,l),
(362,700,l),
(142,173,l),
(195,700,l),
(122,700,l),
(59,0,l),
(133,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 20 77 5 4 2 3 3 21 3 78 0 0 0 12 0 12 17 18 18 17 6 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = W;
unicode = 87;
},
{
glyphname = Wacute;
layers = (
{
anchors = (
{
name = top;
pos = (399,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (47,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Wacute;
unicode = 7810;
},
{
glyphname = Wcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (399,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (47,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Wcircumflex;
unicode = 372;
},
{
glyphname = Wdieresis;
layers = (
{
anchors = (
{
name = top;
pos = (399,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (47,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Wdieresis;
unicode = 7812;
},
{
glyphname = Wgrave;
layers = (
{
anchors = (
{
name = top;
pos = (399,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = W;
},
{
alignment = -1;
pos = (47,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Wgrave;
unicode = 7808;
},
{
glyphname = X;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(315,301,l),
(440,0,l),
(524,0,l),
(369,359,l),
(659,700,l),
(569,700,l),
(339,426,l),
(227,700,l),
(143,700,l),
(286,367,l),
(-28,0,l),
(63,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 7 4 1 4 2 0 1 76 1 1 0 0 20 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 18 18 18 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = X;
unicode = 88;
},
{
glyphname = Y;
layers = (
{
anchors = (
{
name = top;
pos = (396,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(344,279,l),
(676,700,l),
(592,700,l),
(322,354,l),
(198,700,l),
(118,700,l),
(269,287,l),
(208,0,l),
(285,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
4 1 2 2 0 1 76 1 1 0 0 20 77 3 1 2 2 21 2 78 0 0 0 8 0 8 18 18 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Y;
unicode = 89;
},
{
glyphname = Yacute;
layers = (
{
anchors = (
{
name = top;
pos = (396,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (44,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ycircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (396,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (44,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ycircumflex;
unicode = 374;
},
{
glyphname = Ydieresis;
layers = (
{
anchors = (
{
name = top;
pos = (396,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (44,212);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 2
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ydieresis;
unicode = 376;
},
{
glyphname = Ygrave;
layers = (
{
anchors = (
{
name = top;
pos = (396,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Y;
},
{
alignment = -1;
pos = (44,212);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = Z;
layers = (
{
anchors = (
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(511,67,l),
(113,65,l),
(628,646,l),
(639,700,l),
(154,700,l),
(140,633,l),
(527,635,l),
(11,54,l),
(0,0,l),
(497,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 0 0 1 95 0 1 1 20 77 0 2 2 3 95 4 1 3 3 21 3 78 0 0 0 9 0 9 18 17 18 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Z;
unicode = 90;
},
{
glyphname = Zacute;
layers = (
{
anchors = (
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (45,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Zacute;
unicode = 377;
},
{
glyphname = Zcaron;
layers = (
{
anchors = (
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (45,212);
ref = uni030C;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Zcaron;
unicode = 381;
},
{
glyphname = Zdotaccent;
layers = (
{
anchors = (
{
name = top;
pos = (397,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = Z;
},
{
alignment = -1;
pos = (45,212);
ref = uni0307;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Zdotaccent;
unicode = 379;
},
{
glyphname = a;
layers = (
{
anchors = (
{
name = ogonek;
pos = (434,0);
},
{
name = top;
pos = (332,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,15,o),
(372,42,q),
(363,0,l),
(434,0,l),
(502,305,ls),
(515,362,o),
(479,448,o),
(394,496,o),
(331,496,qs),
(285,496,o),
(196,474,o),
(149,451,q),
(170,395,l),
(214,415,o),
(287,436,o),
(319,436,qs),
(460,436,o),
(430,299,qs),
(416,238,l),
(385,261,o),
(300,285,o),
(254,285,qs),
(166,285,o),
(57,197,o),
(57,126,qs),
(57,65,o),
(150,-10,o),
(225,-10,qs),
(264,-10,o)
);
},
{
closed = 1;
nodes = (
(201,231,o),
(261,231,qs),
(351,231,o),
(405,189,q),
(384,94,l),
(321,45,o),
(243,45,qs),
(188,45,o),
(126,91,o),
(126,131,qs),
(126,176,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
16 1 2 3 15 1 1 2 9 1 6 1 35 1 5 6 26 1 0 5 5 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
16 1 2 3 15 1 1 2 9 1 6 1 35 1 5 6 26 1 4 5 5 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
0 1 0 6 5 1 6 105 0 2 2 3 97 0 3 3 29 77 0 5 5 0 97 4 7 2 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 1 0 6 5 1 6 105 0 2 2 3 97 0 3 3 29 77 0 4 4 21 77 0 5 5 0 97 7 1 0 0 30 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 38 36 33 31 25 24 20 18 13 11 7 5 0 28 1 28 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = a;
unicode = 97;
},
{
glyphname = aacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (434,0);
},
{
name = top;
pos = (332,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-20,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = aacute;
unicode = 225;
},
{
glyphname = abreve;
layers = (
{
anchors = (
{
name = ogonek;
pos = (434,0);
},
{
name = top;
pos = (332,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-20,0);
ref = uni0306;
}
);
width = 600;
}
);
note = abreve;
unicode = 259;
},
{
glyphname = acircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (434,0);
},
{
name = top;
pos = (332,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-20,0);
ref = uni0302;
}
);
width = 600;
}
);
note = acircumflex;
unicode = 226;
},
{
glyphname = adieresis;
layers = (
{
anchors = (
{
name = ogonek;
pos = (434,0);
},
{
name = top;
pos = (332,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-20,0);
ref = uni0308;
}
);
width = 600;
}
);
note = adieresis;
unicode = 228;
},
{
glyphname = agrave;
layers = (
{
anchors = (
{
name = ogonek;
pos = (434,0);
},
{
name = top;
pos = (332,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-20,0);
ref = gravecomb;
}
);
width = 600;
}
);
note = agrave;
unicode = 224;
},
{
glyphname = amacron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (434,0);
},
{
name = top;
pos = (332,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-20,0);
ref = uni0304;
}
);
width = 600;
}
);
note = amacron;
unicode = 257;
},
{
glyphname = aogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(413,-218,q),
(409,-178,l),
(399,-182,o),
(374,-187,o),
(363,-187,qs),
(337,-187,o),
(303,-161,o),
(303,-139,qs),
(303,-71,o),
(434,0,q),
(502,305,ls),
(515,362,o),
(479,448,o),
(394,496,o),
(331,496,qs),
(285,496,o),
(196,474,o),
(149,451,q),
(170,395,l),
(214,415,o),
(287,436,o),
(319,436,qs),
(460,436,o),
(430,299,qs),
(416,238,l),
(385,261,o),
(300,285,o),
(254,285,qs),
(166,285,o),
(57,197,o),
(57,126,qs),
(57,65,o),
(150,-10,o),
(225,-10,qs),
(264,-10,o),
(337,15,o),
(372,42,q),
(363,0,l),
(374,0,l),
(252,-71,o),
(252,-154,qs),
(252,-189,o),
(304,-232,o),
(347,-232,qs),
(385,-232,o)
);
},
{
closed = 1;
nodes = (
(126,91,o),
(126,131,qs),
(126,176,o),
(201,231,o),
(261,231,qs),
(351,231,o),
(405,189,q),
(384,94,l),
(321,45,o),
(243,45,qs),
(188,45,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
26 1 4 5 25 1 3 4 19 1 8 3 48 1 7 8 7 1 1 7 42 1 6 1 43 1 0 6 7 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
26 1 4 5 25 1 3 4 19 1 8 3 48 1 7 8 7 1 1 7 42 1 6 2 43 1 0 6 7 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 3 0 8 7 3 8 105 0 4 4 5 97 0 5 5 29 77 10 1 7 7 1 97 2 1 1 1 21 77 0 6 6 0 97 9 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 3 0 8 7 3 8 105 0 4 4 5 97 0 5 5 29 77 0 1 1 21 77 10 1 7 7 2 97 0 2 2 30 77 0 6 6 0 97 9 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 3 0 8 7 3 8 105 0 6 9 1 0 6 0 101 0 4 4 5 97 0 5 5 29 77 0 1 1 21 77 10 1 7 7 2 97 0 2 2 30 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
46 45 1 0 51 49 45 55 46 55 40 38 30 28 23 21 17 15 11 9 6 5 0 44 1 44 11 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = aogonek;
unicode = 261;
},
{
glyphname = aring;
layers = (
{
anchors = (
{
name = ogonek;
pos = (434,0);
},
{
name = top;
pos = (332,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-20,0);
ref = uni030A;
}
);
width = 600;
}
);
note = aring;
unicode = 229;
},
{
glyphname = atilde;
layers = (
{
anchors = (
{
name = ogonek;
pos = (434,0);
},
{
name = top;
pos = (332,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a;
},
{
alignment = -1;
pos = (-20,0);
ref = tildecomb;
}
);
width = 600;
}
);
note = atilde;
unicode = 227;
},
{
glyphname = ae;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(240,28,o),
(269,63,q),
(291,29,o),
(360,-10,o),
(404,-10,qs),
(435,-10,o),
(497,7,o),
(528,26,q),
(500,83,l),
(478,68,o),
(428,54,o),
(405,54,qs),
(361,54,o),
(307,127,o),
(307,188,qs),
(307,199,o),
(308,218,o),
(309,228,q),
(567,228,l),
(580,299,o),
(580,330,qs),
(580,404,o),
(516,496,o),
(456,496,qs),
(422,496,o),
(355,460,o),
(326,427,q),
(312,460,o),
(247,496,o),
(205,496,qs),
(172,496,o),
(101,470,o),
(67,443,q),
(98,392,l),
(126,412,o),
(180,435,o),
(205,435,qs),
(241,435,o),
(275,386,o),
(264,338,qs),
(248,261,l),
(229,272,o),
(188,283,o),
(165,283,qs),
(116,283,o),
(45,239,o),
(5,164,o),
(5,119,qs),
(5,78,o),
(41,20,o),
(98,-10,o),
(131,-10,qs),
(171,-10,o)
);
},
{
closed = 1;
nodes = (
(413,434,o),
(448,434,qs),
(489,434,o),
(524,350,o),
(514,280,q),
(318,280,l),
(336,353,o)
);
},
{
closed = 1;
nodes = (
(73,90,o),
(73,127,qs),
(73,170,o),
(126,232,o),
(171,232,qs),
(193,232,o),
(226,221,o),
(240,212,q),
(239,205,o),
(239,191,o),
(239,184,qs),
(239,142,o),
(250,106,q),
(228,79,o),
(173,46,o),
(146,46,qs),
(110,46,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
19 1 2 3 25 18 2 1 2 11 1 5 1 63 50 43 3 6 5 44 1 0 6 5 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 25 values pushed */
19 1 2 3 25 18 2 1 2 11 1 5 1 63 50 43 3 6 5 44 1 0 10 5 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
8 1 1 11 1 5 6 1 5 105 9 1 2 2 3 97 4 1 3 3 29 77 13 10 2 6 6 0 97 7 12 2 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 48 values pushed */
8 1 1 11 1 5 6 1 5 105 9 1 2 2 3 97 4 1 3 3 29 77 0 6 6 0 97 7 12 2 0 0 30 77 13 1 10 10 0 97 7 12 2 0 0 30 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
61 60 1 0 72 70 60 76 61 76 58 56 54 53 48 46 41 39 34 33 29 27 23 21 16 14 9 7 0 52 1 52 14 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ae;
unicode = 230;
},
{
glyphname = b;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(430,36,o),
(499,113,o),
(539,214,o),
(539,271,qs),
(539,335,o),
(488,434,o),
(400,492,o),
(344,492,qs),
(260,492,o),
(201,431,q),
(265,737,l),
(191,722,l),
(38,0,l),
(109,0,l),
(126,80,l),
(152,38,o),
(234,-8,o),
(286,-8,qs),
(338,-8,o)
);
},
{
closed = 1;
nodes = (
(243,430,o),
(318,430,qs),
(385,430,o),
(468,339,o),
(468,265,qs),
(468,207,o),
(417,112,o),
(331,56,o),
(277,56,qs),
(233,56,o),
(157,102,o),
(139,139,q),
(189,374,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
8 1 4 2 3 1 3 4 2 76 7 1 2 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 2 97 0 2 2 23 77 0 3 3 0 97 1 5 2 0 0 30 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 2 97 0 2 2 23 77 0 3 3 0 97 1 5 2 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 2 97 0 2 2 23 77 0 3 3 0 97 1 5 2 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 4 4 2 97 0 2 2 23 77 0 1 1 21 77 0 3 3 0 97 5 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 30 28 23 21 11 9 5 4 0 18 1 18 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = b;
unicode = 98;
},
{
glyphname = c;
layers = (
{
anchors = (
{
name = ogonek;
pos = (281,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(451,41,o),
(488,87,q),
(439,126,l),
(411,93,o),
(332,53,o),
(287,53,qs),
(244,53,o),
(175,95,o),
(136,168,o),
(136,215,qs),
(136,275,o),
(188,373,o),
(277,432,o),
(330,432,qs),
(382,432,o),
(451,382,o),
(470,337,q),
(533,368,l),
(511,426,o),
(403,496,o),
(335,496,qs),
(280,496,o),
(182,452,o),
(108,374,o),
(66,271,o),
(66,212,qs),
(66,147,o),
(121,47,o),
(218,-10,o),
(280,-10,qs),
(342,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
28 27 13 12 4 3 2 1 76 0 2 2 1 97 0 1 1 29 77 0 3 3 0 97 4 1 0 0 30 0 78 1 0 25 23 17 15 10 8 0 30 1 30 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = c;
unicode = 99;
},
{
glyphname = cacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (281,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (-13,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = cacute;
unicode = 263;
},
{
glyphname = ccaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (281,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (-13,0);
ref = uni030C;
}
);
width = 600;
}
);
note = ccaron;
unicode = 269;
},
{
glyphname = ccedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(354,-181,o),
(354,-138,qs),
(354,-109,o),
(311,-69,o),
(273,-66,q),
(298,-9,l),
(354,-6,o),
(454,44,o),
(488,87,q),
(439,126,l),
(411,93,o),
(332,53,o),
(287,53,qs),
(244,53,o),
(175,95,o),
(136,168,o),
(136,215,qs),
(136,275,o),
(188,373,o),
(277,432,o),
(330,432,qs),
(382,432,o),
(451,382,o),
(470,337,q),
(533,368,l),
(511,426,o),
(403,496,o),
(335,496,qs),
(280,496,o),
(182,452,o),
(108,374,o),
(66,271,o),
(66,212,qs),
(66,151,o),
(114,55,o),
(200,-3,o),
(256,-9,q),
(216,-99,l),
(244,-99,ls),
(274,-99,o),
(308,-123,o),
(308,-144,qs),
(308,-169,o),
(269,-199,o),
(236,-199,qs),
(192,-199,o),
(163,-167,q),
(132,-197,l),
(149,-217,o),
(204,-239,o),
(238,-239,qs),
(288,-239,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
42 41 27 26 4 5 4 46 14 2 2 6 4 3 2 1 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 6 1 6 2 114 0 4 4 3 97 0 3 3 29 77 0 5 5 6 97 0 6 6 30 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 6 1 6 2 114 0 4 4 3 97 0 3 3 29 77 0 5 5 6 97 0 6 6 27 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 6 1 6 2 1 128 0 4 4 3 97 0 3 3 29 77 0 5 5 6 97 0 6 6 30 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 6 1 6 2 1 128 0 1 7 1 0 1 0 101 0 4 4 3 97 0 3 3 29 77 0 5 5 6 97 0 6 6 30 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 45 44 39 37 31 29 24 22 13 11 7 5 0 51 1 51 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ccedilla;
unicode = 231;
},
{
glyphname = ccircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (281,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (-13,0);
ref = uni0302;
}
);
width = 600;
}
);
note = ccircumflex;
unicode = 265;
},
{
glyphname = cdotaccent;
layers = (
{
anchors = (
{
name = ogonek;
pos = (281,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = c;
},
{
alignment = -1;
pos = (-13,0);
ref = uni0307;
}
);
width = 600;
}
);
note = cdotaccent;
unicode = 267;
},
{
glyphname = d;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(398,52,q),
(387,0,l),
(458,0,l),
(613,737,l),
(539,722,l),
(473,407,l),
(420,494,o),
(314,494,qs),
(262,494,o),
(170,450,o),
(101,373,o),
(61,272,o),
(61,215,qs),
(61,151,o),
(112,51,o),
(200,-7,o),
(256,-7,qs),
(337,-7,o)
);
},
{
closed = 1;
nodes = (
(183,374,o),
(270,430,o),
(323,430,qs),
(367,430,o),
(442,385,o),
(460,348,q),
(410,110,l),
(383,84,o),
(318,55,o),
(282,55,qs),
(215,55,o),
(132,147,o),
(132,221,qs),
(132,280,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
25 11 2 3 4 16 1 0 3 2 76 13 1 1 74
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
25 11 2 3 4 16 1 2 3 2 76 13 1 1 74
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 1 97 0 1 1 29 77 0 3 3 0 97 2 5 2 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 4 4 1 97 0 1 1 29 77 0 3 3 0 97 2 5 2 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 4 4 1 97 0 1 1 29 77 0 2 2 21 77 0 3 3 0 97 5 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 29 27 22 20 15 14 10 8 0 17 1 17 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = d;
unicode = 100;
},
{
glyphname = dcaron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(310,19,o),
(338,43,q),
(329,0,l),
(400,0,l),
(556,737,l),
(482,722,l),
(417,416,l),
(392,453,o),
(320,494,o),
(273,494,qs),
(223,494,o),
(135,450,o),
(69,371,o),
(31,268,o),
(31,209,qs),
(31,147,o),
(77,49,o),
(156,-7,o),
(206,-7,qs),
(244,-7,o)
);
},
{
closed = 1;
nodes = (
(720,737,l),
(645,722,l),
(596,527,l),
(654,527,l)
);
},
{
closed = 1;
nodes = (
(102,144,o),
(102,215,qs),
(102,276,o),
(149,373,o),
(228,430,o),
(277,430,qs),
(318,430,o),
(386,391,o),
(405,359,q),
(350,101,l),
(298,55,o),
(232,55,qs),
(174,55,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 16 values pushed */
27 12 2 4 5 17 1 0 4 2 76 22 14 2 3 74
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 16 values pushed */
27 12 2 4 5 17 1 2 4 2 76 22 14 2 3 74
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
7 1 3 1 3 133 0 5 5 1 97 0 1 1 29 77 8 1 4 4 0 97 2 6 2 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
7 1 3 1 3 133 0 5 5 1 97 0 1 1 29 77 8 1 4 4 0 97 2 6 2 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
7 1 3 1 3 133 0 5 5 1 97 0 1 1 29 77 0 2 2 21 77 8 1 4 4 0 97 6 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
25 24 20 20 1 0 31 29 24 36 25 36 20 23 20 23 16 15 10 8 0 19 1 19 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = dcaron;
unicode = 271;
},
{
glyphname = dcroat;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(398,52,q),
(387,0,l),
(458,0,l),
(579,573,l),
(652,573,l),
(664,627,l),
(590,627,l),
(613,737,l),
(539,722,l),
(519,627,l),
(374,627,l),
(362,573,l),
(508,573,l),
(473,407,l),
(420,494,o),
(314,494,qs),
(262,494,o),
(170,450,o),
(101,373,o),
(61,272,o),
(61,215,qs),
(61,151,o),
(112,51,o),
(200,-7,o),
(256,-7,qs),
(337,-7,o)
);
},
{
closed = 1;
nodes = (
(132,147,o),
(132,221,qs),
(132,280,o),
(183,374,o),
(270,430,o),
(323,430,qs),
(367,430,o),
(442,385,o),
(460,348,q),
(410,110,l),
(383,84,o),
(318,55,o),
(282,55,qs),
(215,55,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
30 11 2 7 8 24 1 0 7 2 76 17 1 3 74
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 15 values pushed */
30 11 2 7 8 24 1 6 7 2 76 17 1 3 74
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
4 1 3 5 1 2 1 3 2 103 0 8 8 1 97 0 1 1 29 77 10 1 7 7 0 97 6 9 2 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
4 1 3 5 1 2 1 3 2 103 0 8 8 1 97 0 1 1 29 77 10 1 7 7 0 97 6 9 2 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
4 1 3 5 1 2 1 3 2 103 0 8 8 1 97 0 1 1 29 77 0 6 6 21 77 10 1 7 7 0 97 9 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
27 26 1 0 34 32 26 39 27 39 23 22 21 20 19 18 15 14 13 12 10 8 0 25 1 25 11 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = dcroat;
unicode = 273;
},
{
glyphname = eth;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,90,o),
(552,268,o),
(552,384,qs),
(552,520,o),
(491,616,q),
(592,666,l),
(575,711,l),
(461,655,l),
(439,680,o),
(384,721,o),
(351,737,q),
(312,687,l),
(338,676,o),
(382,646,o),
(400,626,q),
(308,581,l),
(326,535,l),
(432,587,l),
(497,492,o),
(489,348,q),
(473,405,o),
(375,476,o),
(307,476,qs),
(238,476,o),
(127,404,o),
(62,283,o),
(62,207,qs),
(62,144,o),
(115,46,o),
(209,-10,o),
(270,-10,qs),
(353,-10,o)
);
},
{
closed = 1;
nodes = (
(130,142,o),
(130,212,qs),
(130,267,o),
(180,360,o),
(264,417,o),
(314,417,qs),
(356,417,o),
(422,376,o),
(460,305,o),
(460,260,qs),
(460,206,o),
(409,112,o),
(324,54,o),
(274,54,qs),
(211,54,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */
11 1 2 3 1 76 26 25 24 23 20 19 16 15 14 13 10 1 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 3 3 1 97 0 1 1 23 77 5 1 2 2 0 97 4 1 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 0 3 2 1 3 105 5 1 2 2 0 97 4 1 0 0 30 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
33 32 1 0 41 39 32 46 33 46 9 7 0 31 1 31 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eth;
unicode = 240;
},
{
glyphname = e;
layers = (
{
anchors = (
{
name = ogonek;
pos = (358,0);
},
{
name = top;
pos = (327,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(444,28,o),
(480,60,q),
(443,110,l),
(405,80,o),
(335,54,o),
(297,54,qs),
(251,54,o),
(178,98,o),
(136,177,o),
(136,228,q),
(530,228,l),
(533,257,o),
(533,281,qs),
(533,344,o),
(480,441,o),
(387,496,o),
(327,496,qs),
(273,496,o),
(178,453,o),
(106,376,o),
(66,276,o),
(66,219,qs),
(66,152,o),
(125,48,o),
(229,-10,o),
(294,-10,qs),
(348,-10,o)
);
},
{
closed = 1;
nodes = (
(258,433,o),
(322,433,qs),
(364,433,o),
(428,394,o),
(465,326,o),
(463,282,q),
(143,282,l),
(160,348,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
24 23 2 3 2 1 76 0 4 0 2 3 4 2 103 0 5 5 1 97 0 1 1 29 77 0 3 3 0 97 6 1 0 0 30 0 78 1 0 33 31 28 27 21 19 16 15 10 8 0 26 1 26 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = e;
unicode = 101;
},
{
glyphname = eacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (358,0);
},
{
name = top;
pos = (327,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (-25,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ebreve;
layers = (
{
anchors = (
{
name = ogonek;
pos = (358,0);
},
{
name = top;
pos = (327,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (-25,0);
ref = uni0306;
}
);
width = 600;
}
);
note = ebreve;
unicode = 277;
},
{
glyphname = ecaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (358,0);
},
{
name = top;
pos = (327,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (-25,0);
ref = uni030C;
}
);
width = 600;
}
);
note = ecaron;
unicode = 283;
},
{
glyphname = ecircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (358,0);
},
{
name = top;
pos = (327,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (-25,0);
ref = uni0302;
}
);
width = 600;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = edieresis;
layers = (
{
anchors = (
{
name = ogonek;
pos = (358,0);
},
{
name = top;
pos = (327,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (-25,0);
ref = uni0308;
}
);
width = 600;
}
);
note = edieresis;
unicode = 235;
},
{
glyphname = edotaccent;
layers = (
{
anchors = (
{
name = ogonek;
pos = (358,0);
},
{
name = top;
pos = (327,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (-25,0);
ref = uni0307;
}
);
width = 600;
}
);
note = edotaccent;
unicode = 279;
},
{
glyphname = egrave;
layers = (
{
anchors = (
{
name = ogonek;
pos = (358,0);
},
{
name = top;
pos = (327,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (-25,0);
ref = gravecomb;
}
);
width = 600;
}
);
note = egrave;
unicode = 232;
},
{
glyphname = emacron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (358,0);
},
{
name = top;
pos = (327,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = e;
},
{
alignment = -1;
pos = (-25,0);
ref = uni0304;
}
);
width = 600;
}
);
note = emacron;
unicode = 275;
},
{
glyphname = eogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,-218,q),
(333,-178,l),
(323,-182,o),
(298,-187,o),
(287,-187,qs),
(261,-187,o),
(227,-161,o),
(227,-139,qs),
(227,-72,o),
(350,-5,q),
(425,10,o),
(480,60,q),
(443,110,l),
(405,80,o),
(335,54,o),
(297,54,qs),
(251,54,o),
(178,98,o),
(136,177,o),
(136,228,q),
(530,228,l),
(533,257,o),
(533,281,qs),
(533,344,o),
(480,441,o),
(387,496,o),
(327,496,qs),
(273,496,o),
(178,453,o),
(106,376,o),
(66,276,o),
(66,219,qs),
(66,154,o),
(122,52,o),
(220,-7,o),
(282,-10,q),
(176,-77,o),
(176,-154,qs),
(176,-189,o),
(228,-232,o),
(271,-232,qs),
(309,-232,o)
);
},
{
closed = 1;
nodes = (
(258,433,o),
(322,433,qs),
(364,433,o),
(428,394,o),
(465,326,o),
(463,282,q),
(143,282,l),
(160,348,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
29 28 2 4 3 39 1 5 1 40 1 0 5 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 6 0 3 4 6 3 103 0 7 7 2 97 0 2 2 29 77 0 4 4 1 97 0 1 1 27 77 0 5 5 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 6 0 3 4 6 3 103 0 7 7 2 97 0 2 2 29 77 0 4 4 1 97 0 1 1 30 77 0 5 5 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 6 0 3 4 6 3 103 0 5 8 1 0 5 0 101 0 7 7 2 97 0 2 2 29 77 0 4 4 1 97 0 1 1 30 1 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
1 0 48 46 43 42 37 35 26 24 21 20 15 13 6 5 0 41 1 41 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eogonek;
unicode = 281;
},
{
glyphname = f;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(328,428,l),
(553,428,l),
(566,488,l),
(341,488,l),
(360,579,ls),
(371,632,o),
(425,675,o),
(474,675,qs),
(503,675,o),
(562,662,o),
(596,645,q),
(609,711,l),
(545,740,o),
(481,740,qs),
(320,740,o),
(290,596,qs),
(267,488,l),
(101,488,l),
(88,428,l),
(254,428,l),
(164,0,l),
(237,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
9 1 3 2 10 1 1 3 2 76 0 3 3 2 97 0 2 2 22 77 5 1 0 0 1 95 4 1 1 1 23 77 7 1 6 6 21 6 78 0 0 0 21 0 21 17 19 36 34 17 17 8 7 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = f;
unicode = 102;
},
{
glyphname = g;
layers = (
{
anchors = (
{
name = top;
pos = (335,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(426,-133,o),
(443,-52,qs),
(558,488,l),
(487,488,l),
(471,410,l),
(418,494,o),
(314,494,qs),
(262,494,o),
(170,450,o),
(101,373,o),
(61,272,o),
(61,215,qs),
(61,152,o),
(111,52,o),
(198,-6,o),
(253,-6,qs),
(335,-6,o),
(394,50,q),
(374,-46,ls),
(363,-98,o),
(293,-155,o),
(239,-155,qs),
(156,-155,o),
(72,-93,q),
(34,-148,l),
(75,-181,o),
(190,-219,o),
(243,-219,qs),
(323,-219,o)
);
},
{
closed = 1;
nodes = (
(132,148,o),
(132,221,qs),
(132,280,o),
(183,374,o),
(270,430,o),
(323,430,qs),
(366,430,o),
(440,387,o),
(458,352,q),
(407,108,l),
(352,56,o),
(282,56,qs),
(215,56,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
32 23 2 5 6 10 1 2 5 4 3 2 1 2 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 6 6 3 97 4 1 3 3 29 77 8 1 5 5 2 97 0 2 2 30 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 6 6 3 97 4 1 3 3 29 77 8 1 5 5 2 97 0 2 2 27 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 6 6 3 97 4 1 3 3 29 77 8 1 5 5 2 97 0 2 2 30 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
0 4 4 23 77 0 6 6 3 97 0 3 3 29 77 8 1 5 5 2 97 0 2 2 30 77 0 1 1 0 97 7 1 0 0 31 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
30 29 1 0 36 34 29 41 30 41 25 24 22 20 13 11 7 5 0 28 1 28 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = g;
unicode = 103;
},
{
glyphname = gbreve;
layers = (
{
anchors = (
{
name = top;
pos = (335,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (-17,0);
ref = uni0306;
}
);
width = 600;
}
);
note = gbreve;
unicode = 287;
},
{
glyphname = gcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (335,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (-17,0);
ref = uni0302;
}
);
width = 600;
}
);
note = gcircumflex;
unicode = 285;
},
{
glyphname = uni0123;
layers = (
{
anchors = (
{
name = top;
pos = (335,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,610,l),
(385,610,l),
(472,797,l),
(419,797,l)
);
},
{
closed = 1;
nodes = (
(426,-133,o),
(443,-52,qs),
(558,488,l),
(487,488,l),
(471,410,l),
(418,494,o),
(314,494,qs),
(262,494,o),
(170,450,o),
(101,373,o),
(61,272,o),
(61,215,qs),
(61,152,o),
(111,52,o),
(198,-6,o),
(253,-6,qs),
(335,-6,o),
(394,50,q),
(374,-46,ls),
(363,-98,o),
(293,-155,o),
(239,-155,qs),
(156,-155,o),
(72,-93,q),
(34,-148,l),
(75,-181,o),
(190,-219,o),
(243,-219,qs),
(323,-219,o)
);
},
{
closed = 1;
nodes = (
(132,148,o),
(132,221,qs),
(132,280,o),
(183,374,o),
(270,430,o),
(323,430,qs),
(366,430,o),
(440,387,o),
(458,352,q),
(407,108,l),
(352,56,o),
(282,56,qs),
(215,56,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
36 27 2 7 8 14 1 4 7 8 7 2 3 4 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
9 1 1 0 1 133 0 0 5 0 133 0 8 8 5 97 6 1 5 5 29 77 11 1 7 7 4 97 0 4 4 30 77 0 3 3 2 97 10 1 2 2 31 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
9 1 1 0 1 133 0 0 5 0 133 0 8 8 5 97 6 1 5 5 29 77 11 1 7 7 4 97 0 4 4 27 77 0 3 3 2 97 10 1 2 2 31 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
9 1 1 0 1 133 0 0 5 0 133 0 8 8 5 97 6 1 5 5 29 77 11 1 7 7 4 97 0 4 4 30 77 0 3 3 2 97 10 1 2 2 31 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
9 1 1 0 1 133 0 0 5 0 133 0 6 6 23 77 0 8 8 5 97 0 5 5 29 77 11 1 7 7 4 97 0 4 4 30 77 0 3 3 2 97 10 1 2 2 31 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
34 33 5 4 0 0 40 38 33 45 34 45 29 28 26 24 17 15 11 9 4 32 5 32 0 3 0 3 17 12 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni0123;
unicode = 291;
},
{
glyphname = gdotaccent;
layers = (
{
anchors = (
{
name = top;
pos = (335,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g;
},
{
alignment = -1;
pos = (-17,0);
ref = uni0307;
}
);
width = 600;
}
);
note = gdotaccent;
unicode = 289;
},
{
glyphname = h;
layers = (
{
anchors = (
{
name = top;
pos = (232,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,361,l),
(257,436,o),
(340,436,qs),
(399,436,o),
(453,355,o),
(439,287,qs),
(378,0,l),
(451,0,l),
(514,298,ls),
(527,357,o),
(498,446,o),
(425,496,o),
(370,496,qs),
(276,496,o),
(207,412,q),
(276,737,l),
(200,722,l),
(47,0,l),
(120,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */
3 1 1 2 1 76 2 1 0 74 0 2 2 0 97 0 0 0 29 77 4 3 2 1 1 21 1 78 0 0 0 18 0 18 35 20 36 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = h;
unicode = 104;
},
{
glyphname = hbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(196,361,l),
(257,436,o),
(340,436,qs),
(399,436,o),
(453,355,o),
(439,287,qs),
(378,0,l),
(451,0,l),
(514,298,ls),
(527,357,o),
(498,446,o),
(425,496,o),
(370,496,qs),
(276,496,o),
(207,412,q),
(241,573,l),
(385,573,l),
(396,626,l),
(252,626,l),
(276,737,l),
(200,722,l),
(180,626,l),
(106,626,l),
(95,573,l),
(168,573,l),
(47,0,l),
(120,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
11 1 5 6 1 76 6 1 1 74 2 1 1 3 1 0 4 1 0 103 0 6 6 4 97 0 4 4 29 77 8 7 2 5 5 21 5 78 0 0 0 26 0 26 35 20 34 17 19 17 17 9 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = hbar;
unicode = 295;
},
{
glyphname = hcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (232,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = h;
},
{
alignment = -1;
pos = (-120,212);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = hcircumflex;
unicode = 293;
},
{
glyphname = i;
layers = (
{
anchors = (
{
name = ogonek;
pos = (441,0);
},
{
name = top;
pos = (346,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,644,o),
(442,670,qs),
(442,694,o),
(408,728,o),
(384,728,qs),
(356,728,o),
(315,687,o),
(315,661,qs),
(315,637,o),
(348,604,o),
(373,604,qs),
(402,604,o)
);
},
{
closed = 1;
nodes = (
(446,-3,o),
(477,7,q),
(491,73,l),
(459,62,o),
(411,55,o),
(385,55,qs),
(336,55,o),
(297,102,o),
(308,153,qs),
(382,488,l),
(128,488,l),
(115,428,l),
(296,428,l),
(236,156,ls),
(219,77,o),
(294,-10,o),
(371,-10,qs),
(394,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
26 1 5 3 1 76 6 1 0 0 1 97 0 1 1 22 77 0 3 3 4 95 0 4 4 23 77 0 5 5 2 97 7 1 2 2 30 2 78 13 12 1 0 24 22 19 18 17 16 12 29 13 29 7 5 0 11 1 11 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = i;
unicode = 105;
},
{
glyphname = dotlessi;
layers = (
{
anchors = (
{
name = ogonek;
pos = (441,0);
},
{
name = top;
pos = (346,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(446,-3,o),
(477,7,q),
(491,73,l),
(459,62,o),
(411,55,o),
(385,55,qs),
(336,55,o),
(297,102,o),
(308,153,qs),
(382,488,l),
(128,488,l),
(115,428,l),
(296,428,l),
(236,156,ls),
(219,77,o),
(294,-10,o),
(371,-10,qs),
(394,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
14 1 3 1 1 76 0 1 1 2 95 0 2 2 23 77 0 3 3 0 97 4 1 0 0 30 0 78 1 0 12 10 7 6 5 4 0 17 1 17 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = dotlessi;
unicode = 305;
},
{
glyphname = iacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (441,0);
},
{
name = top;
pos = (346,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-6,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = ibreve;
layers = (
{
anchors = (
{
name = ogonek;
pos = (441,0);
},
{
name = top;
pos = (346,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-6,0);
ref = uni0306;
}
);
width = 600;
}
);
note = ibreve;
unicode = 301;
},
{
glyphname = icircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (441,0);
},
{
name = top;
pos = (346,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-6,0);
ref = uni0302;
}
);
width = 600;
}
);
note = icircumflex;
unicode = 238;
},
{
glyphname = idieresis;
layers = (
{
anchors = (
{
name = ogonek;
pos = (441,0);
},
{
name = top;
pos = (346,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-6,0);
ref = uni0308;
}
);
width = 600;
}
);
note = idieresis;
unicode = 239;
},
{
glyphname = i.loclTRK;
layers = (
{
anchors = (
{
name = ogonek;
pos = (441,0);
},
{
name = top;
pos = (346,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = i;
}
);
width = 600;
}
);
note = i.loclTRK;
},
{
glyphname = igrave;
layers = (
{
anchors = (
{
name = ogonek;
pos = (441,0);
},
{
name = top;
pos = (346,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-6,0);
ref = gravecomb;
}
);
width = 600;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = imacron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (441,0);
},
{
name = top;
pos = (346,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-6,0);
ref = uni0304;
}
);
width = 600;
}
);
note = imacron;
unicode = 299;
},
{
glyphname = iogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,644,o),
(442,670,qs),
(442,694,o),
(408,728,o),
(384,728,qs),
(356,728,o),
(315,687,o),
(315,661,qs),
(315,637,o),
(348,604,o),
(373,604,qs),
(402,604,o)
);
},
{
closed = 1;
nodes = (
(420,-218,q),
(416,-178,l),
(406,-182,o),
(381,-187,o),
(370,-187,qs),
(344,-187,o),
(310,-161,o),
(310,-139,qs),
(310,-73,o),
(432,-5,q),
(453,0,o),
(477,7,q),
(491,73,l),
(459,62,o),
(411,55,o),
(385,55,qs),
(336,55,o),
(297,102,o),
(308,153,qs),
(382,488,l),
(128,488,l),
(115,428,l),
(296,428,l),
(236,156,ls),
(219,78,o),
(291,-8,o),
(365,-10,q),
(259,-77,o),
(259,-154,qs),
(259,-189,o),
(311,-232,o),
(354,-232,qs),
(392,-232,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
31 1 6 4 42 1 7 3 43 1 2 7 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
8 1 0 0 1 97 0 1 1 22 77 0 4 4 5 95 0 5 5 23 77 0 6 6 3 97 0 3 3 27 77 0 7 7 2 97 9 1 2 2 31 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
8 1 0 0 1 97 0 1 1 22 77 0 4 4 5 95 0 5 5 23 77 0 6 6 3 97 0 3 3 30 77 0 7 7 2 97 9 1 2 2 31 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 7 9 1 2 7 2 101 8 1 0 0 1 97 0 1 1 22 77 0 4 4 5 95 0 5 5 23 77 0 6 6 3 97 0 3 3 30 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
13 12 1 0 40 38 29 27 24 23 22 21 18 17 12 44 13 44 7 5 0 11 1 11 10 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = iogonek;
unicode = 303;
},
{
glyphname = itilde;
layers = (
{
anchors = (
{
name = ogonek;
pos = (441,0);
},
{
name = top;
pos = (346,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = dotlessi;
},
{
alignment = -1;
pos = (-6,0);
ref = tildecomb;
}
);
width = 600;
}
);
note = itilde;
unicode = 297;
},
{
glyphname = ij;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(318,643,o),
(318,670,qs),
(318,694,o),
(284,728,o),
(260,728,qs),
(232,728,o),
(191,687,o),
(191,661,qs),
(191,636,o),
(224,603,o),
(249,603,qs),
(278,603,o)
);
},
{
closed = 1;
nodes = (
(581,644,o),
(581,670,qs),
(581,694,o),
(547,728,o),
(523,728,qs),
(495,728,o),
(454,687,o),
(454,661,qs),
(454,637,o),
(487,604,o),
(512,604,qs),
(541,604,o)
);
},
{
closed = 1;
nodes = (
(253,488,l),
(180,488,l),
(76,0,l),
(149,0,l)
);
},
{
closed = 1;
nodes = (
(382,-153,o),
(395,-94,qs),
(518,488,l),
(445,488,l),
(323,-90,ls),
(316,-124,o),
(283,-154,o),
(251,-154,qs),
(231,-154,o),
(216,-150,q),
(202,-213,l),
(212,-215,o),
(234,-219,o),
(246,-219,qs),
(306,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */
32 1 7 5 31 1 6 7 2 76 10 2 9 3 0 0 1 97 3 1 1 1 22 77 8 1 4 4 23 77 11 1 5 5 21 77 0 7 7 6 97 12 1 6 6 31 6 78 29 28 24 24 13 12 1 0 39 38 35 33 28 42 29 42 24 27 24 27 26 25 19 17 12 23 13 23 7 5 0 11 1 11 13 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ij;
unicode = 307;
},
{
glyphname = j;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(535,644,o),
(535,670,qs),
(535,694,o),
(501,728,o),
(477,728,qs),
(449,728,o),
(408,687,o),
(408,661,qs),
(408,637,o),
(441,604,o),
(466,604,qs),
(495,604,o)
);
},
{
closed = 1;
nodes = (
(337,-153,o),
(355,-68,qs),
(473,488,l),
(149,488,l),
(136,428,l),
(387,428,l),
(284,-55,ls),
(272,-110,o),
(219,-154,o),
(169,-154,qs),
(133,-154,o),
(61,-133,o),
(20,-113,q),
(7,-179,l),
(45,-198,o),
(126,-219,o),
(168,-219,qs),
(242,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
16 1 3 4 15 1 2 3 2 76 6 1 0 0 1 97 0 1 1 22 77 0 4 4 5 95 0 5 5 23 77 0 3 3 2 97 7 1 2 2 31 2 78 13 12 1 0 26 25 24 23 20 18 12 29 13 29 7 5 0 11 1 11 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = j;
unicode = 106;
},
{
glyphname = uni0237;
layers = (
{
anchors = (
{
name = top;
pos = (437,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,-153,o),
(355,-68,qs),
(473,488,l),
(149,488,l),
(136,428,l),
(387,428,l),
(284,-55,ls),
(272,-110,o),
(219,-154,o),
(169,-154,qs),
(133,-154,o),
(61,-133,o),
(20,-113,q),
(7,-179,l),
(45,-198,o),
(126,-219,o),
(168,-219,qs),
(242,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
4 1 1 2 3 1 0 1 2 76 0 2 2 3 95 0 3 3 23 77 0 1 1 0 97 4 1 0 0 31 0 78 1 0 14 13 12 11 8 6 0 17 1 17 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni0237;
unicode = 567;
},
{
glyphname = uni006A0301;
layers = (
{
anchors = (
{
name = top;
pos = (437,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0237;
},
{
alignment = -1;
pos = (85,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = uni006A0301;
},
{
glyphname = jcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (437,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = uni0237;
},
{
alignment = -1;
pos = (85,0);
ref = uni0302;
}
);
width = 600;
}
);
note = jcircumflex;
unicode = 309;
},
{
glyphname = k;
layers = (
{
anchors = (
{
name = ogonek;
pos = (251,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(185,241,l),
(402,0,l),
(496,0,l),
(265,251,l),
(588,488,l),
(492,488,l),
(191,268,l),
(291,737,l),
(215,722,l),
(61,0,l),
(134,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
9 6 3 3 1 0 1 76 2 1 0 74 0 0 0 23 77 3 2 2 1 1 21 1 78 0 0 0 10 0 10 18 20 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = k;
unicode = 107;
},
{
glyphname = uni0137;
layers = (
{
anchors = (
{
name = ogonek;
pos = (251,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = k;
},
{
alignment = -1;
pos = (3,0);
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni0137;
unicode = 311;
},
{
glyphname = kgreenlandic;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(185,241,l),
(402,0,l),
(496,0,l),
(265,251,l),
(588,488,l),
(492,488,l),
(191,268,l),
(238,488,l),
(165,488,l),
(61,0,l),
(134,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
9 6 3 3 2 0 1 76 1 1 0 0 23 77 4 3 2 2 2 21 2 78 0 0 0 10 0 10 18 18 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = kgreenlandic;
unicode = 312;
},
{
glyphname = l;
layers = (
{
anchors = (
{
name = ogonek;
pos = (355,0);
},
{
name = top;
pos = (372,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,-3,o),
(463,7,q),
(477,73,l),
(445,62,o),
(397,55,o),
(371,55,qs),
(322,55,o),
(283,102,o),
(294,153,qs),
(417,727,l),
(163,727,l),
(150,667,l),
(331,667,l),
(222,156,ls),
(205,77,o),
(280,-10,o),
(357,-10,qs),
(380,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
14 1 3 1 1 76 0 1 1 2 95 0 2 2 22 77 0 3 3 0 97 4 1 0 0 30 0 78 1 0 12 10 7 6 5 4 0 17 1 17 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = l;
unicode = 108;
},
{
glyphname = lacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (355,0);
},
{
name = top;
pos = (372,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (20,212);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
212
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lacute;
unicode = 314;
},
{
glyphname = lcaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (355,0);
},
{
name = top;
pos = (372,700);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(658,737,l),
(583,722,l),
(534,527,l),
(592,527,l)
);
},
{
closed = 1;
nodes = (
(432,-3,o),
(463,7,q),
(477,73,l),
(445,62,o),
(397,55,o),
(371,55,qs),
(322,55,o),
(283,102,o),
(294,153,qs),
(417,727,l),
(163,727,l),
(150,667,l),
(331,667,l),
(222,156,ls),
(205,77,o),
(280,-10,o),
(357,-10,qs),
(380,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
18 1 4 0 1 76 2 1 3 74 5 1 0 2 4 2 0 4 128 0 2 2 3 95 0 3 3 22 77 0 4 4 1 97 6 1 1 1 30 1 78 5 4 0 0 16 14 11 10 9 8 4 21 5 21 0 3 0 3 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lcaron;
unicode = 318;
},
{
glyphname = uni013C;
layers = (
{
anchors = (
{
name = ogonek;
pos = (355,0);
},
{
name = top;
pos = (372,700);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = l;
},
{
alignment = -1;
pos = (107,0);
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni013C;
unicode = 316;
},
{
glyphname = lslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,-3,o),
(463,7,q),
(477,73,l),
(445,62,o),
(397,55,o),
(371,55,qs),
(322,55,o),
(283,102,o),
(294,153,qs),
(331,326,l),
(556,439,l),
(572,513,l),
(347,400,l),
(417,727,l),
(163,727,l),
(150,667,l),
(331,667,l),
(266,361,l),
(95,275,l),
(79,201,l),
(250,287,l),
(222,156,ls),
(205,77,o),
(280,-10,o),
(357,-10,qs),
(380,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
22 13 12 5 4 5 3 1 1 76 0 1 1 2 95 0 2 2 22 77 0 3 3 0 97 4 1 0 0 30 0 78 1 0 20 18 11 10 9 8 0 25 1 25 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = lslash;
unicode = 322;
},
{
glyphname = m;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,406,l),
(199,441,o),
(238,441,qs),
(269,441,o),
(301,391,o),
(293,352,qs),
(218,0,l),
(286,0,l),
(362,359,ls),
(364,370,o),
(366,390,o),
(366,399,q),
(396,441,o),
(438,441,qs),
(469,441,o),
(501,391,o),
(493,352,qs),
(418,0,l),
(486,0,l),
(562,359,ls),
(575,420,o),
(520,496,o),
(468,496,qs),
(438,496,o),
(382,466,o),
(359,434,q),
(349,463,o),
(302,496,o),
(268,496,qs),
(219,496,o),
(179,450,q),
(187,488,l),
(119,488,l),
(15,0,l),
(83,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 1 4 0 22 8 2 3 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
6 1 4 4 0 97 2 1 2 0 0 23 77 8 7 5 3 3 3 21 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 0 0 23 77 6 1 4 4 1 97 2 1 1 1 29 77 8 7 5 3 3 3 21 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 0 34 0 34 35 21 35 19 36 34 17 9 7 29
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = m;
unicode = 109;
},
{
glyphname = n;
layers = (
{
anchors = (
{
name = ogonek;
pos = (249,0);
},
{
name = top;
pos = (363,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(197,361,l),
(257,436,o),
(340,436,qs),
(399,436,o),
(453,355,o),
(439,287,qs),
(378,0,l),
(451,0,l),
(514,298,ls),
(527,357,o),
(498,446,o),
(425,496,o),
(370,496,qs),
(277,496,o),
(208,413,q),
(224,488,l),
(151,488,l),
(47,0,l),
(120,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
3 1 2 3 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 3 3 0 97 1 1 0 0 23 77 5 4 2 2 2 21 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 23 77 0 3 3 1 97 0 1 1 29 77 5 4 2 2 2 21 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 13 values pushed */
0 0 0 18 0 18 35 20 34 17 6 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = n;
unicode = 110;
},
{
glyphname = nacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (249,0);
},
{
name = top;
pos = (363,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (11,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = nacute;
unicode = 324;
},
{
glyphname = ncaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (249,0);
},
{
name = top;
pos = (363,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (11,0);
ref = uni030C;
}
);
width = 600;
}
);
note = ncaron;
unicode = 328;
},
{
glyphname = uni0146;
layers = (
{
anchors = (
{
name = ogonek;
pos = (249,0);
},
{
name = top;
pos = (363,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (1,0);
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni0146;
unicode = 326;
},
{
glyphname = ntilde;
layers = (
{
anchors = (
{
name = ogonek;
pos = (249,0);
},
{
name = top;
pos = (363,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = n;
},
{
alignment = -1;
pos = (11,0);
ref = tildecomb;
}
);
width = 600;
}
);
note = ntilde;
unicode = 241;
},
{
glyphname = eng;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(421,-157,o),
(432,-102,qs),
(516,302,ls),
(528,359,o),
(499,446,o),
(425,496,o),
(370,496,qs),
(276,496,o),
(209,417,q),
(224,488,l),
(151,488,l),
(47,0,l),
(120,0,l),
(198,367,l),
(227,402,o),
(299,436,o),
(339,436,qs),
(399,436,o),
(454,355,o),
(440,287,qs),
(362,-89,ls),
(355,-123,o),
(318,-153,o),
(282,-153,qs),
(268,-153,o),
(238,-147,o),
(224,-143,q),
(211,-207,l),
(228,-212,o),
(267,-219,o),
(287,-219,qs),
(347,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
22 1 3 2 4 1 1 3 3 1 0 1 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 2 2 4 97 5 1 4 4 23 77 0 3 3 21 77 0 1 1 0 97 6 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 4 23 77 0 2 2 5 97 0 5 5 29 77 0 3 3 21 77 0 1 1 0 97 6 1 0 0 31 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 25 23 21 20 19 18 15 13 8 6 0 31 1 31 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eng;
unicode = 331;
},
{
glyphname = o;
layers = (
{
anchors = (
{
name = top;
pos = (340,484);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(422,34,o),
(493,111,o),
(533,212,o),
(533,269,qs),
(533,336,o),
(480,438,o),
(385,496,o),
(322,496,qs),
(269,496,o),
(176,453,o),
(106,376,o),
(66,275,o),
(66,218,qs),
(66,152,o),
(120,49,o),
(215,-10,o),
(276,-10,qs),
(329,-10,o)
);
},
{
closed = 1;
nodes = (
(137,145,o),
(137,217,qs),
(137,276,o),
(186,373,o),
(269,431,o),
(319,431,qs),
(383,431,o),
(461,340,o),
(461,267,qs),
(461,208,o),
(413,112,o),
(331,55,o),
(280,55,qs),
(216,55,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 97 0 1 1 29 77 5 1 2 2 0 97 4 1 0 0 30 0 78 19 18 1 0 26 24 18 31 19 31 10 8 0 17 1 17 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = o;
unicode = 111;
},
{
glyphname = oacute;
layers = (
{
anchors = (
{
name = top;
pos = (340,484);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (-12,-4);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHW[ ]	/* 1 value pushed */
-4
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = obreve;
layers = (
{
anchors = (
{
name = top;
pos = (340,484);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (-12,-4);
ref = uni0306;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHW[ ]	/* 1 value pushed */
-4
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = obreve;
unicode = 335;
},
{
glyphname = ocircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (340,484);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (-12,-4);
ref = uni0302;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHW[ ]	/* 1 value pushed */
-4
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ocircumflex;
unicode = 244;
},
{
glyphname = odieresis;
layers = (
{
anchors = (
{
name = top;
pos = (340,484);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (-12,-4);
ref = uni0308;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHW[ ]	/* 1 value pushed */
-4
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = odieresis;
unicode = 246;
},
{
glyphname = ograve;
layers = (
{
anchors = (
{
name = top;
pos = (340,484);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (-12,-4);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHW[ ]	/* 1 value pushed */
-4
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ograve;
unicode = 242;
},
{
glyphname = ohungarumlaut;
layers = (
{
anchors = (
{
name = top;
pos = (340,484);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (-12,-4);
ref = uni030B;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 2
PUSHW[ ]	/* 1 value pushed */
-4
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ohungarumlaut;
unicode = 337;
},
{
glyphname = omacron;
layers = (
{
anchors = (
{
name = top;
pos = (340,484);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (-12,-4);
ref = uni0304;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHW[ ]	/* 1 value pushed */
-4
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = omacron;
unicode = 333;
},
{
glyphname = oslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(422,34,o),
(493,111,o),
(533,212,o),
(533,269,qs),
(533,349,o),
(494,407,q),
(572,488,l),
(497,488,l),
(458,448,l),
(432,471,o),
(363,496,o),
(322,496,qs),
(269,496,o),
(176,453,o),
(106,376,o),
(66,275,o),
(66,218,qs),
(66,138,o),
(105,80,q),
(28,0,l),
(103,0,l),
(141,39,l),
(167,16,o),
(236,-10,o),
(276,-10,qs),
(329,-10,o)
);
},
{
closed = 1;
nodes = (
(137,217,qs),
(137,276,o),
(186,373,o),
(269,431,o),
(319,431,qs),
(373,431,o),
(410,397,q),
(155,132,l),
(137,168,o)
);
},
{
closed = 1;
nodes = (
(188,89,q),
(443,353,l),
(461,317,o),
(461,267,qs),
(461,208,o),
(413,112,o),
(331,55,o),
(280,55,qs),
(225,55,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
16 1 4 2 42 41 27 19 6 5 5 4 3 1 0 5 3 76
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
16 1 4 2 42 41 27 19 6 5 5 4 3 1 1 5 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
16 1 4 3 42 41 27 19 6 5 5 4 3 1 1 5 3 76
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 4 4 2 97 3 1 2 2 29 77 7 1 5 5 0 97 1 6 2 0 0 30 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 4 4 2 97 3 1 2 2 29 77 0 1 1 21 77 7 1 5 5 0 97 6 1 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 3 3 23 77 0 4 4 2 97 0 2 2 29 77 0 1 1 21 77 7 1 5 5 0 97 6 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
36 35 1 0 35 43 36 43 30 28 18 17 14 12 5 4 0 25 1 25 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = oslash;
unicode = 248;
},
{
glyphname = otilde;
layers = (
{
anchors = (
{
name = top;
pos = (340,484);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = o;
},
{
alignment = -1;
pos = (-12,-4);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
2 1
PUSHW[ ]	/* 1 value pushed */
-4
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = otilde;
unicode = 245;
},
{
glyphname = oe;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(252,42,o),
(280,87,q),
(311,-10,o),
(416,-10,qs),
(479,-10,o),
(540,26,q),
(512,84,l),
(468,54,o),
(417,54,qs),
(376,54,o),
(330,119,o),
(330,177,qs),
(330,190,o),
(332,215,o),
(334,228,q),
(577,228,l),
(586,266,o),
(593,316,o),
(593,337,qs),
(593,411,o),
(528,496,o),
(471,496,qs),
(430,496,o),
(357,445,o),
(329,401,q),
(316,447,o),
(260,496,o),
(220,496,qs),
(179,496,o),
(105,445,o),
(48,355,o),
(15,238,o),
(15,173,qs),
(15,88,o),
(81,-10,o),
(136,-10,qs),
(178,-10,o)
);
},
{
closed = 1;
nodes = (
(537,353,o),
(522,280,q),
(344,280,l),
(362,348,o),
(430,435,o),
(464,435,qs),
(506,435,o)
);
},
{
closed = 1;
nodes = (
(82,117,o),
(82,172,qs),
(82,222,o),
(104,315,o),
(142,390,o),
(189,434,o),
(214,434,qs),
(244,434,o),
(279,371,o),
(279,315,qs),
(279,266,o),
(257,173,o),
(219,98,o),
(172,54,o),
(147,54,qs),
(117,54,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 86 values pushed */
11 1 7 6 34 29 2 4 3 30 1 0 4 3 76 0 7 0 3 4 7 3 103 9 11 2 6 6 1 97 2 1 1 1 29 77 12 8 2 4 4 0 97 5 10 2 0 0 30 0 78 45 44 38 37 1 0 53 51 44 59 45 59 41 40 37 43 38 43 33 31 28 26 21 20 15 13 9 7 0 36 1 36 13 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = oe;
unicode = 339;
},
{
glyphname = p;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,79,l),
(153,38,o),
(234,-7,o),
(286,-7,qs),
(338,-7,o),
(430,37,o),
(499,114,o),
(539,215,o),
(539,272,qs),
(539,336,o),
(488,436,o),
(400,494,o),
(344,494,qs),
(262,494,o),
(203,435,q),
(214,488,l),
(143,488,l),
(-6,-209,l),
(66,-209,l)
);
},
{
closed = 1;
nodes = (
(158,101,o),
(140,138,q),
(192,379,l),
(247,432,o),
(318,432,qs),
(385,432,o),
(468,340,o),
(468,266,qs),
(468,208,o),
(417,113,o),
(331,57,o),
(277,57,qs),
(234,57,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
3 1 5 0 29 17 2 4 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 0 97 1 1 0 0 23 77 7 1 4 4 2 97 0 2 2 27 77 6 1 3 3 25 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 0 97 1 1 0 0 23 77 7 1 4 4 2 97 0 2 2 30 77 6 1 3 3 25 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 23 77 0 5 5 1 97 0 1 1 29 77 7 1 4 4 2 97 0 2 2 30 77 6 1 3 3 25 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
20 19 0 0 27 25 19 31 20 31 0 18 0 18 39 34 17 8 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = p;
unicode = 112;
},
{
glyphname = thorn;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(128,78,l),
(154,38,o),
(235,-7,o),
(286,-7,qs),
(338,-7,o),
(430,37,o),
(499,114,o),
(539,215,o),
(539,272,qs),
(539,336,o),
(488,436,o),
(400,494,o),
(344,494,qs),
(304,494,o),
(234,465,o),
(205,438,q),
(269,737,l),
(193,722,l),
(-6,-209,l),
(67,-209,l)
);
},
{
closed = 1;
nodes = (
(159,101,o),
(141,136,q),
(193,380,l),
(248,432,o),
(318,432,qs),
(385,432,o),
(468,340,o),
(468,266,qs),
(468,208,o),
(417,113,o),
(331,57,o),
(277,57,qs),
(234,57,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */
3 1 4 0 30 18 2 3 4 2 76 2 1 0 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 0 97 0 0 0 29 77 6 1 3 3 1 97 0 1 1 27 77 5 1 2 2 25 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 4 4 0 97 0 0 0 29 77 6 1 3 3 1 97 0 1 1 30 77 5 1 2 2 25 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
21 20 0 0 28 26 20 32 21 32 0 19 0 19 39 37 7 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = thorn;
unicode = 254;
},
{
glyphname = q;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(562,488,l),
(491,488,l),
(474,404,l),
(451,446,o),
(367,494,o),
(313,494,qs),
(261,494,o),
(169,450,o),
(100,373,o),
(60,272,o),
(60,214,qs),
(60,151,o),
(111,51,o),
(199,-7,o),
(255,-7,qs),
(296,-7,o),
(368,23,o),
(396,51,q),
(341,-209,l),
(414,-209,l)
);
},
{
closed = 1;
nodes = (
(131,147,o),
(131,220,qs),
(131,279,o),
(182,374,o),
(269,430,o),
(322,430,qs),
(366,430,o),
(441,385,o),
(459,348,q),
(409,109,l),
(353,55,o),
(281,55,qs),
(214,55,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
23 16 2 4 5 1 1 0 4 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 1 97 2 1 1 1 29 77 7 1 4 4 0 97 0 0 0 27 77 6 1 3 3 25 3 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 1 97 2 1 1 1 29 77 7 1 4 4 0 97 0 0 0 30 77 6 1 3 3 25 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 23 77 0 5 5 1 97 0 1 1 29 77 7 1 4 4 0 97 0 0 0 30 77 6 1 3 3 25 3 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 20 values pushed */
21 20 0 0 27 25 20 32 21 32 0 19 0 19 19 39 35 8 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
layers = (
{
anchors = (
{
name = ogonek;
pos = (212,0);
},
{
name = top;
pos = (425,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(403,60,l),
(261,60,l),
(316,321,l),
(349,375,o),
(436,432,o),
(492,432,qs),
(512,432,o),
(558,422,o),
(586,406,q),
(600,473,l),
(578,485,o),
(529,496,o),
(507,496,qs),
(448,496,o),
(359,434,o),
(329,378,q),
(352,488,l),
(145,488,l),
(132,428,l),
(266,428,l),
(188,60,l),
(54,60,l),
(41,0,l),
(390,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */
13 1 1 2 14 7 2 0 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
4 1 1 1 2 97 3 1 2 2 23 77 5 1 0 0 6 95 7 1 6 6 21 6 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
4 1 1 1 3 97 0 3 3 29 77 4 1 1 1 2 95 0 2 2 23 77 5 1 0 0 6 95 7 1 6 6 21 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 15 values pushed */
0 0 0 23 0 23 19 37 35 17 17 17 8 7 28
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = r;
unicode = 114;
},
{
glyphname = racute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (212,0);
},
{
name = top;
pos = (425,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (73,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = racute;
unicode = 341;
},
{
glyphname = rcaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (212,0);
},
{
name = top;
pos = (425,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (73,0);
ref = uni030C;
}
);
width = 600;
}
);
note = rcaron;
unicode = 345;
},
{
glyphname = uni0157;
layers = (
{
anchors = (
{
name = ogonek;
pos = (212,0);
},
{
name = top;
pos = (425,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = r;
},
{
alignment = -1;
pos = (-36,0);
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni0157;
unicode = 343;
},
{
glyphname = s;
layers = (
{
anchors = (
{
name = ogonek;
pos = (270,0);
},
{
name = top;
pos = (312,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(432,29,o),
(483,97,o),
(483,140,qs),
(483,186,o),
(439,238,o),
(369,265,o),
(292,279,o),
(222,296,o),
(178,328,o),
(178,359,qs),
(178,394,o),
(240,436,o),
(295,436,qs),
(337,436,o),
(425,398,o),
(464,362,q),
(507,412,l),
(462,456,o),
(351,496,o),
(292,496,qs),
(207,496,o),
(113,416,o),
(113,352,qs),
(113,306,o),
(157,254,o),
(225,227,o),
(303,212,o),
(371,197,o),
(415,166,o),
(415,136,qs),
(415,97,o),
(347,49,o),
(290,49,qs),
(243,49,o),
(157,84,o),
(107,131,q),
(63,84,l),
(104,40,o),
(221,-10,o),
(284,-10,qs),
(343,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
24 23 4 3 4 1 3 1 76 0 3 3 2 97 0 2 2 29 77 0 1 1 0 97 4 1 0 0 30 0 78 1 0 28 26 21 19 8 6 0 40 1 40 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = s;
unicode = 115;
},
{
glyphname = sacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (270,0);
},
{
name = top;
pos = (312,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (-40,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = sacute;
unicode = 347;
},
{
glyphname = scaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (270,0);
},
{
name = top;
pos = (312,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (-40,0);
ref = uni030C;
}
);
width = 600;
}
);
note = scaron;
unicode = 353;
},
{
glyphname = scedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(343,-181,o),
(343,-138,qs),
(343,-109,o),
(300,-69,o),
(262,-66,q),
(287,-10,l),
(344,-10,o),
(432,29,o),
(483,97,o),
(483,140,qs),
(483,186,o),
(439,238,o),
(369,265,o),
(292,279,o),
(222,296,o),
(178,328,o),
(178,359,qs),
(178,394,o),
(240,436,o),
(295,436,qs),
(337,436,o),
(425,398,o),
(464,362,q),
(507,412,l),
(462,456,o),
(351,496,o),
(292,496,qs),
(207,496,o),
(113,416,o),
(113,352,qs),
(113,306,o),
(157,254,o),
(225,227,o),
(303,212,o),
(371,197,o),
(415,166,o),
(415,136,qs),
(415,97,o),
(347,49,o),
(290,49,qs),
(243,49,o),
(157,84,o),
(107,131,q),
(63,84,l),
(98,47,o),
(194,-1,o),
(246,-8,q),
(205,-99,l),
(233,-99,ls),
(263,-99,o),
(297,-123,o),
(297,-144,qs),
(297,-169,o),
(258,-199,o),
(225,-199,qs),
(181,-199,o),
(152,-167,q),
(121,-197,l),
(138,-217,o),
(193,-239,o),
(227,-239,qs),
(277,-239,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
38 37 18 17 4 3 5 14 1 6 3 56 1 2 6 4 3 2 1 2 4 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 2 6 1 6 2 114 0 5 5 4 97 0 4 4 29 77 0 3 3 6 97 0 6 6 30 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
0 2 6 1 6 2 1 128 0 5 5 4 97 0 4 4 29 77 0 3 3 6 97 0 6 6 30 77 0 1 1 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
0 2 6 1 6 2 1 128 0 1 7 1 0 1 0 101 0 5 5 4 97 0 4 4 29 77 0 3 3 6 97 0 6 6 30 6 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 55 54 42 40 35 33 22 20 13 11 7 5 0 61 1 61 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = scedilla;
unicode = 351;
},
{
glyphname = scircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (270,0);
},
{
name = top;
pos = (312,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (-40,0);
ref = uni0302;
}
);
width = 600;
}
);
note = scircumflex;
unicode = 349;
},
{
glyphname = uni0219;
layers = (
{
anchors = (
{
name = ogonek;
pos = (270,0);
},
{
name = top;
pos = (312,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = s;
},
{
alignment = -1;
pos = (22,0);
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni0219;
unicode = 537;
},
{
glyphname = germandbls;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(498,29,o),
(542,96,o),
(542,136,qs),
(542,184,o),
(502,243,o),
(444,280,o),
(385,306,o),
(345,335,o),
(345,357,qs),
(345,378,o),
(385,409,o),
(444,440,o),
(502,479,o),
(542,537,o),
(542,580,qs),
(542,628,o),
(495,698,o),
(416,737,o),
(368,737,qs),
(271,737,o),
(154,633,o),
(134,536,qs),
(20,0,l),
(93,0,l),
(205,527,ls),
(237,674,o),
(368,674,qs),
(417,674,o),
(475,620,o),
(475,580,qs),
(475,547,o),
(435,505,o),
(377,474,o),
(319,440,o),
(279,393,o),
(279,356,qs),
(279,318,o),
(319,271,o),
(377,241,o),
(435,212,o),
(475,171,o),
(475,137,qs),
(475,98,o),
(416,47,o),
(367,47,qs),
(327,47,o),
(259,77,o),
(238,108,q),
(192,65,l),
(223,26,o),
(315,-11,o),
(366,-11,qs),
(419,-11,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
4 3 2 1 2 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 2 2 4 97 0 4 4 22 77 0 1 1 0 97 3 5 2 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 27 values pushed */
0 2 2 4 97 0 4 4 22 77 0 3 3 21 77 0 1 1 0 97 5 1 0 0 27 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 34 32 29 28 26 24 8 6 0 52 1 52 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = germandbls;
unicode = 223;
},
{
glyphname = t;
layers = (
{
anchors = (
{
name = ogonek;
pos = (317,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(460,14,q),
(474,80,l),
(403,54,o),
(352,54,qs),
(297,54,o),
(253,96,o),
(263,145,qs),
(323,428,l),
(548,428,l),
(561,488,l),
(336,488,l),
(368,639,l),
(291,622,l),
(263,488,l),
(96,488,l),
(83,428,l),
(250,428,l),
(191,148,ls),
(176,77,o),
(256,-10,o),
(341,-10,qs),
(402,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
19 1 5 1 1 76 9 1 2 74 4 1 1 1 2 95 3 1 2 2 23 77 0 5 5 0 97 6 1 0 0 30 0 78 1 0 18 16 13 12 11 10 7 6 5 4 0 21 1 21 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = t;
unicode = 116;
},
{
glyphname = tbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,251,l),
(191,148,ls),
(176,77,o),
(256,-10,o),
(341,-10,qs),
(402,-10,o),
(460,14,q),
(474,80,l),
(403,54,o),
(352,54,qs),
(297,54,o),
(253,96,o),
(263,145,qs),
(285,251,l),
(511,251,l),
(523,305,l),
(297,305,l),
(323,428,l),
(548,428,l),
(561,488,l),
(336,488,l),
(368,639,l),
(291,622,l),
(263,488,l),
(96,488,l),
(83,428,l),
(250,428,l),
(224,305,l),
(58,305,l),
(47,251,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
21 1 7 6 1 76 7 1 2 74 5 1 0 9 1 6 7 0 6 103 4 1 1 1 2 95 3 1 2 2 23 77 0 7 7 8 97 0 8 8 30 8 78 29 28 35 35 17 17 17 19 17 17 16 10 7 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = tbar;
unicode = 359;
},
{
glyphname = tcaron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (317,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(573,787,l),
(494,773,l),
(445,577,l),
(503,577,l)
);
},
{
closed = 1;
nodes = (
(460,14,q),
(474,80,l),
(403,54,o),
(352,54,qs),
(297,54,o),
(253,96,o),
(263,145,qs),
(323,428,l),
(548,428,l),
(561,488,l),
(336,488,l),
(368,639,l),
(291,622,l),
(263,488,l),
(96,488,l),
(83,428,l),
(250,428,l),
(191,148,ls),
(176,77,o),
(256,-10,o),
(341,-10,qs),
(402,-10,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
23 1 6 2 1 76 13 2 2 0 74 7 1 0 3 0 133 5 1 2 2 3 95 4 1 3 3 23 77 0 6 6 1 97 8 1 1 1 30 1 78 5 4 0 0 22 20 17 16 15 14 11 10 9 8 4 25 5 25 0 3 0 3 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = tcaron;
unicode = 357;
},
{
glyphname = uni0163;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(390,-181,o),
(390,-138,qs),
(390,-109,o),
(347,-69,o),
(309,-66,q),
(334,-10,l),
(341,-10,ls),
(402,-10,o),
(460,14,q),
(474,80,l),
(403,54,o),
(352,54,qs),
(297,54,o),
(253,96,o),
(263,145,qs),
(323,428,l),
(548,428,l),
(561,488,l),
(336,488,l),
(368,639,l),
(291,622,l),
(263,488,l),
(96,488,l),
(83,428,l),
(250,428,l),
(191,148,ls),
(178,87,o),
(232,6,o),
(293,-6,q),
(252,-99,l),
(280,-99,ls),
(310,-99,o),
(344,-123,o),
(344,-144,qs),
(344,-169,o),
(305,-199,o),
(272,-199,qs),
(228,-199,o),
(199,-167,q),
(168,-197,l),
(185,-217,o),
(240,-239,o),
(274,-239,qs),
(324,-239,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */
33 1 7 3 14 1 8 7 38 1 2 8 4 3 2 1 2 4 76 23 1 4 74
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 41 values pushed */
0 2 8 1 8 2 114 6 1 3 3 4 95 5 1 4 4 23 77 0 7 7 8 97 0 8 8 30 77 0 1 1 0 97 9 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 2 8 1 8 2 1 128 6 1 3 3 4 95 5 1 4 4 23 77 0 7 7 8 97 0 8 8 30 77 0 1 1 0 97 9 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 39 values pushed */
0 2 8 1 8 2 1 128 0 1 9 1 0 1 0 101 6 1 3 3 4 95 5 1 4 4 23 77 0 7 7 8 97 0 8 8 30 8 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
1 0 36 35 32 30 27 26 25 24 21 20 19 18 13 11 7 5 0 43 1 43 10 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni0163;
unicode = 355;
},
{
glyphname = uni021B;
layers = (
{
anchors = (
{
name = ogonek;
pos = (317,0);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = t;
},
{
alignment = -1;
pos = (69,0);
ref = commabelowcomb;
}
);
width = 600;
}
);
note = uni021B;
unicode = 539;
},
{
glyphname = u;
layers = (
{
anchors = (
{
name = ogonek;
pos = (449,0);
},
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(392,75,q),
(376,0,l),
(449,0,l),
(553,488,l),
(480,488,l),
(403,127,l),
(343,52,o),
(260,52,qs),
(202,52,o),
(147,134,o),
(161,201,qs),
(222,488,l),
(149,488,l),
(86,190,ls),
(74,132,o),
(102,42,o),
(176,-8,o),
(230,-8,qs),
(323,-8,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
17 1 2 1 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 23 77 0 2 2 0 98 4 5 2 0 0 30 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 23 77 0 2 2 0 98 4 5 2 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
3 1 1 1 23 77 0 2 2 0 98 4 5 2 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
3 1 1 1 23 77 0 4 4 21 77 0 2 2 0 98 5 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 17 values pushed */
1 0 16 15 14 13 11 9 6 5 0 18 1 18 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = u;
unicode = 117;
},
{
glyphname = uacute;
layers = (
{
anchors = (
{
name = ogonek;
pos = (449,0);
},
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (-1,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ubreve;
layers = (
{
anchors = (
{
name = ogonek;
pos = (449,0);
},
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (-1,0);
ref = uni0306;
}
);
width = 600;
}
);
note = ubreve;
unicode = 365;
},
{
glyphname = ucircumflex;
layers = (
{
anchors = (
{
name = ogonek;
pos = (449,0);
},
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (-1,0);
ref = uni0302;
}
);
width = 600;
}
);
note = ucircumflex;
unicode = 251;
},
{
glyphname = udieresis;
layers = (
{
anchors = (
{
name = ogonek;
pos = (449,0);
},
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (-1,0);
ref = uni0308;
}
);
width = 600;
}
);
note = udieresis;
unicode = 252;
},
{
glyphname = ugrave;
layers = (
{
anchors = (
{
name = ogonek;
pos = (449,0);
},
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (-1,0);
ref = gravecomb;
}
);
width = 600;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uhungarumlaut;
layers = (
{
anchors = (
{
name = ogonek;
pos = (449,0);
},
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (-1,0);
ref = uni030B;
}
);
width = 600;
}
);
note = uhungarumlaut;
unicode = 369;
},
{
glyphname = umacron;
layers = (
{
anchors = (
{
name = ogonek;
pos = (449,0);
},
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (-1,0);
ref = uni0304;
}
);
width = 600;
}
);
note = umacron;
unicode = 363;
},
{
glyphname = uogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(428,-218,q),
(424,-178,l),
(414,-182,o),
(389,-187,o),
(378,-187,qs),
(352,-187,o),
(318,-161,o),
(318,-139,qs),
(318,-71,o),
(449,0,q),
(553,488,l),
(480,488,l),
(403,127,l),
(343,52,o),
(260,52,qs),
(202,52,o),
(147,134,o),
(161,201,qs),
(222,488,l),
(149,488,l),
(86,190,ls),
(74,132,o),
(102,42,o),
(176,-8,o),
(230,-8,qs),
(323,-8,o),
(392,75,q),
(376,0,l),
(389,0,l),
(267,-71,o),
(267,-154,qs),
(267,-189,o),
(319,-232,o),
(362,-232,qs),
(400,-232,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 14 values pushed */
7 1 4 3 32 1 6 1 33 1 0 6 3 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 14 values pushed */
7 1 4 3 32 1 6 2 33 1 0 6 3 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
5 1 3 3 23 77 0 4 4 1 98 2 1 1 1 21 77 0 6 6 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 33 values pushed */
5 1 3 3 23 77 0 1 1 21 77 0 4 4 2 98 0 2 2 30 77 0 6 6 0 97 7 1 0 0 31 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 30 values pushed */
0 6 7 1 0 6 0 101 5 1 3 3 23 77 0 1 1 21 77 0 4 4 2 98 0 2 2 30 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
1 0 30 28 23 22 20 18 15 14 10 8 6 5 0 34 1 34 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uogonek;
unicode = 371;
},
{
glyphname = uring;
layers = (
{
anchors = (
{
name = ogonek;
pos = (449,0);
},
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (-1,0);
ref = uni030A;
}
);
width = 600;
}
);
note = uring;
unicode = 367;
},
{
glyphname = utilde;
layers = (
{
anchors = (
{
name = ogonek;
pos = (449,0);
},
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = u;
},
{
alignment = -1;
pos = (-1,0);
ref = tildecomb;
}
);
width = 600;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = v;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(597,488,l),
(515,488,l),
(265,84,l),
(180,488,l),
(107,488,l),
(211,0,l),
(281,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
3 1 2 0 1 76 1 1 0 0 23 77 3 1 2 2 21 2 78 0 0 0 6 0 6 18 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = v;
unicode = 118;
},
{
glyphname = w;
layers = (
{
anchors = (
{
name = top;
pos = (355,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(333,392,l),
(344,0,l),
(408,0,l),
(609,488,l),
(546,488,l),
(398,101,l),
(385,488,l),
(320,488,l),
(142,101,l),
(159,488,l),
(95,488,l),
(84,0,l),
(153,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 23 77 5 4 2 3 3 21 3 78 0 0 0 12 0 12 17 18 18 17 6 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = w;
unicode = 119;
},
{
glyphname = wacute;
layers = (
{
anchors = (
{
name = top;
pos = (355,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (3,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = wacute;
unicode = 7811;
},
{
glyphname = wcircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (355,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (3,0);
ref = uni0302;
}
);
width = 600;
}
);
note = wcircumflex;
unicode = 373;
},
{
glyphname = wdieresis;
layers = (
{
anchors = (
{
name = top;
pos = (355,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (3,0);
ref = uni0308;
}
);
width = 600;
}
);
note = wdieresis;
unicode = 7813;
},
{
glyphname = wgrave;
layers = (
{
anchors = (
{
name = top;
pos = (355,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = w;
},
{
alignment = -1;
pos = (3,0);
ref = gravecomb;
}
);
width = 600;
}
);
note = wgrave;
unicode = 7809;
},
{
glyphname = x;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(294,200,l),
(409,0,l),
(491,0,l),
(346,247,l),
(589,488,l),
(500,488,l),
(314,302,l),
(211,488,l),
(129,488,l),
(262,256,l),
(5,0,l),
(94,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */
10 7 4 1 4 2 0 1 76 1 1 0 0 23 77 4 3 2 2 2 21 2 78 0 0 0 11 0 11 18 18 18 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = x;
unicode = 120;
},
{
glyphname = y;
layers = (
{
anchors = (
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(176,-177,o),
(213,-117,qs),
(583,488,l),
(504,488,l),
(256,77,l),
(182,488,l),
(107,488,l),
(200,-9,l),
(149,-93,ls),
(130,-125,o),
(94,-150,o),
(65,-150,qs),
(34,-150,o),
(-5,-132,q),
(-19,-201,l),
(0,-209,o),
(39,-219,o),
(57,-219,qs),
(107,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
13 10 4 3 1 2 3 1 0 1 2 76 3 1 2 2 23 77 0 1 1 0 97 4 1 0 0 31 0 78 1 0 15 14 12 11 7 5 0 18 1 18 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = y;
unicode = 121;
},
{
glyphname = yacute;
layers = (
{
anchors = (
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (-1,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ycircumflex;
layers = (
{
anchors = (
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (-1,0);
ref = uni0302;
}
);
width = 600;
}
);
note = ycircumflex;
unicode = 375;
},
{
glyphname = ydieresis;
layers = (
{
anchors = (
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (-1,0);
ref = uni0308;
}
);
width = 600;
}
);
note = ydieresis;
unicode = 255;
},
{
glyphname = ygrave;
layers = (
{
anchors = (
{
name = top;
pos = (351,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = y;
},
{
alignment = -1;
pos = (-1,0);
ref = gravecomb;
}
);
width = 600;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = z;
layers = (
{
anchors = (
{
name = top;
pos = (355,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(465,66,l),
(155,65,l),
(542,431,l),
(554,488,l),
(154,488,l),
(141,421,l),
(442,422,l),
(57,58,l),
(45,0,l),
(451,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 0 0 1 95 0 1 1 23 77 0 2 2 3 95 4 1 3 3 21 3 78 0 0 0 9 0 9 18 17 18 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = z;
unicode = 122;
},
{
glyphname = zacute;
layers = (
{
anchors = (
{
name = top;
pos = (355,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (3,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = zacute;
unicode = 378;
},
{
glyphname = zcaron;
layers = (
{
anchors = (
{
name = top;
pos = (355,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (3,0);
ref = uni030C;
}
);
width = 600;
}
);
note = zcaron;
unicode = 382;
},
{
glyphname = zdotaccent;
layers = (
{
anchors = (
{
name = top;
pos = (355,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = z;
},
{
alignment = -1;
pos = (3,0);
ref = uni0307;
}
);
width = 600;
}
);
note = zdotaccent;
unicode = 380;
},
{
glyphname = g.alt;
layers = (
{
anchors = (
{
name = top;
pos = (320,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(479,-136,o),
(479,-67,qs),
(479,-29,o),
(425,18,o),
(372,25,qs),
(191,49,ls),
(140,55,o),
(140,87,qs),
(140,109,o),
(185,140,o),
(219,143,q),
(250,132,o),
(285,132,qs),
(345,132,o),
(443,186,o),
(502,277,o),
(502,332,qs),
(502,353,o),
(491,392,o),
(481,409,q),
(489,432,o),
(528,460,o),
(553,460,qs),
(566,460,o),
(589,456,o),
(599,453,q),
(613,522,l),
(595,527,o),
(577,527,qs),
(535,527,o),
(476,477,o),
(464,433,q),
(439,462,o),
(366,496,o),
(322,496,qs),
(262,496,o),
(163,442,o),
(105,351,o),
(105,296,qs),
(105,254,o),
(148,183,o),
(184,161,q),
(136,153,o),
(73,98,o),
(73,62,qs),
(73,20,o),
(118,-2,q),
(0,-31,o),
(0,-103,qs),
(0,-156,o),
(131,-219,o),
(240,-219,qs),
(349,-219,o)
);
},
{
closed = 1;
nodes = (
(206,219,o),
(175,270,o),
(175,301,qs),
(175,340,o),
(214,403,o),
(279,440,o),
(318,440,qs),
(350,440,o),
(401,409,o),
(432,358,o),
(432,327,qs),
(432,289,o),
(393,225,o),
(329,188,o),
(289,188,qs),
(258,188,o)
);
},
{
closed = 1;
nodes = (
(70,-124,o),
(70,-89,qs),
(70,-63,o),
(115,-24,o),
(154,-14,q),
(159,-15,o),
(170,-17,o),
(175,-18,qs),
(352,-39,ls),
(378,-42,o),
(404,-68,o),
(404,-86,qs),
(404,-121,o),
(315,-166,o),
(244,-166,qs),
(164,-166,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 95 values pushed */
25 1 1 2 26 1 6 3 32 20 2 5 6 41 10 2 4 5 5 1 7 4 5 76 0 2 0 3 6 2 3 105 9 1 5 0 4 7 5 4 105 0 6 6 1 97 0 1 1 29 77 10 1 7 7 0 97 8 1 0 0 31 0 78 70 69 54 53 1 0 69 84 70 84 62 60 53 68 54 68 40 38 30 28 24 22 18 16 0 52 1 52 11 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = g.alt;
},
{
glyphname = gbreve.alt;
layers = (
{
anchors = (
{
name = top;
pos = (320,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g.alt;
},
{
alignment = -1;
pos = (-32,0);
ref = uni0306;
}
);
width = 600;
}
);
note = gbreve.alt;
},
{
glyphname = gcircumflex.alt;
layers = (
{
anchors = (
{
name = top;
pos = (320,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g.alt;
},
{
alignment = -1;
pos = (-32,0);
ref = uni0302;
}
);
width = 600;
}
);
note = gcircumflex.alt;
},
{
glyphname = uni0123.alt;
layers = (
{
anchors = (
{
name = top;
pos = (320,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(308,610,l),
(385,610,l),
(472,797,l),
(419,797,l)
);
},
{
closed = 1;
nodes = (
(479,-136,o),
(479,-67,qs),
(479,-29,o),
(425,18,o),
(372,25,qs),
(191,49,ls),
(140,55,o),
(140,87,qs),
(140,109,o),
(185,140,o),
(219,143,q),
(250,132,o),
(285,132,qs),
(345,132,o),
(443,186,o),
(502,277,o),
(502,332,qs),
(502,353,o),
(491,392,o),
(481,409,q),
(489,432,o),
(528,460,o),
(553,460,qs),
(566,460,o),
(589,456,o),
(599,453,q),
(613,522,l),
(595,527,o),
(577,527,qs),
(535,527,o),
(476,477,o),
(464,433,q),
(439,462,o),
(366,496,o),
(322,496,qs),
(262,496,o),
(163,442,o),
(105,351,o),
(105,296,qs),
(105,254,o),
(148,183,o),
(184,161,q),
(136,153,o),
(73,98,o),
(73,62,qs),
(73,20,o),
(118,-2,q),
(0,-31,o),
(0,-103,qs),
(0,-156,o),
(131,-219,o),
(240,-219,qs),
(349,-219,o)
);
},
{
closed = 1;
nodes = (
(206,219,o),
(175,270,o),
(175,301,qs),
(175,340,o),
(214,403,o),
(279,440,o),
(318,440,qs),
(350,440,o),
(401,409,o),
(432,358,o),
(432,327,qs),
(432,289,o),
(393,225,o),
(329,188,o),
(289,188,qs),
(258,188,o)
);
},
{
closed = 1;
nodes = (
(70,-124,o),
(70,-89,qs),
(70,-63,o),
(115,-24,o),
(154,-14,q),
(159,-15,o),
(170,-17,o),
(175,-18,qs),
(352,-39,ls),
(378,-42,o),
(404,-68,o),
(404,-86,qs),
(404,-121,o),
(315,-166,o),
(244,-166,qs),
(164,-166,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 113 values pushed */
29 1 3 4 30 1 8 5 36 24 2 7 8 45 14 2 6 7 9 1 9 6 5 76 10 1 1 0 1 133 0 0 4 0 133 0 4 0 5 8 4 5 105 12 1 7 0 6 9 7 6 105 0 8 8 3 97 0 3 3 29 77 13 1 9 9 2 97 11 1 2 2 31 2 78 74 73 58 57 5 4 0 0 73 88 74 88 66 64 57 72 58 72 44 42 34 32 28 26 22 20 4 56 5 56 0 3 0 3 17 14 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni0123.alt;
},
{
glyphname = gdotaccent.alt;
layers = (
{
anchors = (
{
name = top;
pos = (320,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = g.alt;
},
{
alignment = -1;
pos = (-32,0);
ref = uni0307;
}
);
width = 600;
}
);
note = gdotaccent.alt;
},
{
glyphname = a.school;
layers = (
{
anchors = (
{
name = ogonek;
pos = (457,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(397,51,q),
(386,0,l),
(457,0,l),
(561,488,l),
(490,488,l),
(473,407,l),
(420,494,o),
(314,494,qs),
(262,494,o),
(170,450,o),
(101,373,o),
(61,272,o),
(61,215,qs),
(61,151,o),
(112,51,o),
(200,-7,o),
(256,-7,qs),
(337,-7,o)
);
},
{
closed = 1;
nodes = (
(132,147,o),
(132,221,qs),
(132,280,o),
(183,374,o),
(270,430,o),
(323,430,qs),
(367,430,o),
(442,385,o),
(460,349,q),
(409,109,l),
(353,55,o),
(282,55,qs),
(215,55,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 11 values pushed */
21 11 2 4 5 16 1 0 4 2 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 11 values pushed */
21 11 2 4 5 16 1 3 4 2 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 29 77 7 1 4 4 0 97 3 6 2 0 0 27 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 25 values pushed */
0 5 5 1 97 2 1 1 1 29 77 7 1 4 4 0 97 3 6 2 0 0 30 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 1 97 2 1 1 1 29 77 0 3 3 21 77 7 1 4 4 0 97 6 1 0 0 30 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 2 2 23 77 0 5 5 1 97 0 1 1 29 77 0 3 3 21 77 7 1 4 4 0 97 6 1 0 0 30 0 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 23 values pushed */
19 18 1 0 25 23 18 30 19 30 15 14 13 12 10 8 0 17 1 17 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = a.school;
},
{
glyphname = aacute.school;
layers = (
{
anchors = (
{
name = ogonek;
pos = (457,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-13,0);
ref = acutecomb;
}
);
width = 600;
}
);
note = aacute.school;
},
{
glyphname = abreve.school;
layers = (
{
anchors = (
{
name = ogonek;
pos = (457,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-13,0);
ref = uni0306;
}
);
width = 600;
}
);
note = abreve.school;
},
{
glyphname = acircumflex.school;
layers = (
{
anchors = (
{
name = ogonek;
pos = (457,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-13,0);
ref = uni0302;
}
);
width = 600;
}
);
note = acircumflex.school;
},
{
glyphname = adieresis.school;
layers = (
{
anchors = (
{
name = ogonek;
pos = (457,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-13,0);
ref = uni0308;
}
);
width = 600;
}
);
note = adieresis.school;
},
{
glyphname = agrave.school;
layers = (
{
anchors = (
{
name = ogonek;
pos = (457,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-13,0);
ref = gravecomb;
}
);
width = 600;
}
);
note = agrave.school;
},
{
glyphname = amacron.school;
layers = (
{
anchors = (
{
name = ogonek;
pos = (457,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-13,0);
ref = uni0304;
}
);
width = 600;
}
);
note = amacron.school;
},
{
glyphname = aogonek.school;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(436,-218,q),
(432,-178,l),
(422,-182,o),
(397,-187,o),
(386,-187,qs),
(360,-187,o),
(326,-161,o),
(326,-139,qs),
(326,-71,o),
(457,0,q),
(561,488,l),
(490,488,l),
(473,407,l),
(420,494,o),
(314,494,qs),
(262,494,o),
(170,450,o),
(101,373,o),
(61,272,o),
(61,215,qs),
(61,151,o),
(112,51,o),
(200,-7,o),
(256,-7,qs),
(337,-7,o),
(397,51,q),
(386,0,l),
(397,0,l),
(275,-71,o),
(275,-154,qs),
(275,-189,o),
(327,-232,o),
(370,-232,qs),
(408,-232,o)
);
},
{
closed = 1;
nodes = (
(132,147,o),
(132,221,qs),
(132,280,o),
(183,374,o),
(270,430,o),
(323,430,qs),
(367,430,o),
(442,385,o),
(460,349,q),
(409,109,l),
(353,55,o),
(282,55,qs),
(215,55,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
37 20 2 6 7 7 1 1 6 31 1 5 1 32 1 0 5 4 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
37 20 2 6 7 7 1 1 6 31 1 5 2 32 1 0 5 4 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 7 7 3 97 4 1 3 3 29 77 9 1 6 6 1 97 2 1 1 1 21 77 0 5 5 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
38
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 7 7 3 97 4 1 3 3 29 77 0 1 1 21 77 9 1 6 6 2 97 0 2 2 30 77 0 5 5 0 97 8 1 0 0 31 0 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
40
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 5 8 1 0 5 0 101 0 7 7 3 97 4 1 3 3 29 77 0 1 1 21 77 9 1 6 6 2 97 0 2 2 30 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 5 8 1 0 5 0 101 0 4 4 23 77 0 7 7 3 97 0 3 3 29 77 0 1 1 21 77 9 1 6 6 2 97 0 2 2 30 2 78
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
35 34 1 0 41 39 34 46 35 46 29 27 22 21 19 17 10 8 6 5 0 33 1 33 10 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = aogonek.school;
},
{
glyphname = aring.school;
layers = (
{
anchors = (
{
name = ogonek;
pos = (457,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-13,0);
ref = uni030A;
}
);
width = 600;
}
);
note = aring.school;
},
{
glyphname = atilde.school;
layers = (
{
anchors = (
{
name = ogonek;
pos = (457,0);
},
{
name = top;
pos = (339,488);
}
);
layerId = m01;
shapes = (
{
alignment = -1;
ref = a.school;
},
{
alignment = -1;
pos = (-13,0);
ref = tildecomb;
}
);
width = 600;
}
);
note = atilde.school;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(406,358,q),
(399,326,l),
(459,326,l),
(509,558,ls),
(523,626,o),
(448,711,o),
(371,711,qs),
(341,711,o),
(275,697,o),
(234,681,q),
(247,633,l),
(280,645,o),
(333,658,o),
(356,658,qs),
(470,658,o),
(450,564,qs),
(439,513,l),
(416,529,o),
(356,548,o),
(323,548,qs),
(250,548,o),
(160,477,o),
(160,418,qs),
(160,375,o),
(230,319,o),
(290,319,qs),
(351,319,o)
);
},
{
closed = 1;
nodes = (
(221,400,o),
(221,428,qs),
(221,462,o),
(278,504,o),
(321,504,qs),
(358,504,o),
(411,484,o),
(430,468,q),
(415,400,l),
(392,383,o),
(340,367,o),
(311,367,qs),
(269,367,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
16 1 2 3 15 1 1 2 9 1 6 1 31 1 5 6 25 1 0 5 5 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
16 1 2 3 15 1 1 2 9 1 6 1 31 1 5 6 25 1 4 5 5 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
34
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 1 0 6 5 1 6 105 8 1 5 4 7 2 0 5 0 101 0 2 2 3 97 0 3 3 46 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 36 values pushed */
0 4 5 0 5 4 0 128 0 1 0 6 5 1 6 105 8 1 5 7 1 0 5 0 101 0 2 2 3 97 0 3 3 46 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 25 values pushed */
28 27 1 0 35 33 27 39 28 39 24 23 20 18 13 11 7 5 0 26 1 26 9 9 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ordfeminine;
unicode = 170;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(493,377,o),
(552,477,o),
(552,536,qs),
(552,586,o),
(506,665,o),
(426,711,o),
(375,711,qs),
(318,711,o),
(221,651,o),
(162,552,o),
(162,492,qs),
(162,442,o),
(208,363,o),
(288,317,o),
(339,317,qs),
(396,317,o)
);
},
{
closed = 1;
nodes = (
(224,444,o),
(224,497,qs),
(224,537,o),
(262,610,o),
(329,656,o),
(372,656,qs),
(424,656,o),
(490,584,o),
(490,531,qs),
(490,492,o),
(452,419,o),
(386,372,o),
(342,372,qs),
(290,372,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
5 1 2 4 1 0 2 0 101 0 3 3 1 97 0 1 1 46 3 78 17 16 1 0 24 22 16 29 17 29 9 7 0 15 1 15 6 9 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ordmasculine;
unicode = 186;
},
{
glyphname = space;
layers = (
{
layerId = m01;
width = 600;
}
);
note = space;
unicode = 32;
},
{
glyphname = uni00A0;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni00A0;
unicode = 160;
},
{
glyphname = uni2002;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni2002;
unicode = 8194;
},
{
glyphname = uni2003;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni2003;
unicode = 8195;
},
{
glyphname = uni2009;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni2009;
unicode = 8201;
},
{
glyphname = uni200A;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni200A;
unicode = 8202;
},
{
glyphname = uni200B;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uni200B;
unicode = 8203;
},
{
glyphname = uniFEFF;
layers = (
{
layerId = m01;
width = 600;
}
);
note = uniFEFF;
unicode = 65279;
},
{
glyphname = CR;
layers = (
{
layerId = m01;
width = 600;
}
);
note = CR;
unicode = 13;
},
{
glyphname = NULL;
layers = (
{
layerId = m01;
width = 600;
}
);
note = NULL;
},
{
glyphname = period;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(324,35,o),
(324,63,qs),
(324,88,o),
(291,121,o),
(267,121,qs),
(239,121,o),
(196,78,o),
(196,49,qs),
(196,24,o),
(229,-9,o),
(254,-9,qs),
(282,-9,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 1 1 0 97 2 1 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 12 values pushed */
0 1 1 0 97 2 1 0 0 30 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 11 values pushed */
1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = period;
unicode = 46;
},
{
glyphname = comma;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(319,74,l),
(221,74,l),
(122,-157,l),
(179,-157,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = comma;
unicode = 44;
},
{
glyphname = colon;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = period;
},
{
alignment = -1;
pos = (85,397);
ref = period;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
1 1
PUSHW[ ]	/* 1 value pushed */
397
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = colon;
unicode = 58;
},
{
glyphname = semicolon;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (85,397);
ref = period;
},
{
alignment = -1;
ref = comma;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
397
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = semicolon;
unicode = 59;
},
{
glyphname = ellipsis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(119,35,o),
(119,63,qs),
(119,88,o),
(86,121,o),
(62,121,qs),
(34,121,o),
(-9,78,o),
(-9,49,qs),
(-9,24,o),
(24,-9,o),
(49,-9,qs),
(77,-9,o)
);
},
{
closed = 1;
nodes = (
(324,35,o),
(324,63,qs),
(324,88,o),
(291,121,o),
(267,121,qs),
(239,121,o),
(196,78,o),
(196,49,qs),
(196,24,o),
(229,-9,o),
(254,-9,qs),
(282,-9,o)
);
},
{
closed = 1;
nodes = (
(528,35,o),
(528,63,qs),
(528,88,o),
(495,121,o),
(471,121,qs),
(443,121,o),
(400,78,o),
(400,49,qs),
(400,24,o),
(433,-9,o),
(458,-9,qs),
(486,-9,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
5 3 2 1 1 0 97 8 4 7 2 6 5 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
5 3 2 1 1 0 97 8 4 7 2 6 5 0 0 30 0 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
25 24 13 12 1 0 31 29 24 35 25 35 19 17 12 23 13 23 7 5 0 11 1 11 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ellipsis;
unicode = 8230;
},
{
glyphname = exclam;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(441,727,l),
(366,727,l),
(264,215,l),
(321,215,l)
);
},
{
closed = 1;
nodes = (
(324,35,o),
(324,63,qs),
(324,88,o),
(291,121,o),
(267,121,qs),
(239,121,o),
(196,78,o),
(196,49,qs),
(196,24,o),
(229,-9,o),
(254,-9,qs),
(282,-9,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
4 1 1 0 3 0 1 3 128 0 0 0 22 77 0 3 3 2 97 5 1 2 2 27 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
4 1 1 0 3 0 1 3 128 0 0 0 22 77 0 3 3 2 97 5 1 2 2 30 2 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
5 4 0 0 11 9 4 15 5 15 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = exclam;
unicode = 33;
},
{
glyphname = exclamdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(282,482,o),
(282,454,qs),
(282,429,o),
(315,396,o),
(339,396,qs),
(368,396,o),
(410,440,o),
(410,468,qs),
(410,493,o),
(377,526,o),
(352,526,qs),
(324,526,o)
);
},
{
closed = 1;
nodes = (
(165,-210,l),
(240,-210,l),
(342,302,l),
(285,302,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
5 1 3 1 2 1 3 2 128 4 1 0 0 1 3 0 1 105 0 2 2 25 2 78 12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = exclamdown;
unicode = 161;
},
{
glyphname = question;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(300,258,o),
(344,313,o),
(405,352,o),
(472,388,o),
(530,433,o),
(566,500,o),
(566,552,qs),
(566,596,o),
(518,666,o),
(432,707,o),
(376,707,qs),
(318,707,o),
(206,655,o),
(159,606,q),
(207,562,l),
(244,600,o),
(329,641,o),
(372,641,qs),
(427,641,o),
(495,587,o),
(495,545,qs),
(495,507,o),
(459,456,o),
(402,417,o),
(338,380,o),
(278,333,o),
(237,266,o),
(233,215,q),
(295,215,l)
);
},
{
closed = 1;
nodes = (
(298,35,o),
(298,63,qs),
(298,88,o),
(265,121,o),
(241,121,qs),
(213,121,o),
(170,78,o),
(170,49,qs),
(170,24,o),
(203,-9,o),
(228,-9,qs),
(256,-9,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */
14 13 2 2 0 1 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 31 values pushed */
5 1 2 0 4 0 2 4 128 0 0 0 1 97 0 1 1 26 77 0 4 4 3 97 6 1 3 3 27 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
5 1 2 0 4 0 2 4 128 0 0 0 1 97 0 1 1 26 77 0 4 4 3 97 6 1 3 3 30 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
30 29 0 0 36 34 29 40 30 40 0 28 0 28 37 41 7 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = question;
unicode = 63;
},
{
glyphname = questiondown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(301,453,o),
(301,425,qs),
(301,400,o),
(334,367,o),
(358,367,qs),
(387,367,o),
(429,411,o),
(429,439,qs),
(429,464,o),
(396,497,o),
(371,497,qs),
(343,497,o)
);
},
{
closed = 1;
nodes = (
(299,230,o),
(255,175,o),
(194,136,o),
(127,100,o),
(69,55,o),
(33,-13,o),
(33,-64,qs),
(33,-108,o),
(81,-178,o),
(167,-219,o),
(223,-219,qs),
(281,-219,o),
(394,-167,o),
(440,-118,q),
(392,-74,l),
(355,-111,o),
(271,-153,o),
(227,-153,qs),
(172,-153,o),
(104,-99,o),
(104,-57,qs),
(104,-19,o),
(140,32,o),
(197,71,o),
(261,108,o),
(321,155,o),
(362,223,o),
(366,273,q),
(304,273,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
26 25 2 2 4 1 76 6 1 4 1 2 1 4 2 128 0 1 1 0 97 5 1 0 0 29 77 0 2 2 3 97 0 3 3 31 3 78 12 12 1 0 12 40 12 40 30 28 23 21 7 5 0 11 1 11 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = questiondown;
unicode = 191;
},
{
glyphname = periodcentered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,272,o),
(374,300,qs),
(374,325,o),
(341,358,o),
(317,358,qs),
(289,358,o),
(246,315,o),
(246,286,qs),
(246,261,o),
(279,228,o),
(304,228,qs),
(332,228,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = periodcentered;
unicode = 183;
},
{
glyphname = bullet;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(391,285,o),
(421,336,o),
(421,364,qs),
(421,402,o),
(370,454,o),
(334,454,qs),
(305,454,o),
(255,423,o),
(225,372,o),
(225,343,qs),
(225,305,o),
(277,253,o),
(314,253,qs),
(342,253,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 8 6 0 13 1 13 3 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = bullet;
unicode = 8226;
},
{
glyphname = asterisk;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(370,454,l),
(493,344,l),
(530,386,l),
(400,496,l),
(555,580,l),
(534,627,l),
(389,545,l),
(422,700,l),
(372,700,l),
(341,544,l),
(222,649,l),
(187,608,l),
(310,504,l),
(158,414,l),
(178,365,l),
(323,456,l),
(284,292,l),
(335,292,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
16 15 14 13 12 11 10 7 6 5 4 3 2 1 14 1 0 1 76 2 1 1 0 1 134 0 0 0 20 0 78 0 0 0 17 0 17 24 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = asterisk;
unicode = 42;
},
{
glyphname = numbersign;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(179,219,l),
(322,219,l),
(202,0,l),
(268,0,l),
(388,219,l),
(523,219,l),
(535,277,l),
(420,277,l),
(500,423,l),
(613,423,l),
(626,481,l),
(532,481,l),
(652,700,l),
(586,700,l),
(466,481,l),
(323,481,l),
(443,700,l),
(377,700,l),
(257,481,l),
(122,481,l),
(109,423,l),
(225,423,l),
(145,277,l),
(31,277,l),
(19,219,l),
(113,219,l),
(-7,0,l),
(59,0,l)
);
},
{
closed = 1;
nodes = (
(434,423,l),
(354,277,l),
(211,277,l),
(291,423,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */
14 9 2 1 12 10 2 0 11 1 0 103 6 1 4 4 20 77 15 8 2 2 2 3 95 7 5 2 3 3 23 77 16 13 2 11 11 21 11 78 0 0 31 30 29 28 0 27 0 27 26 25 24 23 22 21 20 19 17 17 17 17 17 17 17 17 17 17 7 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = numbersign;
unicode = 35;
},
{
glyphname = slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(611,700,l),
(532,700,l),
(-60,-209,l),
(19,-209,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 20 77 2 1 1 1 25 1 78 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = slash;
unicode = 47;
},
{
glyphname = backslash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(257,700,l),
(187,700,l),
(394,-209,l),
(464,-209,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 20 77 2 1 1 1 25 1 78 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = backslash;
unicode = 92;
},
{
glyphname = exclamdown.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(322,670,o),
(322,642,qs),
(322,617,o),
(355,584,o),
(379,584,qs),
(408,584,o),
(450,628,o),
(450,656,qs),
(450,681,o),
(417,714,o),
(392,714,qs),
(364,714,o)
);
},
{
closed = 1;
nodes = (
(205,-22,l),
(280,-22,l),
(382,490,l),
(325,490,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
0 1 1 0 97 4 1 0 0 26 77 5 1 3 3 23 77 0 2 2 21 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 2 3 2 134 0 1 1 0 97 4 1 0 0 26 77 5 1 3 3 23 3 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = exclamdown.case;
},
{
glyphname = questiondown.case;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(346,661,o),
(346,633,qs),
(346,608,o),
(379,575,o),
(403,575,qs),
(432,575,o),
(474,619,o),
(474,647,qs),
(474,672,o),
(441,705,o),
(416,705,qs),
(388,705,o)
);
},
{
closed = 1;
nodes = (
(344,438,o),
(300,383,o),
(239,344,o),
(172,308,o),
(114,263,o),
(78,196,o),
(78,144,qs),
(78,100,o),
(126,30,o),
(212,-11,o),
(268,-11,qs),
(326,-11,o),
(439,41,o),
(485,90,q),
(437,134,l),
(400,97,o),
(316,55,o),
(272,55,qs),
(217,55,o),
(149,109,o),
(149,151,qs),
(149,189,o),
(185,240,o),
(242,279,o),
(306,316,o),
(366,363,o),
(407,431,o),
(411,481,q),
(349,481,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
26 25 2 2 4 1 76 0 1 1 0 97 5 1 0 0 20 77 6 1 4 4 23 77 0 2 2 3 97 0 3 3 27 3 78 12 12 1 0 12 40 12 40 30 28 23 21 7 5 0 11 1 11 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = questiondown.case;
},
{
glyphname = periodcentered.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (14,65);
ref = periodcentered;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHB[ ]	/* 1 value pushed */
65
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = periodcentered.case;
},
{
glyphname = periodcentered.loclCAT;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = periodcentered;
}
);
width = 600;
}
);
note = periodcentered.loclCAT;
},
{
glyphname = periodcentered.loclCAT.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (15,70);
ref = periodcentered;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHB[ ]	/* 1 value pushed */
70
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = periodcentered.loclCAT.case;
},
{
glyphname = hyphen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(480,310,l),
(147,310,l),
(135,250,l),
(468,250,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = hyphen;
unicode = 45;
},
{
glyphname = endash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(528,310,l),
(100,310,l),
(87,250,l),
(515,250,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = endash;
unicode = 8211;
},
{
glyphname = emdash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(599,310,l),
(29,310,l),
(16,250,l),
(586,250,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = emdash;
unicode = 8212;
},
{
glyphname = uni2015;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(614,310,l),
(14,310,l),
(1,250,l),
(601,250,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2015;
unicode = 8213;
},
{
glyphname = underscore;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(461,-80,l),
(1,-80,l),
(-11,-137,l),
(449,-137,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = underscore;
unicode = 95;
},
{
glyphname = hyphen.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (14,68);
ref = hyphen;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHB[ ]	/* 1 value pushed */
68
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = hyphen.case;
},
{
glyphname = endash.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (14,68);
ref = endash;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHB[ ]	/* 1 value pushed */
68
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = endash.case;
},
{
glyphname = emdash.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (14,68);
ref = emdash;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHB[ ]	/* 1 value pushed */
68
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = emdash.case;
},
{
glyphname = uni2015.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (14,68);
ref = uni2015;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHB[ ]	/* 1 value pushed */
68
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2015.case;
},
{
glyphname = parenleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(304,-109,o),
(219,74,o),
(219,174,qs),
(219,265,o),
(293,448,o),
(448,607,o),
(567,660,q),
(540,714,l),
(408,658,o),
(234,483,o),
(149,276,o),
(149,171,qs),
(149,56,o),
(246,-151,o),
(333,-222,q),
(380,-171,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
7 0 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = parenleft;
unicode = 40;
},
{
glyphname = parenright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(296,601,o),
(381,418,o),
(381,318,qs),
(381,228,o),
(307,44,o),
(153,-115,o),
(33,-168,q),
(60,-222,l),
(193,-166,o),
(366,9,o),
(451,217,o),
(451,321,qs),
(451,437,o),
(354,644,o),
(267,714,q),
(220,663,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
7 0 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = parenright;
unicode = 41;
},
{
glyphname = braceleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(340,-204,o),
(370,-189,q),
(360,-134,l),
(310,-158,o),
(264,-158,qs),
(231,-158,o),
(195,-124,o),
(195,-98,qs),
(195,-76,o),
(223,-28,o),
(265,24,o),
(307,76,o),
(335,129,o),
(335,154,qs),
(335,185,o),
(299,233,o),
(269,244,q),
(315,255,o),
(379,322,o),
(379,373,qs),
(379,406,o),
(354,476,o),
(329,543,o),
(329,569,qs),
(329,604,o),
(376,651,o),
(420,651,qs),
(447,651,o),
(498,634,o),
(525,617,q),
(553,672,l),
(489,711,o),
(419,711,qs),
(368,711,o),
(298,672,o),
(262,607,o),
(262,569,qs),
(262,534,o),
(289,463,o),
(315,397,o),
(315,369,qs),
(315,329,o),
(257,279,o),
(213,279,qs),
(120,279,l),
(107,218,l),
(201,218,ls),
(234,218,o),
(272,183,o),
(272,157,qs),
(272,135,o),
(242,86,o),
(197,35,o),
(152,-21,o),
(122,-79,o),
(122,-111,qs),
(122,-157,o),
(192,-219,o),
(256,-219,qs),
(285,-219,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
28 1 4 3 29 1 2 4 42 1 1 2 56 1 5 1 57 1 0 5 5 76 0 2 0 1 5 2 1 103 0 4 4 3 97 0 3 3 26 77 0 5 5 0 97 6 1 0 0 31 0 78 1 0 55 53 33 31 27 25 16 14 13 11 0 59 1 59 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = braceleft;
unicode = 123;
},
{
glyphname = braceright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(260,696,o),
(230,681,q),
(240,626,l),
(290,650,o),
(336,650,qs),
(369,650,o),
(405,616,o),
(405,590,qs),
(405,568,o),
(377,520,o),
(335,468,o),
(293,416,o),
(265,363,o),
(265,338,qs),
(265,307,o),
(301,259,o),
(331,248,q),
(285,238,o),
(221,170,o),
(221,119,qs),
(221,87,o),
(246,16,o),
(271,-50,o),
(271,-77,qs),
(271,-111,o),
(224,-159,o),
(180,-159,qs),
(153,-159,o),
(102,-141,o),
(75,-125,q),
(47,-180,l),
(111,-219,o),
(181,-219,qs),
(233,-219,o),
(302,-180,o),
(338,-115,o),
(338,-77,qs),
(338,-41,o),
(312,29,o),
(285,95,o),
(285,123,qs),
(285,163,o),
(344,213,o),
(387,213,qs),
(480,213,l),
(493,274,l),
(399,274,ls),
(366,274,o),
(328,309,o),
(328,335,qs),
(328,358,o),
(358,406,o),
(403,457,o),
(448,513,o),
(478,572,o),
(478,603,qs),
(478,650,o),
(409,711,o),
(344,711,qs),
(315,711,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
57 1 5 0 56 1 1 5 42 1 2 1 29 1 4 2 28 1 3 4 5 76 0 1 0 2 4 1 2 103 0 5 5 0 97 6 1 0 0 26 77 0 4 4 3 97 0 3 3 31 3 78 1 0 55 53 33 31 27 25 16 14 13 11 0 59 1 59 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = braceright;
unicode = 125;
},
{
glyphname = bracketleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(387,-155,l),
(166,-155,l),
(335,640,l),
(556,640,l),
(569,700,l),
(278,700,l),
(83,-215,l),
(374,-215,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 1 1 0 95 0 0 0 20 77 0 2 2 3 95 4 1 3 3 25 3 78 0 0 0 7 0 7 17 17 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = bracketleft;
unicode = 91;
},
{
glyphname = bracketright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(212,640,l),
(433,640,l),
(264,-155,l),
(43,-155,l),
(30,-215,l),
(321,-215,l),
(516,700,l),
(225,700,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
0 2 2 3 95 4 1 3 3 20 77 0 1 1 0 95 0 0 0 25 0 78 0 0 0 7 0 7 17 17 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = bracketright;
unicode = 93;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
ref = comma;
}
);
width = 600;
}
);
note = quotesinglbase;
unicode = 8218;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (90,0);
ref = comma;
},
{
alignment = -1;
pos = (-73,0);
ref = comma;
}
);
width = 600;
}
);
note = quotedblbase;
unicode = 8222;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(186,519,l),
(284,519,l),
(383,750,l),
(326,750,l)
);
},
{
closed = 1;
nodes = (
(346,519,l),
(444,519,l),
(543,750,l),
(486,750,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
2 1 0 0 1 95 5 3 4 3 1 1 22 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
5 3 4 3 1 0 0 1 87 5 3 4 3 1 1 0 95 2 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = quotedblleft;
unicode = 8220;
},
{
glyphname = quotedblright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(579,750,l),
(481,750,l),
(382,519,l),
(439,519,l)
);
},
{
closed = 1;
nodes = (
(419,750,l),
(321,750,l),
(222,519,l),
(279,519,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 95 2 1 0 0 22 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 5 3 4 3 1 0 1 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = quotedblright;
unicode = 8221;
},
{
glyphname = quoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(283,519,l),
(381,519,l),
(480,750,l),
(423,750,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
0 0 1 0 134 2 1 1 1 22 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
2 1 1 0 1 133 0 0 0 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = quoteleft;
unicode = 8216;
},
{
glyphname = quoteright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(482,750,l),
(384,750,l),
(285,519,l),
(342,519,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 134 0 0 0 22 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 0 1 0 133 2 1 1 1 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = quoteright;
unicode = 8217;
},
{
glyphname = guillemotleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(101,239,l),
(378,488,l),
(295,488,l),
(20,245,l),
(200,0,l),
(273,0,l)
);
},
{
closed = 1;
nodes = (
(325,239,l),
(602,488,l),
(519,488,l),
(244,245,l),
(424,0,l),
(497,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
10 7 4 1 4 1 0 1 76 2 1 0 0 23 77 5 3 4 3 1 1 21 1 78 6 6 0 0 6 11 6 11 9 8 0 5 0 5 18 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = guillemotleft;
unicode = 171;
},
{
glyphname = guillemotright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(499,249,l),
(222,0,l),
(305,0,l),
(580,243,l),
(400,488,l),
(327,488,l)
);
},
{
closed = 1;
nodes = (
(275,249,l),
(-2,0,l),
(81,0,l),
(356,243,l),
(176,488,l),
(103,488,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
10 7 4 1 4 0 1 1 76 5 3 4 3 1 1 23 77 2 1 0 0 21 0 78 6 6 0 0 6 11 6 11 9 8 0 5 0 5 18 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = guillemotright;
unicode = 187;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(217,241,l),
(491,488,l),
(408,488,l),
(133,245,l),
(307,0,l),
(384,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
4 1 2 1 0 1 76 0 0 0 23 77 2 1 1 1 21 1 78 0 0 0 5 0 5 18 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = guilsinglleft;
unicode = 8249;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(383,247,l),
(109,0,l),
(192,0,l),
(467,243,l),
(293,488,l),
(216,488,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
4 1 2 0 1 1 76 2 1 1 1 23 77 0 0 0 21 0 78 0 0 0 5 0 5 18 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = guilsinglright;
unicode = 8250;
},
{
glyphname = quotedbl;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-72,0);
ref = quotesingle;
},
{
alignment = -1;
pos = (72,0);
ref = quotesingle;
}
);
width = 600;
}
);
note = quotedbl;
unicode = 34;
},
{
glyphname = quotesingle;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(443,750,l),
(371,750,l),
(336,530,l),
(387,530,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 1 0 95 0 0 0 22 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 17 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = quotesingle;
unicode = 39;
},
{
glyphname = at;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(425,-123,o),
(463,-101,q),
(443,-59,l),
(412,-79,o),
(338,-99,o),
(300,-99,qs),
(228,-99,o),
(117,-27,o),
(54,102,o),
(54,185,qs),
(54,256,o),
(95,381,o),
(169,477,o),
(268,532,o),
(326,532,qs),
(390,532,o),
(489,470,o),
(546,361,o),
(546,289,qs),
(546,237,o),
(518,151,o),
(473,99,o),
(445,99,qs),
(420,99,o),
(403,135,o),
(409,164,qs),
(452,366,l),
(396,366,l),
(391,341,l),
(375,358,o),
(331,379,o),
(307,379,qs),
(259,379,o),
(184,331,o),
(142,247,o),
(142,193,qs),
(142,131,o),
(211,52,o),
(261,52,qs),
(286,52,o),
(339,71,o),
(364,92,q),
(384,55,o),
(437,55,qs),
(483,55,o),
(552,118,o),
(592,227,o),
(592,295,qs),
(592,380,o),
(524,506,o),
(405,576,o),
(329,576,qs),
(260,576,o),
(143,514,o),
(56,406,o),
(8,264,o),
(8,184,qs),
(8,87,o),
(83,-61,o),
(215,-144,o),
(298,-144,qs),
(342,-144,o)
);
},
{
closed = 1;
nodes = (
(195,154,o),
(195,196,qs),
(195,232,o),
(222,293,o),
(272,331,o),
(306,331,qs),
(330,331,o),
(370,307,o),
(380,287,q),
(356,171,ls),
(352,149,o),
(353,131,q),
(323,99,o),
(277,99,qs),
(239,99,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
32 1 10 4 67 64 2 6 10 19 1 2 6 58 1 8 2 59 1 0 8 5 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
32 1 10 5 67 64 2 6 10 19 1 2 6 58 1 8 2 59 1 0 8 5 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 1 0 7 4 1 7 105 5 1 4 0 10 6 4 10 105 12 9 2 6 3 1 2 8 6 2 106 0 8 0 0 8 89 0 8 8 0 97 11 1 0 8 0 81
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 5 4 10 4 5 10 128 0 1 0 7 4 1 7 105 0 4 0 10 6 4 10 105 12 9 2 6 3 1 2 8 6 2 106 0 8 0 0 8 89 0 8 8 0 97 11 1 0 8 0 81
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
63 62 1 0 71 69 62 76 63 76 56 54 47 45 39 37 34 33 30 28 23 21 18 16 10 8 0 61 1 61 13 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = at;
unicode = 64;
},
{
glyphname = ampersand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(522,52,o),
(486,92,o),
(454,126,q),
(519,212,o),
(556,335,q),
(491,346,l),
(465,251,o),
(412,175,q),
(374,221,o),
(303,316,o),
(274,361,q),
(346,399,o),
(431,465,o),
(468,536,o),
(468,580,qs),
(468,639,o),
(390,711,o),
(326,711,qs),
(276,711,o),
(196,660,o),
(150,572,o),
(150,515,qs),
(150,449,o),
(181,381,q),
(99,338,o),
(23,231,o),
(23,159,qs),
(23,109,o),
(73,32,o),
(161,-11,o),
(218,-11,qs),
(316,-11,o),
(405,72,q),
(445,27,o),
(487,-13,q),
(538,37,l)
);
},
{
closed = 1;
nodes = (
(220,525,qs),
(220,579,o),
(279,651,o),
(322,651,qs),
(357,651,o),
(397,609,o),
(397,572,qs),
(397,525,o),
(329,454,o),
(244,413,q),
(220,463,o)
);
},
{
closed = 1;
nodes = (
(93,114,o),
(93,167,qs),
(93,215,o),
(150,291,o),
(211,327,q),
(274,225,o),
(364,119,q),
(294,52,o),
(219,52,qs),
(161,52,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */
51 49 32 30 29 27 24 11 2 9 3 2 35 1 0 3 2 76 0 2 2 1 97 0 1 1 26 77 4 1 3 3 0 97 0 0 0 27 0 78 48 47 47 56 48 56 43 41 43 35 5 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = ampersand;
unicode = 38;
},
{
glyphname = paragraph;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,288,l),
(487,288,l),
(426,0,l),
(491,0,l),
(640,700,l),
(335,700,ls),
(261,700,o),
(152,640,o),
(92,536,o),
(92,468,qs),
(92,387,o),
(198,288,o),
(293,288,qs),
(309,288,l),
(248,0,l),
(313,0,l)
);
},
{
closed = 1;
nodes = (
(448,637,l),
(562,637,l),
(501,351,l),
(388,351,l)
);
},
{
closed = 1;
nodes = (
(159,418,o),
(159,476,qs),
(159,523,o),
(199,596,o),
(269,637,o),
(314,637,qs),
(383,637,l),
(323,351,l),
(284,351,ls),
(226,351,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
11 7 10 3 6 3 1 0 2 6 0 105 8 1 5 5 1 95 0 1 1 20 77 9 4 2 2 2 21 2 78 21 20 16 16 0 0 24 22 20 29 21 29 16 19 16 19 18 17 0 15 0 15 17 17 37 33 12 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = paragraph;
unicode = 182;
},
{
glyphname = section;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(425,31,o),
(425,95,qs),
(425,145,o),
(390,179,q),
(454,191,o),
(528,269,o),
(528,327,qs),
(528,367,o),
(481,426,o),
(425,454,qs),
(331,501,ls),
(276,529,o),
(276,574,qs),
(276,611,o),
(327,655,o),
(369,655,qs),
(438,655,o),
(518,594,q),
(557,643,l),
(517,675,o),
(421,711,o),
(374,711,qs),
(302,711,o),
(212,631,o),
(212,566,qs),
(212,515,o),
(248,480,q),
(184,468,o),
(109,391,o),
(109,335,qs),
(109,295,o),
(157,236,o),
(212,207,qs),
(306,160,ls),
(360,132,o),
(360,87,qs),
(360,50,o),
(310,6,o),
(268,6,qs),
(198,6,o),
(118,67,q),
(79,18,l),
(119,-14,o),
(215,-50,o),
(263,-50,qs),
(335,-50,o)
);
},
{
closed = 1;
nodes = (
(173,299,o),
(173,349,qs),
(173,390,o),
(246,442,o),
(302,443,q),
(397,397,ls),
(464,362,o),
(464,313,qs),
(464,272,o),
(394,218,o),
(338,216,q),
(240,265,ls)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
27 26 18 3 5 3 41 4 3 3 1 4 2 76 0 5 3 4 3 5 4 128 0 4 1 3 4 1 126 0 1 6 1 0 1 0 101 0 3 3 2 97 0 2 2 26 3 78 1 0 53 52 47 46 30 28 24 22 7 5 0 45 1 45 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = section;
unicode = 167;
},
{
glyphname = copyright;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,55,o),
(557,173,o),
(608,328,o),
(608,418,qs),
(608,507,o),
(543,638,o),
(433,711,o),
(363,711,qs),
(296,711,o),
(178,645,o),
(87,527,o),
(36,372,o),
(36,282,qs),
(36,194,o),
(101,62,o),
(212,-11,o),
(281,-11,qs),
(348,-11,o)
);
},
{
closed = 1;
nodes = (
(137,96,o),
(83,211,o),
(83,289,qs),
(83,368,o),
(128,505,o),
(206,609,o),
(306,667,o),
(360,667,qs),
(416,667,o),
(507,604,o),
(561,490,o),
(561,411,qs),
(561,332,o),
(516,195,o),
(438,91,o),
(338,33,o),
(284,33,qs),
(228,33,o)
);
},
{
closed = 1;
nodes = (
(430,210,q),
(405,252,l),
(360,217,o),
(318,217,qs),
(273,217,o),
(219,278,o),
(219,328,qs),
(219,371,o),
(253,441,o),
(309,483,o),
(343,483,qs),
(396,483,o),
(436,426,q),
(477,462,l),
(426,535,o),
(342,535,qs),
(295,535,o),
(214,478,o),
(165,383,o),
(165,327,qs),
(165,281,o),
(203,208,o),
(270,165,o),
(311,165,qs),
(376,165,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 87 values pushed */
58 47 46 3 7 6 59 1 4 7 2 76 0 1 0 3 5 1 3 105 0 5 0 6 7 5 6 105 0 7 10 1 4 2 7 4 105 9 1 2 0 0 2 89 9 1 2 2 0 97 8 1 0 2 0 81 37 36 19 18 1 0 57 55 50 48 45 43 36 60 37 60 28 26 18 35 19 35 10 8 0 17 1 17 11 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = copyright;
unicode = 169;
},
{
glyphname = registered;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(489,370,o),
(546,472,o),
(546,533,qs),
(546,584,o),
(503,664,o),
(427,711,o),
(377,711,qs),
(321,711,o),
(226,650,o),
(169,548,o),
(169,487,qs),
(169,436,o),
(212,355,o),
(288,309,o),
(338,309,qs),
(395,309,o)
);
},
{
closed = 1;
nodes = (
(205,423,o),
(205,487,qs),
(205,539,o),
(251,625,o),
(329,677,o),
(375,677,qs),
(436,677,o),
(510,598,o),
(510,533,qs),
(510,481,o),
(464,395,o),
(387,343,o),
(340,343,qs),
(279,343,o)
);
},
{
closed = 1;
nodes = (
(321,488,l),
(354,488,l),
(379,417,l),
(413,417,l),
(388,492,l),
(408,500,o),
(431,533,o),
(431,552,qs),
(431,605,o),
(378,605,qs),
(314,605,l),
(274,417,l),
(306,417,l)
);
},
{
closed = 1;
nodes = (
(398,549,qs),
(398,533,o),
(380,514,o),
(364,514,qs),
(327,514,l),
(341,577,l),
(371,577,ls),
(398,577,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 99 values pushed */
37 1 6 9 1 76 12 7 2 5 6 2 6 5 2 128 0 1 0 3 4 1 3 105 0 4 13 1 8 9 4 8 105 0 9 0 6 5 9 6 103 11 1 2 0 0 2 89 11 1 2 2 0 97 10 1 0 2 0 81 44 43 30 30 17 16 1 0 47 45 43 50 44 50 30 42 30 42 41 40 39 38 33 31 24 22 16 29 17 29 9 7 0 15 1 15 14 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = registered;
unicode = 174;
},
{
glyphname = trademark;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(410,643,l),
(463,440,l),
(604,645,l),
(554,421,l),
(595,421,l),
(655,700,l),
(599,700,l),
(478,519,l),
(433,700,l),
(383,700,l),
(323,421,l),
(363,421,l)
);
},
{
closed = 1;
nodes = (
(254,662,l),
(338,662,l),
(346,700,l),
(137,700,l),
(129,662,l),
(212,662,l),
(160,421,l),
(202,421,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
10 9 8 3 4 2 4 1 76 9 7 8 3 4 2 4 2 134 5 1 2 0 4 4 0 87 5 1 2 0 0 4 95 6 1 4 0 4 79 12 12 0 0 12 19 12 19 18 17 16 15 14 13 0 11 0 11 17 18 17 10 6 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = trademark;
unicode = 8482;
},
{
glyphname = degree;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(468,470,o),
(513,547,o),
(513,593,qs),
(513,626,o),
(479,679,o),
(423,710,o),
(389,710,qs),
(344,710,o),
(269,664,o),
(224,588,o),
(224,541,qs),
(224,509,o),
(258,455,o),
(314,424,o),
(348,424,qs),
(394,424,o)
);
},
{
closed = 1;
nodes = (
(274,517,o),
(274,548,qs),
(274,579,o),
(305,630,o),
(357,661,o),
(388,661,qs),
(419,661,o),
(463,617,o),
(463,585,qs),
(463,554,o),
(432,503,o),
(381,472,o),
(349,472,qs),
(318,472,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 1 0 3 2 1 3 105 5 1 2 0 0 2 89 5 1 2 2 0 97 4 1 0 2 0 81 17 16 1 0 24 22 16 29 17 29 9 7 0 15 1 15 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = degree;
unicode = 176;
},
{
glyphname = minute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(481,750,l),
(383,750,l),
(284,519,l),
(341,519,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 12 values pushed */
2 1 1 0 1 134 0 0 0 22 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 10 values pushed */
0 0 1 0 133 2 1 1 1 118
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 10 values pushed */
0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = minute;
unicode = 8242;
},
{
glyphname = second;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(401,750,l),
(303,750,l),
(204,519,l),
(261,519,l)
);
},
{
closed = 1;
nodes = (
(561,750,l),
(463,750,l),
(364,519,l),
(421,519,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
27
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 15 values pushed */
5 3 4 3 1 1 0 95 2 1 0 0 22 1 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 5 3 4 3 1 0 1 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = second;
unicode = 8243;
},
{
glyphname = bar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(431,700,l),
(364,700,l),
(170,-209,l),
(237,-209,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 20 77 2 1 1 1 25 1 78 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = bar;
unicode = 124;
},
{
glyphname = brokenbar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(431,700,l),
(363,700,l),
(275,287,l),
(343,287,l)
);
},
{
closed = 1;
nodes = (
(326,204,l),
(258,204,l),
(170,-209,l),
(238,-209,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
4 1 1 0 2 0 1 2 128 0 2 3 0 2 3 126 0 0 0 20 77 5 1 3 3 25 3 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = brokenbar;
unicode = 166;
},
{
glyphname = dagger;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(374,443,l),
(509,443,l),
(521,500,l),
(386,500,l),
(429,700,l),
(365,700,l),
(322,500,l),
(187,500,l),
(175,443,l),
(310,443,l),
(216,0,l),
(280,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
0 2 2 20 77 4 1 0 0 1 95 3 1 1 1 23 77 6 1 5 5 21 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 22 values pushed */
3 1 1 4 1 0 5 1 0 104 0 2 2 20 77 6 1 5 5 21 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 11 0 11 17 17 17 17 17 7 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = dagger;
unicode = 8224;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(323,200,l),
(458,200,l),
(470,257,l),
(335,257,l),
(374,443,l),
(509,443,l),
(521,500,l),
(386,500,l),
(429,700,l),
(365,700,l),
(322,500,l),
(187,500,l),
(175,443,l),
(310,443,l),
(271,257,l),
(136,257,l),
(124,200,l),
(259,200,l),
(216,0,l),
(280,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
7 1 1 8 1 0 9 1 0 103 0 4 4 20 77 6 1 2 2 3 95 5 1 3 3 23 77 10 1 9 9 21 9 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
5 1 3 6 1 2 1 3 2 104 7 1 1 8 1 0 9 1 0 103 0 4 4 20 77 10 1 9 9 21 9 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 7 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = daggerdbl;
unicode = 8225;
},
{
glyphname = uniFFFD;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(497,750,l),
(103,750,l),
(103,-100,l),
(497,-100,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 6 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uniFFFD;
unicode = 65533;
},
{
glyphname = at.case;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (28,134);
ref = at;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 2
PUSHB[ ]	/* 1 value pushed */
134
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = at.case;
},
{
glyphname = cent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(279,-10,l),
(280,-10,ls),
(342,-10,o),
(451,41,o),
(488,87,q),
(439,126,l),
(411,94,o),
(336,55,o),
(292,53,q),
(372,427,l),
(407,419,o),
(455,372,o),
(470,337,q),
(533,368,l),
(516,415,o),
(437,480,o),
(385,491,q),
(410,606,l),
(356,606,l),
(333,496,l),
(278,496,o),
(182,452,o),
(108,374,o),
(66,271,o),
(66,212,qs),
(66,130,o),
(154,13,o),
(226,-4,q),
(202,-118,l),
(256,-118,l)
);
},
{
closed = 1;
nodes = (
(185,368,o),
(268,429,o),
(319,432,q),
(240,60,l),
(194,75,o),
(136,158,o),
(136,215,qs),
(136,273,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
12 1 5 0 33 24 23 19 16 15 6 2 5 1 1 3 2 3 76 0 1 0 1 133 6 1 4 3 4 134 0 5 5 0 97 0 0 0 29 77 0 2 2 3 97 0 3 3 30 3 78 0 0 35 34 0 29 0 29 21 25 17 24 7 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = cent;
unicode = 162;
},
{
glyphname = currency;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(194,131,o),
(278,100,o),
(324,100,qs),
(370,100,o),
(452,130,o),
(485,157,q),
(579,63,l),
(619,104,l),
(525,199,l),
(551,232,o),
(579,315,o),
(579,361,qs),
(579,408,o),
(549,491,o),
(523,524,q),
(618,619,l),
(579,659,l),
(485,564,l),
(452,591,o),
(370,621,o),
(324,621,qs),
(278,621,o),
(196,591,o),
(163,564,q),
(69,659,l),
(29,618,l),
(123,523,l),
(97,490,o),
(68,408,o),
(68,361,qs),
(68,315,o),
(97,231,o),
(122,198,q),
(29,104,l),
(68,64,l),
(161,158,l)
);
},
{
closed = 1;
nodes = (
(190,219,o),
(141,307,o),
(141,361,qs),
(141,416,o),
(190,503,o),
(273,555,o),
(324,555,qs),
(375,555,o),
(458,503,o),
(507,416,o),
(507,361,qs),
(507,307,o),
(458,219,o),
(375,167,o),
(324,167,qs),
(273,167,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 72 values pushed */
19 17 11 9 4 3 0 26 20 8 2 4 2 3 35 29 27 1 4 1 2 3 76 18 10 2 0 74 28 1 1 73 0 0 0 3 2 0 3 105 4 1 2 1 1 2 89 4 1 2 2 1 97 0 1 2 1 81 37 36 45 43 36 51 37 51 33 31 45 5 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = currency;
unicode = 164;
},
{
glyphname = dollar;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(274,20,l),
(280,20,ls),
(350,20,o),
(456,69,o),
(515,155,o),
(515,208,qs),
(515,247,o),
(488,306,o),
(417,357,o),
(351,381,q),
(400,613,l),
(469,596,o),
(527,537,q),
(573,585,l),
(539,618,o),
(456,663,o),
(413,672,q),
(433,767,l),
(379,767,l),
(360,679,l),
(353,679,ls),
(248,679,o),
(132,581,o),
(132,501,qs),
(132,441,o),
(207,360,o),
(286,331,q),
(235,87,l),
(161,102,o),
(93,167,q),
(51,117,l),
(128,43,o),
(222,25,q),
(202,-67,l),
(256,-67,l)
);
},
{
closed = 1;
nodes = (
(199,468,o),
(199,505,qs),
(199,556,o),
(279,619,o),
(348,619,q),
(300,396,l),
(246,417,o)
);
},
{
closed = 1;
nodes = (
(404,288,o),
(448,239,o),
(448,205,qs),
(448,153,o),
(359,83,o),
(288,82,q),
(337,315,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
17 1 4 0 48 24 23 21 20 7 6 4 3 9 5 4 1 1 2 5 3 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
23
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 32 values pushed */
0 1 0 1 133 6 1 3 2 3 134 0 4 4 0 97 0 0 0 20 77 0 5 5 2 97 0 2 2 21 2 78
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 1 0 1 133 6 1 3 2 3 134 0 0 0 4 5 0 4 105 0 5 5 2 97 0 2 2 21 2 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 35 values pushed */
0 1 0 1 133 6 1 3 2 3 134 0 0 0 4 5 0 4 105 0 5 2 2 5 89 0 5 5 2 97 0 2 5 2 81
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 43 42 37 36 0 34 0 34 31 18 28 7 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = dollar;
unicode = 36;
},
{
glyphname = Euro;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(94,120,o),
(208,-11,o),
(299,-11,qs),
(367,-11,o),
(485,69,o),
(525,142,q),
(465,176,l),
(435,121,o),
(354,59,o),
(307,59,qs),
(246,59,o),
(171,153,o),
(166,256,q),
(353,256,l),
(380,310,l),
(166,310,l),
(167,331,o),
(170,370,o),
(174,389,q),
(425,389,l),
(454,443,l),
(186,443,l),
(212,534,o),
(316,641,o),
(383,641,qs),
(433,641,o),
(504,575,o),
(518,506,q),
(591,527,l),
(568,624,o),
(456,711,o),
(385,711,qs),
(323,711,o),
(214,644,o),
(132,523,o),
(110,443,q),
(48,443,l),
(36,389,l),
(98,389,l),
(95,370,o),
(91,330,o),
(90,310,q),
(19,310,l),
(8,256,l),
(89,256,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */
16 15 2 2 4 38 37 2 9 8 2 76 5 1 2 6 1 1 0 2 1 103 7 1 0 12 11 2 8 9 0 8 103 0 4 4 3 97 0 3 3 26 77 0 9 9 10 97 0 10 10 27 10 78 0 0 0 44 0 44 42 40 35 33 17 19 17 18 37 35 17 19 17 13 7 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = Euro;
unicode = 8364;
},
{
glyphname = sterling;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(523,53,q),
(477,92,l),
(443,39,o),
(385,39,qs),
(354,39,o),
(261,72,o),
(214,84,q),
(238,105,o),
(262,177,o),
(262,223,qs),
(262,234,o),
(261,268,o),
(260,289,q),
(397,289,l),
(408,343,l),
(258,343,l),
(256,384,o),
(253,456,o),
(253,472,qs),
(253,555,o),
(329,649,o),
(388,649,qs),
(444,649,o),
(504,578,o),
(513,514,q),
(578,528,l),
(563,618,o),
(471,711,o),
(389,711,qs),
(329,711,o),
(236,650,o),
(183,540,o),
(183,464,qs),
(183,447,o),
(187,381,o),
(188,343,q),
(94,343,l),
(83,289,l),
(191,289,l),
(192,267,o),
(193,230,o),
(193,216,qs),
(193,175,o),
(171,116,o),
(149,95,q),
(103,95,o),
(28,54,o),
(-6,13,q),
(40,-28,l),
(62,1,o),
(111,33,o),
(140,33,qs),
(170,33,o),
(250,4,o),
(338,-25,o),
(380,-25,qs),
(472,-25,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */
31 30 2 4 6 55 54 49 3 9 2 8 1 0 1 3 76 7 1 0 73
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
36
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
7 1 4 8 1 3 2 4 3 103 0 2 0 1 0 2 1 105 0 6 6 5 97 0 5 5 26 77 0 9 9 0 97 10 1 0 0 27 0 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
7 1 4 8 1 3 2 4 3 103 0 2 0 1 0 2 1 105 0 9 10 1 0 9 0 101 0 6 6 5 97 0 5 5 26 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
1 0 53 51 43 42 41 40 35 33 28 26 20 19 18 17 11 10 5 3 0 56 1 56 11 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = sterling;
unicode = 163;
},
{
glyphname = yen;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(313,134,l),
(487,134,l),
(498,188,l),
(325,188,l),
(341,263,l),
(515,263,l),
(525,317,l),
(374,317,l),
(676,700,l),
(592,700,l),
(322,354,l),
(198,700,l),
(118,700,l),
(258,317,l),
(104,317,l),
(94,263,l),
(264,263,l),
(248,188,l),
(77,188,l),
(66,134,l),
(236,134,l),
(208,0,l),
(285,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */
11 1 3 4 1 76 6 1 3 7 1 2 1 3 2 104 8 1 1 9 1 0 10 1 0 103 5 1 4 4 20 77 11 1 10 10 21 10 78 0 0 0 22 0 22 21 20 17 17 17 18 17 17 17 17 17 12 7 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = yen;
unicode = 165;
},
{
glyphname = uni2215;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(586,700,l),
(528,700,l),
(-14,0,l),
(43,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 6 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2215;
unicode = 8725;
},
{
glyphname = plus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(346,318,l),
(537,318,l),
(550,378,l),
(358,378,l),
(402,584,l),
(340,584,l),
(296,378,l),
(105,378,l),
(92,318,l),
(284,318,l),
(240,113,l),
(302,113,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 2 1 2 133 6 1 5 0 5 134 3 1 1 0 0 1 87 3 1 1 1 0 96 4 1 0 1 0 80 0 0 0 11 0 11 17 17 17 17 17 7 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plus;
unicode = 43;
},
{
glyphname = minus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(552,378,l),
(108,378,l),
(95,318,l),
(539,318,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 6 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = minus;
unicode = 8722;
},
{
glyphname = multiply;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(443,137,l),
(491,176,l),
(360,357,l),
(571,540,l),
(538,581,l),
(330,399,l),
(198,580,l),
(153,541,l),
(284,359,l),
(77,177,l),
(107,136,l),
(314,317,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 0 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = multiply;
unicode = 215;
},
{
glyphname = divide;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(415,514,o),
(415,536,qs),
(415,557,o),
(386,586,o),
(366,586,qs),
(343,586,o),
(307,552,o),
(307,529,qs),
(307,509,o),
(336,480,o),
(357,480,qs),
(381,480,o)
);
},
{
closed = 1;
nodes = (
(550,378,l),
(106,378,l),
(93,318,l),
(537,318,l)
);
},
{
closed = 1;
nodes = (
(337,146,o),
(337,168,qs),
(337,189,o),
(308,218,o),
(288,218,qs),
(265,218,o),
(229,184,o),
(229,161,qs),
(229,141,o),
(258,112,o),
(279,112,qs),
(303,112,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 1 6 1 0 2 1 0 105 0 2 7 1 3 5 2 3 103 0 5 4 4 5 89 0 5 5 4 97 8 1 4 5 4 81 17 16 12 12 1 0 23 21 16 27 17 27 12 15 12 15 14 13 7 5 0 11 1 11 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = divide;
unicode = 247;
},
{
glyphname = equal;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (-18,-83);
ref = minus;
},
{
alignment = -1;
pos = (17,80);
ref = minus;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
-83
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
1 1
PUSHB[ ]	/* 1 value pushed */
80
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = equal;
unicode = 61;
},
{
glyphname = notequal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(250,235,l),
(519,235,l),
(532,295,l),
(304,295,l),
(397,398,l),
(554,398,l),
(567,458,l),
(450,458,l),
(559,579,l),
(501,579,l),
(392,458,l),
(123,458,l),
(110,398,l),
(339,398,l),
(246,295,l),
(88,295,l),
(75,235,l),
(192,235,l),
(83,113,l),
(141,113,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 4 3 3 4 112 10 1 9 0 0 9 113 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 40 values pushed */
0 4 3 4 133 10 1 9 0 9 134 5 1 3 6 1 2 1 3 2 104 7 1 1 0 0 1 87 7 1 1 1 0 95 8 1 0 1 0 79
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
0 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 6 31
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = notequal;
unicode = 8800;
},
{
glyphname = greater;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(100,53,l),
(525,348,l),
(227,644,l),
(183,599,l),
(431,354,l),
(68,105,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 2 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = greater;
unicode = 62;
},
{
glyphname = less;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(568,644,l),
(143,349,l),
(441,53,l),
(485,98,l),
(237,343,l),
(600,592,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 2 1 50
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = less;
unicode = 60;
},
{
glyphname = plusminus;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(352,349,l),
(543,349,l),
(557,409,l),
(365,409,l),
(407,610,l),
(347,610,l),
(305,409,l),
(113,409,l),
(99,349,l),
(292,349,l),
(249,148,l),
(309,148,l)
);
},
{
closed = 1;
nodes = (
(483,60,l),
(38,60,l),
(25,-1,l),
(470,-1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
0 2 1 2 133 8 1 5 0 6 0 5 6 128 3 1 1 4 1 0 5 1 0 104 0 6 6 7 95 9 1 7 7 21 7 78 12 12 0 0 12 15 12 15 14 13 0 11 0 11 17 17 17 17 17 10 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = plusminus;
unicode = 177;
},
{
glyphname = asciitilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(219,395,qs),
(232,395,o),
(257,387,o),
(279,372,qs),
(340,330,ls),
(373,308,o),
(415,293,o),
(437,293,qs),
(482,293,o),
(554,369,o),
(577,440,q),
(524,453,l),
(491,355,o),
(436,355,qs),
(424,355,o),
(400,364,o),
(377,379,qs),
(316,421,ls),
(284,444,o),
(240,457,o),
(220,457,qs),
(176,457,o),
(104,381,o),
(81,310,q),
(135,297,l),
(167,395,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
14 13 2 3 0 1 1 2 1 2 76 0 0 0 3 1 0 3 105 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 37 36 37 35 4 7 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = asciitilde;
unicode = 126;
},
{
glyphname = logicalnot;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(541,314,l),
(92,314,l),
(78,254,l),
(464,254,l),
(410,0,l),
(474,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
0 1 0 0 2 1 0 103 3 1 2 2 21 2 78 0 0 0 5 0 5 17 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = logicalnot;
unicode = 172;
},
{
glyphname = asciicircum;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(388,639,l),
(476,350,l),
(537,350,l),
(429,700,l),
(366,700,l),
(107,350,l),
(176,350,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 0 1 76 0 0 1 0 133 3 2 2 1 1 118 0 0 0 6 0 6 17 17 4 7 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = asciicircum;
unicode = 94;
},
{
glyphname = uni00B5;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(124,32,l),
(142,13,o),
(196,-8,o),
(230,-8,qs),
(323,-8,o),
(392,75,q),
(376,0,l),
(449,0,l),
(553,488,l),
(480,488,l),
(403,127,l),
(343,52,o),
(260,52,qs),
(202,52,o),
(146,131,o),
(159,197,qs),
(221,488,l),
(148,488,l),
(0,-209,l),
(73,-209,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
13 1 1 0 18 1 3 1 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
29
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 24 values pushed */
2 1 0 0 23 77 0 1 1 3 98 4 1 3 3 21 77 6 1 5 5 25 5 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
2 1 0 0 23 77 0 3 3 21 77 0 1 1 4 98 0 4 4 30 77 6 1 5 5 25 5 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 14 values pushed */
0 0 0 19 0 19 34 17 18 35 17 7 7 27
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni00B5;
unicode = 181;
},
{
glyphname = percent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(299,461,o),
(338,541,o),
(338,589,qs),
(338,641,o),
(279,705,o),
(232,705,qs),
(193,705,o),
(129,657,o),
(90,577,o),
(90,528,qs),
(90,477,o),
(149,413,o),
(196,413,qs),
(235,413,o)
);
},
{
closed = 1;
nodes = (
(622,700,l),
(563,700,l),
(23,0,l),
(80,0,l)
);
},
{
closed = 1;
nodes = (
(139,496,o),
(139,530,qs),
(139,566,o),
(163,625,o),
(203,660,o),
(227,660,qs),
(256,660,o),
(289,622,o),
(289,587,qs),
(289,552,o),
(265,493,o),
(225,458,o),
(200,458,qs),
(172,458,o)
);
},
{
closed = 1;
nodes = (
(516,43,o),
(554,123,o),
(554,171,qs),
(554,223,o),
(495,287,o),
(448,287,qs),
(409,287,o),
(345,239,o),
(306,159,o),
(306,110,qs),
(306,59,o),
(365,-5,o),
(412,-5,qs),
(451,-5,o)
);
},
{
closed = 1;
nodes = (
(355,78,o),
(355,112,qs),
(355,148,o),
(379,207,o),
(419,242,o),
(443,242,qs),
(472,242,o),
(505,204,o),
(505,169,qs),
(505,134,o),
(481,75,o),
(441,40,o),
(416,40,qs),
(388,40,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
12 1 4 10 1 0 7 4 0 105 0 7 0 9 8 7 9 105 0 5 5 1 97 2 1 1 1 20 77 14 1 8 8 3 97 13 6 11 3 3 3 21 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
12 1 4 10 1 0 7 4 0 105 0 7 0 9 8 7 9 105 0 2 2 20 77 0 5 5 1 97 0 1 1 20 77 11 1 3 3 21 77 14 1 8 8 6 97 13 1 6 6 21 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 43 values pushed */
47 46 33 32 19 18 14 14 1 0 54 52 46 59 47 59 40 38 32 45 33 45 26 24 18 31 19 31 14 17 14 17 16 15 8 6 0 13 1 13 15 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = percent;
unicode = 37;
},
{
glyphname = perthousand;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(237,494,o),
(266,567,o),
(266,610,qs),
(266,654,o),
(225,705,o),
(190,705,qs),
(162,705,o),
(114,661,o),
(84,588,o),
(84,546,qs),
(84,502,o),
(126,449,o),
(160,449,qs),
(189,449,o)
);
},
{
closed = 1;
nodes = (
(448,700,l),
(400,700,l),
(-6,0,l),
(42,0,l)
);
},
{
closed = 1;
nodes = (
(146,629,o),
(173,664,o),
(188,664,qs),
(221,664,o),
(221,612,qs),
(221,581,o),
(204,525,o),
(177,490,o),
(162,490,qs),
(129,490,o),
(129,542,qs),
(129,573,o)
);
},
{
closed = 1;
nodes = (
(328,40,o),
(358,112,o),
(358,154,qs),
(358,198,o),
(317,251,o),
(282,251,qs),
(254,251,o),
(205,206,o),
(176,133,o),
(176,90,qs),
(176,47,o),
(218,-5,o),
(252,-5,qs),
(280,-5,o)
);
},
{
closed = 1;
nodes = (
(531,40,o),
(561,112,o),
(561,154,qs),
(561,198,o),
(520,251,o),
(485,251,qs),
(457,251,o),
(408,206,o),
(379,133,o),
(379,90,qs),
(379,47,o),
(421,-5,o),
(455,-5,qs),
(483,-5,o)
);
},
{
closed = 1;
nodes = (
(221,88,qs),
(221,119,o),
(238,175,o),
(265,210,o),
(280,210,qs),
(313,210,o),
(313,158,qs),
(313,127,o),
(296,71,o),
(269,36,o),
(254,36,qs),
(221,36,o)
);
},
{
closed = 1;
nodes = (
(424,88,qs),
(424,119,o),
(441,175,o),
(468,210,o),
(483,210,qs),
(516,210,o),
(516,158,qs),
(516,127,o),
(499,71,o),
(472,36,o),
(457,36,qs),
(424,36,o)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
9 1 7 13 1 11 10 7 11 105 0 5 5 1 97 2 1 1 1 20 77 14 1 0 0 4 97 0 4 4 23 77 19 12 18 3 10 10 3 97 17 8 16 6 15 5 3 3 21 3 78
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 59 values pushed */
9 1 7 13 1 11 10 7 11 105 0 2 2 20 77 0 5 5 1 97 0 1 1 20 77 14 1 0 0 4 97 0 4 4 23 77 15 1 3 3 21 77 19 12 18 3 10 10 6 97 17 8 16 3 6 6 21 6 78
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 55 values pushed */
71 70 59 58 45 44 31 30 14 14 1 0 77 75 70 81 71 81 65 63 58 69 59 69 52 50 44 57 45 57 38 36 30 43 31 43 27 25 21 19 14 17 14 17 16 15 8 6 0 13 1 13 20 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = perthousand;
unicode = 8240;
},
{
glyphname = arrowup;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,614,l),
(521,395,l),
(568,432,l),
(323,750,l),
(77,432,l),
(125,394,l),
(288,609,l),
(288,0,l),
(356,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
7 6 5 4 3 2 1 7 0 74 1 1 0 0 118 0 0 0 8 0 8 2 6 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = arrowup;
unicode = 8593;
},
{
glyphname = arrowdown;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(270,86,l),
(105,305,l),
(58,268,l),
(303,-50,l),
(549,268,l),
(501,306,l),
(338,91,l),
(338,700,l),
(270,700,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */
7 6 5 4 3 2 1 7 0 73 1 1 0 0 118 0 0 0 8 0 8 2 6 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = arrowdown;
unicode = 8595;
},
{
glyphname = uni0308;
layers = (
{
anchors = (
{
name = _top;
pos = (352,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,644,o),
(351,670,qs),
(351,694,o),
(317,728,o),
(293,728,qs),
(265,728,o),
(224,687,o),
(224,661,qs),
(224,637,o),
(257,604,o),
(282,604,qs),
(311,604,o)
);
},
{
closed = 1;
nodes = (
(555,644,o),
(555,670,qs),
(555,694,o),
(521,728,o),
(497,728,qs),
(469,728,o),
(428,687,o),
(428,661,qs),
(428,637,o),
(461,604,o),
(486,604,qs),
(515,604,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 40 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 5 2 4 3 0 1 0 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni0308;
unicode = 776;
},
{
glyphname = uni0307;
layers = (
{
anchors = (
{
name = _top;
pos = (352,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(453,644,o),
(453,670,qs),
(453,694,o),
(419,728,o),
(395,728,qs),
(367,728,o),
(326,687,o),
(326,661,qs),
(326,637,o),
(359,604,o),
(384,604,qs),
(413,604,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni0307;
unicode = 775;
},
{
glyphname = gravecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (352,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,726,l),
(237,726,l),
(379,604,l),
(446,604,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = gravecomb;
unicode = 768;
},
{
glyphname = acutecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (352,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(513,726,l),
(412,726,l),
(277,604,l),
(347,604,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = acutecomb;
unicode = 769;
},
{
glyphname = uni030B;
layers = (
{
anchors = (
{
name = _top;
pos = (352,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(459,706,l),
(375,706,l),
(224,582,l),
(294,582,l)
);
},
{
closed = 1;
nodes = (
(629,706,l),
(545,706,l),
(394,582,l),
(462,582,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 5 3 4 3 1 0 1 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni030B;
unicode = 779;
},
{
glyphname = uni030C.alt;
lastChange = "2025-08-22 17:10:55 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(539,774,l),
(459,759,l),
(413,564,l),
(469,564,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
2 1 0 74 1 1 0 0 118 0 0 0 3 0 3 2 6 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni030C.alt;
},
{
glyphname = uni0302;
layers = (
{
anchors = (
{
name = _top;
pos = (352,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(396,683,l),
(469,599,l),
(525,599,l),
(438,726,l),
(361,726,l),
(224,599,l),
(285,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 0 1 76 0 0 1 0 133 3 2 2 1 1 118 0 0 0 6 0 6 17 17 4 7 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni0302;
unicode = 770;
},
{
glyphname = uni030C;
layers = (
{
anchors = (
{
name = _top;
pos = (352,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,730,l),
(487,730,l),
(378,646,l),
(306,730,l),
(249,730,l),
(335,603,l),
(412,603,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 2 0 1 76 1 1 0 2 0 133 3 1 2 2 118 0 0 0 6 0 6 18 17 4 7 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni030C;
unicode = 780;
},
{
glyphname = uni0306;
layers = (
{
anchors = (
{
name = _top;
pos = (352,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,644,o),
(552,702,q),
(503,718,l),
(463,626,o),
(384,626,qs),
(341,626,o),
(294,675,o),
(292,721,q),
(244,712,l),
(246,651,o),
(321,580,o),
(382,580,qs),
(438,580,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
10 9 4 3 4 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 8 6 0 12 1 12 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni0306;
unicode = 774;
},
{
glyphname = uni030A;
layers = (
{
anchors = (
{
name = _top;
pos = (352,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,607,o),
(503,663,o),
(503,696,qs),
(503,739,o),
(446,794,o),
(401,794,qs),
(370,794,o),
(316,759,o),
(283,703,o),
(283,670,qs),
(283,627,o),
(340,572,o),
(384,572,qs),
(416,572,o)
);
},
{
closed = 1;
nodes = (
(325,647,o),
(325,673,qs),
(325,706,o),
(371,753,o),
(401,753,qs),
(427,753,o),
(460,718,o),
(460,692,qs),
(460,660,o),
(415,612,o),
(384,612,qs),
(359,612,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 1 0 3 2 1 3 105 5 1 2 0 0 2 89 5 1 2 2 0 97 4 1 0 2 0 81 15 14 1 0 21 19 14 25 15 25 8 6 0 13 1 13 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni030A;
unicode = 778;
},
{
glyphname = tildecomb;
layers = (
{
anchors = (
{
name = _top;
pos = (352,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(302,664,o),
(319,664,qs),
(340,664,o),
(381,633,o),
(429,602,o),
(459,602,qs),
(519,602,o),
(563,698,q),
(514,713,l),
(498,678,o),
(476,653,o),
(461,653,qs),
(441,653,o),
(399,684,o),
(350,716,o),
(320,716,qs),
(260,716,o),
(213,620,q),
(262,605,l),
(276,637,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
11 10 2 3 0 1 1 2 1 2 76 0 0 0 3 1 0 3 105 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 34 36 34 34 4 7 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = tildecomb;
unicode = 771;
},
{
glyphname = uni0304;
layers = (
{
anchors = (
{
name = _top;
pos = (352,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,683,l),
(259,683,l),
(248,631,l),
(516,631,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni0304;
unicode = 772;
},
{
glyphname = uni0312;
layers = (
{
anchors = (
{
name = _top;
pos = (402,488);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,790,l),
(474,790,l),
(365,603,l),
(438,603,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni0312;
unicode = 786;
},
{
glyphname = uni0326;
lastChange = "2025-08-22 17:10:55 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,-87,l),
(204,-87,l),
(117,-274,l),
(170,-274,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni0326;
unicode = 806;
},
{
glyphname = uni0327;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (248,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,-181,o),
(321,-138,qs),
(321,-109,o),
(278,-69,o),
(240,-66,q),
(269,0,l),
(227,0,l),
(183,-99,l),
(211,-99,ls),
(241,-99,o),
(275,-123,o),
(275,-144,qs),
(275,-169,o),
(236,-199,o),
(203,-199,qs),
(159,-199,o),
(130,-167,q),
(99,-197,l),
(116,-217,o),
(171,-239,o),
(205,-239,qs),
(255,-239,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 51 values pushed */
16 1 2 3 4 3 2 1 2 2 76 0 3 0 2 1 3 2 105 0 1 0 0 1 89 0 1 1 0 97 4 1 0 1 0 81 1 0 15 14 13 11 7 5 0 21 1 21 5 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni0327;
unicode = 807;
},
{
glyphname = uni0328;
layers = (
{
anchors = (
{
name = _ogonek;
pos = (298,0);
}
);
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,-218,q),
(273,-178,l),
(263,-182,o),
(238,-187,o),
(227,-187,qs),
(201,-187,o),
(167,-161,o),
(167,-139,qs),
(167,-71,o),
(298,0,q),
(270,18,l),
(116,-63,o),
(116,-154,qs),
(116,-189,o),
(168,-232,o),
(211,-232,qs),
(249,-232,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 40 values pushed */
15 1 0 1 1 76 14 6 5 3 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 12 10 0 16 1 16 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni0328;
unicode = 808;
},
{
glyphname = dieresis;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(351,644,o),
(351,670,qs),
(351,694,o),
(317,728,o),
(293,728,qs),
(265,728,o),
(224,687,o),
(224,661,qs),
(224,637,o),
(257,604,o),
(282,604,qs),
(311,604,o)
);
},
{
closed = 1;
nodes = (
(555,644,o),
(555,670,qs),
(555,694,o),
(521,728,o),
(497,728,qs),
(469,728,o),
(428,687,o),
(428,661,qs),
(428,637,o),
(461,604,o),
(486,604,qs),
(515,604,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 40 values pushed */
3 1 1 0 0 1 89 3 1 1 1 0 97 5 2 4 3 0 1 0 81 13 12 1 0 19 17 12 23 13 23 7 5 0 11 1 11 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = dieresis;
unicode = 168;
},
{
glyphname = dotaccent;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(453,644,o),
(453,670,qs),
(453,694,o),
(419,728,o),
(395,728,qs),
(367,728,o),
(326,687,o),
(326,661,qs),
(326,637,o),
(359,604,o),
(384,604,qs),
(413,604,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 7 5 0 11 1 11 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = dotaccent;
unicode = 729;
},
{
glyphname = grave;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(337,726,l),
(237,726,l),
(379,604,l),
(446,604,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = grave;
unicode = 96;
},
{
glyphname = acute;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(513,726,l),
(412,726,l),
(277,604,l),
(347,604,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = acute;
unicode = 180;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(459,706,l),
(375,706,l),
(224,582,l),
(294,582,l)
);
},
{
closed = 1;
nodes = (
(629,706,l),
(545,706,l),
(394,582,l),
(462,582,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 39 values pushed */
2 1 0 1 1 0 87 2 1 0 0 1 95 5 3 4 3 1 0 1 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = hungarumlaut;
unicode = 733;
},
{
glyphname = circumflex;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(396,683,l),
(469,599,l),
(525,599,l),
(438,726,l),
(361,726,l),
(224,599,l),
(285,599,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
5 1 1 0 1 76 0 0 1 0 133 3 2 2 1 1 118 0 0 0 6 0 6 17 17 4 7 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = circumflex;
unicode = 710;
},
{
glyphname = caron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(549,730,l),
(487,730,l),
(378,646,l),
(306,730,l),
(249,730,l),
(335,603,l),
(412,603,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
3 1 2 0 1 76 1 1 0 2 0 133 3 1 2 2 118 0 0 0 6 0 6 18 17 4 7 24
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = caron;
unicode = 711;
},
{
glyphname = breve;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,644,o),
(552,702,q),
(503,718,l),
(463,626,o),
(384,626,qs),
(341,626,o),
(294,675,o),
(292,721,q),
(244,712,l),
(246,651,o),
(321,580,o),
(382,580,qs),
(438,580,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 35 values pushed */
10 9 4 3 4 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 8 6 0 12 1 12 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = breve;
unicode = 728;
},
{
glyphname = ring;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(470,607,o),
(503,663,o),
(503,696,qs),
(503,739,o),
(446,794,o),
(401,794,qs),
(370,794,o),
(316,759,o),
(283,703,o),
(283,670,qs),
(283,627,o),
(340,572,o),
(384,572,qs),
(416,572,o)
);
},
{
closed = 1;
nodes = (
(325,647,o),
(325,673,qs),
(325,706,o),
(371,753,o),
(401,753,qs),
(427,753,o),
(460,718,o),
(460,692,qs),
(460,660,o),
(415,612,o),
(384,612,qs),
(359,612,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 1 0 3 2 1 3 105 5 1 2 0 0 2 89 5 1 2 2 0 97 4 1 0 2 0 81 15 14 1 0 21 19 14 25 15 25 8 6 0 13 1 13 6 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = ring;
unicode = 730;
},
{
glyphname = tilde;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(302,664,o),
(319,664,qs),
(340,664,o),
(381,633,o),
(429,602,o),
(459,602,qs),
(519,602,o),
(563,698,q),
(514,713,l),
(498,678,o),
(476,653,o),
(461,653,qs),
(441,653,o),
(399,684,o),
(350,716,o),
(320,716,qs),
(260,716,o),
(213,620,q),
(262,605,l),
(276,637,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 42 values pushed */
11 10 2 3 0 1 1 2 1 2 76 0 0 0 3 1 0 3 105 0 1 2 2 1 89 0 1 1 2 97 0 2 1 2 81 34 36 34 34 4 7 26
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = tilde;
unicode = 732;
},
{
glyphname = macron;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(527,683,l),
(259,683,l),
(248,631,l),
(516,631,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 27 values pushed */
0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = macron;
unicode = 175;
},
{
glyphname = cedilla;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,-181,o),
(321,-138,qs),
(321,-109,o),
(278,-69,o),
(240,-66,q),
(269,0,l),
(227,0,l),
(183,-99,l),
(211,-99,ls),
(241,-99,o),
(275,-123,o),
(275,-144,qs),
(275,-169,o),
(236,-199,o),
(203,-199,qs),
(159,-199,o),
(130,-167,q),
(99,-197,l),
(116,-217,o),
(171,-239,o),
(205,-239,qs),
(255,-239,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 51 values pushed */
16 1 2 3 4 3 2 1 2 2 76 0 3 0 2 1 3 2 105 0 1 0 0 1 89 0 1 1 0 97 4 1 0 1 0 81 1 0 15 14 13 11 7 5 0 21 1 21 5 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = cedilla;
unicode = 184;
},
{
glyphname = ogonek;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(277,-218,q),
(273,-178,l),
(263,-182,o),
(238,-187,o),
(227,-187,qs),
(201,-187,o),
(167,-161,o),
(167,-139,qs),
(167,-71,o),
(298,0,q),
(270,18,l),
(116,-63,o),
(116,-154,qs),
(116,-189,o),
(168,-232,o),
(211,-232,qs),
(249,-232,o)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 40 values pushed */
15 1 0 1 1 76 14 6 5 3 1 74 0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 12 10 0 16 1 16 3 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = ogonek;
unicode = 731;
},
{
glyphname = uni02BC;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(481,750,l),
(383,750,l),
(284,519,l),
(341,519,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni02BC;
unicode = 700;
},
{
glyphname = uni02BB;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(284,519,l),
(382,519,l),
(481,750,l),
(424,750,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 20 values pushed */
2 1 1 0 1 133 0 0 0 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = uni02BB;
unicode = 699;
},
{
glyphname = zero;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(449,56,o),
(534,176,o),
(583,336,o),
(583,430,qs),
(583,523,o),
(526,648,o),
(427,711,o),
(364,711,qs),
(304,711,o),
(195,644,o),
(110,524,o),
(61,364,o),
(61,270,qs),
(61,177,o),
(118,52,o),
(218,-11,o),
(280,-11,qs),
(340,-11,o)
);
},
{
closed = 1;
nodes = (
(132,274,qs),
(132,352,o),
(169,487,o),
(234,589,o),
(318,646,o),
(364,646,qs),
(424,646,o),
(462,600,q),
(149,160,l),
(132,209,o)
);
},
{
closed = 1;
nodes = (
(183,98,q),
(497,535,l),
(512,490,o),
(512,426,qs),
(512,348,o),
(475,213,o),
(410,111,o),
(327,54,o),
(280,54,qs),
(221,54,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
36 35 19 3 3 2 1 76 0 2 2 1 97 0 1 1 26 77 5 1 3 3 0 97 4 1 0 0 27 0 78 29 28 1 0 28 37 29 37 22 20 10 8 0 17 1 17 6 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = zero;
unicode = 48;
},
{
glyphname = one;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(524,63,l),
(322,63,l),
(458,700,l),
(413,700,l),
(190,610,l),
(175,538,l),
(368,616,l),
(250,63,l),
(73,63,l),
(60,0,l),
(511,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
4 3 2 0 1 1 76 0 1 1 20 77 2 1 0 0 3 95 4 1 3 3 21 3 78 0 0 0 10 0 10 17 20 17 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = one;
unicode = 49;
},
{
glyphname = two;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(485,63,l),
(137,62,l),
(459,355,ls),
(520,409,o),
(570,498,o),
(570,552,qs),
(570,599,o),
(522,671,o),
(438,711,o),
(382,711,qs),
(326,711,o),
(215,666,o),
(153,621,q),
(184,568,l),
(241,610,o),
(325,647,o),
(369,647,qs),
(426,647,o),
(499,589,o),
(499,543,qs),
(499,470,o),
(417,395,qs),
(42,53,l),
(31,0,l),
(472,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
11 10 2 2 0 1 76 0 0 0 1 97 0 1 1 26 77 0 2 2 3 95 4 1 3 3 21 3 78 0 0 0 24 0 24 23 37 38 5 7 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = two;
unicode = 50;
},
{
glyphname = three;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(453,44,o),
(517,142,o),
(517,204,qs),
(517,253,o),
(457,333,o),
(404,351,q),
(487,376,o),
(561,475,o),
(561,535,qs),
(561,582,o),
(511,662,o),
(414,711,o),
(343,711,qs),
(217,711,o),
(128,630,q),
(166,580,l),
(210,616,o),
(292,647,o),
(342,647,qs),
(413,647,o),
(488,574,o),
(488,524,qs),
(488,487,o),
(447,426,o),
(378,389,o),
(336,389,qs),
(256,389,l),
(243,327,l),
(302,327,ls),
(369,327,o),
(446,254,o),
(446,200,qs),
(446,135,o),
(351,52,o),
(275,52,qs),
(217,52,o),
(120,100,o),
(78,155,q),
(24,111,l),
(71,52,o),
(192,-11,o),
(268,-11,qs),
(340,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
27 26 2 3 4 36 1 2 3 4 3 2 1 2 3 76 0 3 0 2 1 3 2 105 0 4 4 5 97 0 5 5 26 77 0 1 1 0 97 6 1 0 0 27 0 78 1 0 30 28 24 22 17 15 14 12 8 6 0 42 1 42 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,187,l),
(563,187,l),
(576,250,l),
(479,250,l),
(575,700,l),
(498,700,l),
(29,244,l),
(17,187,l),
(395,187,l),
(355,0,l),
(426,0,l)
);
},
{
closed = 1;
nodes = (
(408,250,l),
(116,250,l),
(484,609,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
13 1 2 1 1 76 5 1 2 3 1 0 4 2 0 104 0 1 1 20 77 6 1 4 4 21 4 78 0 0 12 11 0 10 0 10 17 17 18 17 7 7 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(457,57,o),
(528,171,o),
(528,240,qs),
(528,329,o),
(415,432,o),
(318,432,qs),
(284,432,o),
(222,419,o),
(187,404,q),
(247,637,l),
(578,637,l),
(592,700,l),
(199,700,l),
(114,363,l),
(159,342,l),
(236,374,o),
(296,374,qs),
(371,374,o),
(455,299,o),
(455,233,qs),
(455,182,o),
(406,99,o),
(322,51,o),
(268,51,qs),
(154,51,o),
(79,146,q),
(30,100,l),
(69,47,o),
(191,-11,o),
(264,-11,qs),
(337,-11,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
21 1 2 5 16 15 4 3 4 1 2 2 76 0 5 0 2 1 5 2 105 0 4 4 3 95 0 3 3 20 77 0 1 1 0 97 6 1 0 0 27 0 78 1 0 25 23 20 19 18 17 14 12 7 5 0 30 1 30 7 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = five;
unicode = 53;
},
{
glyphname = six;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(488,50,o),
(558,161,o),
(558,235,qs),
(558,293,o),
(504,385,o),
(406,439,o),
(341,439,qs),
(284,439,o),
(181,389,o),
(139,342,q),
(150,435,o),
(227,571,o),
(342,646,o),
(410,646,qs),
(484,646,o),
(556,588,q),
(596,647,l),
(556,678,o),
(466,711,o),
(409,711,qs),
(339,711,o),
(215,650,o),
(119,537,o),
(65,376,o),
(65,275,qs),
(65,184,o),
(133,56,o),
(243,-11,o),
(307,-11,qs),
(374,-11,o)
);
},
{
closed = 1;
nodes = (
(136,175,o),
(136,289,q),
(175,332,o),
(276,380,o),
(328,380,qs),
(402,380,o),
(486,299,o),
(486,234,qs),
(486,182,o),
(441,100,o),
(364,53,o),
(316,53,qs),
(238,53,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
12 1 2 1 13 1 3 2 40 19 2 4 5 3 76 0 3 0 5 4 3 5 105 0 2 2 1 97 0 1 1 26 77 7 1 4 4 0 97 6 1 0 0 27 0 78 31 30 1 0 38 36 30 42 31 42 23 21 16 14 10 8 0 29 1 29 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(629,644,l),
(641,700,l),
(142,700,l),
(128,637,l),
(547,637,l),
(64,0,l),
(148,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 1 95 0 1 1 20 77 3 1 2 2 21 2 78 0 0 0 6 0 6 17 17 4 7 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(466,42,o),
(536,135,o),
(536,197,qs),
(536,252,o),
(467,338,o),
(412,360,q),
(489,380,o),
(576,475,o),
(576,541,qs),
(576,586,o),
(527,664,o),
(434,711,o),
(366,711,qs),
(303,711,o),
(197,663,o),
(133,576,o),
(133,517,qs),
(133,472,o),
(183,398,o),
(231,378,q),
(173,367,o),
(87,310,o),
(40,229,o),
(40,181,qs),
(40,128,o),
(100,41,o),
(209,-10,o),
(280,-10,qs),
(350,-10,o)
);
},
{
closed = 1;
nodes = (
(203,467,o),
(203,516,qs),
(203,556,o),
(246,617,o),
(317,653,o),
(360,653,qs),
(435,653,o),
(506,586,o),
(506,536,qs),
(506,497,o),
(463,435,o),
(392,399,o),
(349,399,qs),
(282,399,o)
);
},
{
closed = 1;
nodes = (
(154,86,o),
(112,150,o),
(112,189,qs),
(112,254,o),
(211,337,o),
(293,337,qs),
(346,337,o),
(422,299,o),
(464,236,o),
(464,197,qs),
(464,131,o),
(366,47,o),
(286,47,qs),
(233,47,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
22 8 2 5 2 1 76 7 1 2 0 5 4 2 5 105 0 3 3 1 97 0 1 1 26 77 8 1 4 4 0 97 6 1 0 0 30 0 78 44 43 30 29 1 0 51 49 43 56 44 56 37 35 29 42 30 42 16 14 0 28 1 28 9 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = eight;
unicode = 56;
},
{
glyphname = nine;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(157,650,o),
(87,540,o),
(87,465,qs),
(87,408,o),
(141,315,o),
(239,261,o),
(304,261,qs),
(361,261,o),
(464,312,o),
(506,358,q),
(496,266,o),
(418,129,o),
(303,54,o),
(235,54,qs),
(162,54,o),
(89,112,q),
(49,53,l),
(90,22,o),
(179,-11,o),
(236,-11,qs),
(306,-11,o),
(430,50,o),
(526,163,o),
(580,325,o),
(580,425,qs),
(580,516,o),
(512,644,o),
(402,711,o),
(338,711,qs),
(271,711,o)
);
},
{
closed = 1;
nodes = (
(509,525,o),
(509,411,q),
(470,368,o),
(370,320,o),
(317,320,qs),
(244,320,o),
(159,401,o),
(159,466,qs),
(159,518,o),
(204,600,o),
(281,647,o),
(329,647,qs),
(407,647,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
40 19 2 5 4 13 1 2 3 12 1 1 2 3 76 0 5 0 3 2 5 3 105 7 1 4 4 0 97 6 1 0 0 26 77 0 2 2 1 97 0 1 1 27 1 78 31 30 1 0 38 36 30 42 31 42 23 21 16 14 10 8 0 29 1 29 8 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = nine;
unicode = 57;
},
{
glyphname = zero.slash;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(449,56,o),
(534,176,o),
(583,336,o),
(583,430,qs),
(583,523,o),
(526,648,o),
(427,711,o),
(364,711,qs),
(304,711,o),
(195,644,o),
(110,524,o),
(61,364,o),
(61,270,qs),
(61,177,o),
(118,52,o),
(218,-11,o),
(280,-11,qs),
(340,-11,o)
);
},
{
closed = 1;
nodes = (
(169,487,o),
(234,589,o),
(318,646,o),
(364,646,qs),
(425,646,o),
(512,539,o),
(512,426,qs),
(512,348,o),
(475,213,o),
(410,111,o),
(327,54,o),
(280,54,qs),
(240,54,o),
(173,101,o),
(132,199,o),
(132,274,qs),
(132,352,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
0 3 3 1 97 0 1 1 26 77 0 2 2 0 97 4 1 0 0 27 0 78 1 0 31 29 23 21 10 8 0 17 1 17 5 7 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = zero.slash;
},
{
glyphname = fraction;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(584,700,l),
(525,700,l),
(-15,0,l),
(42,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 20 77 2 1 1 1 21 1 78 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = fraction;
unicode = 8260;
},
{
glyphname = onehalf;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,700,l),
(223,700,l),
(144,670,l),
(135,626,l),
(193,647,l),
(144,416,l),
(194,416,l)
);
},
{
closed = 1;
nodes = (
(599,700,l),
(540,700,l),
(0,0,l),
(57,0,l)
);
},
{
closed = 1;
nodes = (
(496,43,l),
(364,43,l),
(460,114,ls),
(498,142,o),
(527,189,o),
(527,217,qs),
(527,249,o),
(481,288,o),
(441,288,qs),
(388,288,o),
(326,242,q),
(351,209,l),
(378,230,o),
(415,243,o),
(434,243,qs),
(454,243,o),
(478,222,o),
(478,205,qs),
(478,190,o),
(457,164,o),
(432,144,qs),
(295,36,l),
(288,0,l),
(487,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 81 values pushed */
2 1 2 1 0 23 22 2 6 4 2 76 2 1 0 1 0 133 8 1 1 5 1 133 0 5 0 4 6 5 4 105 0 6 3 3 6 87 0 6 6 3 95 10 7 9 3 3 6 3 79 11 11 7 7 0 0 11 34 11 34 33 32 26 24 20 18 7 10 7 10 9 8 0 6 0 6 20 11 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = onehalf;
unicode = 189;
},
{
glyphname = onequarter;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(254,700,l),
(223,700,l),
(144,670,l),
(135,626,l),
(193,647,l),
(144,416,l),
(194,416,l)
);
},
{
closed = 1;
nodes = (
(599,700,l),
(540,700,l),
(0,0,l),
(57,0,l)
);
},
{
closed = 1;
nodes = (
(480,68,l),
(514,68,l),
(523,109,l),
(489,109,l),
(526,284,l),
(469,284,l),
(282,109,l),
(273,68,l),
(430,68,l),
(416,0,l),
(466,0,l)
);
},
{
closed = 1;
nodes = (
(439,109,l),
(333,109,l),
(465,232,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 11 values pushed */
2 1 2 1 0 24 1 6 5 2 76
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
2 1 0 1 0 133 10 1 1 5 1 133 0 5 6 5 133 12 8 11 3 3 4 4 3 113 9 1 6 4 4 6 87 9 1 6 6 4 96 7 1 4 6 4 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
2 1 0 1 0 133 10 1 1 5 1 133 0 5 6 5 133 12 8 11 3 3 4 3 134 9 1 6 4 4 6 87 9 1 6 6 4 96 7 1 4 6 4 80
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
11 11 7 7 0 0 23 22 11 21 11 21 20 19 18 17 16 15 13 12 7 10 7 10 9 8 0 6 0 6 20 13 7 23
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = onequarter;
unicode = 188;
},
{
glyphname = threequarters;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(297,464,o),
(297,501,qs),
(297,522,o),
(268,553,o),
(244,559,q),
(277,565,o),
(317,608,o),
(317,636,qs),
(317,666,o),
(266,705,o),
(225,705,qs),
(168,705,o),
(118,669,q),
(141,633,l),
(163,648,o),
(199,660,o),
(217,660,qs),
(237,660,o),
(265,641,o),
(265,626,qs),
(265,605,o),
(229,578,o),
(201,578,qs),
(178,578,l),
(170,538,l),
(198,538,ls),
(221,538,o),
(248,520,o),
(248,504,qs),
(248,485,o),
(215,457,o),
(184,457,qs),
(160,457,o),
(123,474,o),
(107,490,q),
(73,455,l),
(114,413,o),
(181,413,qs),
(229,413,o)
);
},
{
closed = 1;
nodes = (
(619,700,l),
(560,700,l),
(20,0,l),
(77,0,l)
);
},
{
closed = 1;
nodes = (
(479,68,l),
(513,68,l),
(522,109,l),
(488,109,l),
(525,284,l),
(468,284,l),
(281,109,l),
(272,68,l),
(429,68,l),
(415,0,l),
(465,0,l)
);
},
{
closed = 1;
nodes = (
(438,109,l),
(332,109,l),
(464,232,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
25 1 4 5 24 1 3 4 33 1 2 3 3 1 1 2 2 1 0 1 56 1 10 9 6 76
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
25 1 4 6 24 1 3 4 33 1 2 3 3 1 1 2 2 1 0 1 56 1 10 9 6 76
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
19
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 62 values pushed */
0 9 0 10 0 9 10 128 16 12 15 3 7 8 8 7 113 6 1 5 0 4 3 5 4 105 0 3 0 2 1 3 2 105 0 1 14 1 0 9 1 0 105 13 1 10 8 8 10 87 13 1 10 10 8 96 11 1 8 10 8 80
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
46
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 61 values pushed */
0 9 0 10 0 9 10 128 16 12 15 3 7 8 7 134 6 1 5 0 4 3 5 4 105 0 3 0 2 1 3 2 105 0 1 14 1 0 9 1 0 105 13 1 10 8 8 10 87 13 1 10 10 8 96 11 1 8 10 8 80
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 68 values pushed */
0 6 5 4 5 6 4 128 0 9 0 10 0 9 10 128 16 12 15 3 7 8 7 134 0 5 0 4 3 5 4 105 0 3 0 2 1 3 2 105 0 1 14 1 0 9 1 0 105 13 1 10 8 8 10 87 13 1 10 10 8 96 11 1 8 10 8 80
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 43 values pushed */
43 43 39 39 1 0 55 54 43 53 43 53 52 51 50 49 48 47 45 44 39 42 39 42 41 40 28 26 22 20 16 14 13 11 7 5 0 38 1 38 17 7 22
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 600;
}
);
note = threequarters;
unicode = 190;
},
{
glyphname = uni2080;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(386,56,o),
(433,157,o),
(433,217,qs),
(433,280,o),
(365,355,o),
(308,355,qs),
(261,355,o),
(183,294,o),
(136,194,o),
(136,133,qs),
(136,70,o),
(204,-5,o),
(261,-5,qs),
(308,-5,o)
);
},
{
closed = 1;
nodes = (
(185,91,o),
(185,135,qs),
(185,182,o),
(217,262,o),
(271,310,o),
(302,310,qs),
(340,310,o),
(384,260,o),
(384,216,qs),
(384,169,o),
(352,89,o),
(298,41,o),
(266,41,qs),
(229,41,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 97 0 1 1 38 77 5 1 2 2 0 97 4 1 0 0 39 0 78 15 14 1 0 22 20 14 27 15 27 8 6 0 13 1 13 6 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2080;
unicode = 8320;
},
{
glyphname = uni2081;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(373,350,l),
(341,350,l),
(244,315,l),
(233,266,l),
(311,293,l),
(248,0,l),
(298,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */
2 1 2 1 0 1 76 0 0 0 36 77 2 1 1 1 37 1 78 0 0 0 6 0 6 20 3 8 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2081;
unicode = 8321;
},
{
glyphname = uni2082;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(378,43,l),
(209,43,l),
(350,156,ls),
(387,185,o),
(418,236,o),
(418,267,qs),
(418,306,o),
(359,355,o),
(312,355,qs),
(254,355,o),
(188,309,q),
(210,272,l),
(238,292,o),
(281,310,o),
(303,310,qs),
(332,310,o),
(367,281,o),
(367,258,qs),
(367,218,o),
(317,180,qs),
(139,37,l),
(131,0,l),
(369,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
11 10 2 2 0 1 76 0 0 0 1 97 0 1 1 38 77 0 2 2 3 95 4 1 3 3 37 3 78 0 0 0 22 0 22 22 36 38 5 8 25
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2082;
unicode = 8322;
},
{
glyphname = uni2083;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(356,24,o),
(392,73,o),
(392,103,qs),
(392,130,o),
(357,168,o),
(326,176,q),
(365,184,o),
(416,233,o),
(416,264,qs),
(416,304,o),
(353,355,o),
(306,355,qs),
(245,355,o),
(183,316,q),
(205,277,l),
(260,309,o),
(299,309,qs),
(328,309,o),
(364,279,o),
(364,256,qs),
(364,231,o),
(316,196,o),
(279,196,qs),
(251,196,l),
(243,155,l),
(274,155,ls),
(306,155,o),
(343,126,o),
(343,100,qs),
(343,75,o),
(295,40,o),
(260,40,qs),
(203,40,o),
(161,84,q),
(127,49,l),
(174,-5,o),
(257,-5,qs),
(295,-5,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */
23 1 4 5 22 1 3 4 31 1 2 3 3 2 2 1 2 4 76 0 3 0 2 1 3 2 105 0 4 4 5 97 0 5 5 38 77 0 1 1 0 97 6 1 0 0 39 0 78 1 0 26 24 21 19 15 13 12 10 6 4 0 37 1 37 7 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2083;
unicode = 8323;
},
{
glyphname = uni2084;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,88,l),
(410,88,l),
(420,130,l),
(378,130,l),
(425,350,l),
(368,350,l),
(135,129,l),
(127,88,l),
(319,88,l),
(300,0,l),
(350,0,l)
);
},
{
closed = 1;
nodes = (
(328,130,l),
(192,130,l),
(362,292,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
13 1 2 1 1 76 5 1 2 3 1 0 4 2 0 104 0 1 1 36 77 6 1 4 4 37 4 78 0 0 12 11 0 10 0 10 17 17 18 17 7 8 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2084;
unicode = 8324;
},
{
glyphname = uni2085;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(360,28,o),
(398,85,o),
(398,120,qs),
(398,164,o),
(335,216,o),
(283,216,qs),
(255,216,o),
(225,207,q),
(251,308,l),
(420,308,l),
(429,350,l),
(217,350,l),
(175,180,l),
(204,167,l),
(233,178,o),
(270,178,qs),
(306,178,o),
(346,145,o),
(346,114,qs),
(346,81,o),
(295,37,o),
(258,37,qs),
(209,37,o),
(162,78,q),
(133,41,l),
(180,-5,o),
(257,-5,qs),
(296,-5,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
19 14 2 2 5 13 3 2 3 1 2 2 76 0 5 0 2 1 5 2 105 0 4 4 3 95 0 3 3 36 77 0 1 1 0 97 6 1 0 0 39 0 78 1 0 22 20 18 17 16 15 12 10 6 4 0 27 1 27 7 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2085;
unicode = 8325;
},
{
glyphname = uni2086;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(369,29,o),
(406,86,o),
(406,120,qs),
(406,161,o),
(348,215,o),
(304,215,qs),
(276,215,o),
(222,193,o),
(201,173,q),
(212,232,o),
(285,310,o),
(334,310,qs),
(367,310,o),
(407,287,q),
(434,327,l),
(392,355,o),
(341,355,qs),
(288,355,o),
(200,294,o),
(148,193,o),
(148,132,qs),
(148,69,o),
(216,-5,o),
(271,-5,qs),
(308,-5,o)
);
},
{
closed = 1;
nodes = (
(197,91,o),
(197,139,q),
(237,176,o),
(284,176,qs),
(316,176,o),
(357,141,o),
(357,113,qs),
(357,82,o),
(309,39,o),
(277,39,qs),
(237,39,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
9 1 2 1 10 1 3 2 33 15 2 4 5 3 76 0 3 0 5 4 3 5 105 0 2 2 1 97 0 1 1 38 77 7 1 4 4 0 97 6 1 0 0 39 0 78 26 25 1 0 32 30 25 35 26 35 19 17 13 11 8 6 0 24 1 24 8 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2086;
unicode = 8326;
},
{
glyphname = uni2087;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(448,311,l),
(455,350,l),
(193,350,l),
(183,308,l),
(390,308,l),
(155,0,l),
(217,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 0 0 1 95 0 1 1 36 77 3 1 2 2 37 2 78 0 0 0 6 0 6 17 17 4 8 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2087;
unicode = 8327;
},
{
glyphname = uni2088;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(363,24,o),
(400,73,o),
(400,103,qs),
(400,129,o),
(368,169,o),
(341,179,q),
(376,188,o),
(421,238,o),
(421,269,qs),
(421,306,o),
(358,355,o),
(311,355,qs),
(276,355,o),
(218,327,o),
(183,282,o),
(183,254,qs),
(183,207,o),
(229,186,q),
(189,178,o),
(136,121,o),
(136,86,qs),
(136,46,o),
(205,-5,o),
(260,-5,qs),
(299,-5,o)
);
},
{
closed = 1;
nodes = (
(232,231,o),
(232,253,qs),
(232,279,o),
(276,314,o),
(307,314,qs),
(334,314,o),
(371,285,o),
(371,263,qs),
(371,238,o),
(327,202,o),
(297,202,qs),
(269,202,o)
);
},
{
closed = 1;
nodes = (
(187,69,o),
(187,95,qs),
(187,123,o),
(237,162,o),
(273,162,qs),
(307,162,o),
(350,130,o),
(350,104,qs),
(350,76,o),
(299,36,o),
(264,36,qs),
(230,36,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
18 6 2 5 2 1 76 7 1 2 0 5 4 2 5 105 0 3 3 1 97 0 1 1 38 77 8 1 4 4 0 97 6 1 0 0 39 0 78 38 37 26 25 1 0 44 42 37 48 38 48 32 30 25 36 26 36 13 11 0 24 1 24 9 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2088;
unicode = 8328;
},
{
glyphname = uni2089;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(213,320,o),
(176,263,o),
(176,229,qs),
(176,188,o),
(234,134,o),
(278,134,qs),
(306,134,o),
(360,157,o),
(381,176,q),
(370,117,o),
(297,39,o),
(248,39,qs),
(215,39,o),
(175,62,q),
(148,22,l),
(190,-6,o),
(241,-6,qs),
(294,-6,o),
(382,55,o),
(434,156,o),
(434,217,qs),
(434,280,o),
(367,354,o),
(311,354,qs),
(274,354,o)
);
},
{
closed = 1;
nodes = (
(385,258,o),
(385,210,q),
(345,173,o),
(298,173,qs),
(266,173,o),
(225,208,o),
(225,236,qs),
(225,267,o),
(273,310,o),
(305,310,qs),
(346,310,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
33 15 2 5 4 10 1 2 3 9 1 1 2 3 76 0 5 0 3 2 5 3 105 7 1 4 4 0 97 6 1 0 0 38 77 0 2 2 1 97 0 1 1 39 1 78 26 25 1 0 32 30 25 35 26 35 19 17 13 11 8 6 0 24 1 24 8 8 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2089;
unicode = 8329;
},
{
glyphname = uni2070;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (74,350);
ref = uni2080;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 2
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2070;
unicode = 8304;
},
{
glyphname = uni00B9;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (74,350);
ref = uni2081;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni00B9;
unicode = 185;
},
{
glyphname = uni00B2;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (74,350);
ref = uni2082;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni00B2;
unicode = 178;
},
{
glyphname = uni00B3;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (74,350);
ref = uni2083;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni00B3;
unicode = 179;
},
{
glyphname = uni2074;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (74,350);
ref = uni2084;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 2
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2074;
unicode = 8308;
},
{
glyphname = uni2075;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (74,350);
ref = uni2085;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2075;
unicode = 8309;
},
{
glyphname = uni2076;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (74,350);
ref = uni2086;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 2
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2076;
unicode = 8310;
},
{
glyphname = uni2077;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (74,350);
ref = uni2087;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 1
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2077;
unicode = 8311;
},
{
glyphname = uni2078;
layers = (
{
layerId = m01;
shapes = (
{
alignment = -1;
pos = (74,350);
ref = uni2088;
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
0 3
PUSHW[ ]	/* 1 value pushed */
350
PUSHB[ ]	/* 1 value pushed */
53
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2078;
unicode = 8312;
},
{
glyphname = uni2079;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(287,670,o),
(250,613,o),
(250,579,qs),
(250,538,o),
(308,484,o),
(352,484,qs),
(380,484,o),
(434,507,o),
(455,526,q),
(444,467,o),
(371,389,o),
(322,389,qs),
(289,389,o),
(249,412,q),
(222,372,l),
(264,344,o),
(315,344,qs),
(368,344,o),
(456,405,o),
(508,506,o),
(508,567,qs),
(508,630,o),
(441,704,o),
(385,704,qs),
(348,704,o)
);
},
{
closed = 1;
nodes = (
(459,608,o),
(459,560,q),
(419,523,o),
(372,523,qs),
(340,523,o),
(299,558,o),
(299,586,qs),
(299,617,o),
(347,660,o),
(379,660,qs),
(420,660,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
33 15 2 5 4 10 1 2 3 9 1 1 2 3 76 0 5 0 3 2 5 3 105 7 1 4 4 0 97 6 1 0 0 46 77 0 2 2 1 97 0 1 1 47 1 78 26 25 1 0 32 30 25 35 26 35 19 17 13 11 8 6 0 24 1 24 8 9 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = uni2079;
unicode = 8313;
},
{
glyphname = caronSlovak;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(442,737,l),
(367,722,l),
(318,527,l),
(376,527,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */
2 1 0 74 1 1 0 0 118 0 0 0 3 0 3 2 6 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = caronSlovak;
},
{
glyphname = commabelowcomb;
lastChange = "2025-08-22 17:10:52 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(281,-87,l),
(204,-87,l),
(117,-274,l),
(170,-274,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
0 0 1 0 133 2 1 1 1 118 0 0 0 3 0 3 17 3 7 23
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = commabelowcomb;
},
{
glyphname = cordinal;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(474,361,q),
(443,412,l),
(388,373,o),
(339,373,qs),
(288,373,o),
(222,442,o),
(222,494,qs),
(222,537,o),
(265,610,o),
(334,655,o),
(373,655,qs),
(405,655,o),
(465,621,o),
(482,594,q),
(530,633,l),
(506,668,o),
(420,711,o),
(373,711,qs),
(315,711,o),
(218,652,o),
(160,553,o),
(160,494,qs),
(160,443,o),
(206,363,o),
(287,317,o),
(339,317,qs),
(413,317,o)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
24 12 11 3 3 2 25 1 0 3 2 76 0 1 0 2 3 1 2 105 0 3 0 0 3 89 0 3 3 0 97 4 1 0 3 0 81 1 0 23 21 16 14 9 7 0 26 1 26 5 6 22
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = cordinal;
},
{
glyphname = reversequotedblleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(170,750,l),
(310,519,l),
(367,519,l),
(268,750,l)
);
},
{
closed = 1;
nodes = (
(330,750,l),
(470,519,l),
(527,519,l),
(428,750,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */
3 1 1 0 0 1 87 3 1 1 1 0 95 2 1 0 1 0 79 17 17 17 16 4 6 26
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = reversequotedblleft;
},
{
glyphname = reversequoteleft;
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(245,750,l),
(385,519,l),
(442,519,l),
(343,750,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */
0 1 0 1 133 0 0 0 118 17 16 2 6 24
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = reversequoteleft;
},
{
glyphname = hyphen_greater.liga;
lastChange = "2025-09-06 11:47:34 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(922,395,ls),
(948,364,o),
(969,351,q),
(129,351,l),
(129,291,l),
(970,291,l),
(952,280,o),
(922,247,qs),
(758,62,l),
(808,18,l),
(1071,321,l),
(808,624,l),
(758,581,l)
);
}
);
width = 1200;
}
);
},
{
glyphname = colon_colon.liga;
lastChange = "2025-09-06 11:47:39 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(399,364,qs),
(431,364,o),
(474,409,o),
(474,473,o),
(431,515,o),
(399,515,qs),
(368,515,o),
(326,473,o),
(326,409,o),
(368,364,o)
);
},
{
closed = 1;
nodes = (
(800,364,qs),
(832,364,o),
(875,409,o),
(875,473,o),
(832,515,o),
(800,515,qs),
(769,515,o),
(727,473,o),
(727,409,o),
(769,364,o)
);
},
{
closed = 1;
nodes = (
(368,-10,o),
(399,-10,qs),
(431,-10,o),
(474,34,o),
(474,66,qs),
(474,97,o),
(431,142,o),
(399,142,qs),
(368,142,o),
(326,97,o),
(326,66,qs),
(326,34,o)
);
},
{
closed = 1;
nodes = (
(769,-10,o),
(800,-10,qs),
(832,-10,o),
(875,34,o),
(875,66,qs),
(875,97,o),
(832,142,o),
(800,142,qs),
(769,142,o),
(727,97,o),
(727,66,qs),
(727,34,o)
);
}
);
width = 1200;
}
);
},
{
glyphname = exclam_equal.liga;
lastChange = "2025-09-06 11:47:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(701,443,l),
(853,705,l),
(803,731,l),
(634,443,l),
(115,443,l),
(115,384,l),
(600,384,l),
(525,254,l),
(115,254,l),
(115,195,l),
(490,195,l),
(346,-52,l),
(399,-79,l),
(558,195,l),
(1085,195,l),
(1085,254,l),
(592,254,l),
(667,384,l),
(1085,384,l),
(1085,443,l)
);
}
);
width = 1200;
}
);
},
{
glyphname = exclam_equal_equal.liga;
lastChange = "2025-09-06 11:47:50 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1056,537,l),
(1153,705,l),
(1102,731,l),
(990,537,l),
(114,537,l),
(114,479,l),
(956,479,l),
(880,349,l),
(114,349,l),
(114,290,l),
(845,290,l),
(770,161,l),
(114,161,l),
(114,101,l),
(736,101,l),
(646,-52,l),
(700,-79,l),
(803,101,l),
(1685,101,l),
(1685,161,l),
(838,161,l),
(913,290,l),
(1685,290,l),
(1685,349,l),
(947,349,l),
(1022,479,l),
(1685,479,l),
(1685,537,l)
);
}
);
width = 1800;
}
);
},
{
glyphname = equal_equal.liga;
lastChange = "2025-09-06 11:48:31 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(115,384,l),
(1085,384,l),
(1085,443,l),
(115,443,l)
);
},
{
closed = 1;
nodes = (
(115,195,l),
(1085,195,l),
(1085,254,l),
(115,254,l)
);
}
);
width = 1200;
}
);
},
{
glyphname = equal_equal_equal.liga;
lastChange = "2025-09-06 11:48:36 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(114,479,l),
(1685,479,l),
(1685,537,l),
(114,537,l)
);
},
{
closed = 1;
nodes = (
(114,290,l),
(1685,290,l),
(1685,349,l),
(114,349,l)
);
},
{
closed = 1;
nodes = (
(114,101,l),
(1685,101,l),
(1685,161,l),
(114,161,l)
);
}
);
width = 1800;
}
);
},
{
glyphname = equal_greater.liga;
lastChange = "2025-09-06 11:48:41 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(849,500,ls),
(881,463,o),
(915,443,q),
(107,443,l),
(107,384,l),
(951,384,l),
(1009,319,l),
(951,254,l),
(107,254,l),
(107,195,l),
(915,195,l),
(881,176,o),
(849,139,qs),
(779,59,l),
(829,16,l),
(1092,319,l),
(829,622,l),
(779,578,l)
);
}
);
width = 1200;
}
);
},
{
glyphname = greater_equal.liga;
lastChange = "2025-09-06 11:48:45 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(878,468,l),
(331,717,l),
(307,662,l),
(819,431,l),
(307,201,l),
(331,146,l),
(878,395,l)
);
},
{
closed = 1;
nodes = (
(345,-84,l),
(892,165,l),
(869,217,l),
(322,-28,l)
);
}
);
width = 1200;
}
);
},
{
glyphname = less_hyphen_greater.liga;
lastChange = "2025-09-06 11:48:50 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1522,395,ls),
(1548,364,o),
(1569,351,q),
(230,351,l),
(251,364,o),
(277,395,qs),
(442,581,l),
(392,624,l),
(129,321,l),
(392,18,l),
(442,62,l),
(277,247,ls),
(247,280,o),
(229,291,q),
(1570,291,l),
(1552,280,o),
(1522,247,qs),
(1358,62,l),
(1408,18,l),
(1671,321,l),
(1408,624,l),
(1358,581,l)
);
}
);
width = 1800;
}
);
},
{
glyphname = less_equal.liga;
lastChange = "2025-09-06 11:48:56 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(321,468,l),
(321,395,l),
(868,146,l),
(892,201,l),
(380,431,l),
(892,662,l),
(868,717,l)
);
},
{
closed = 1;
nodes = (
(877,-28,l),
(330,217,l),
(307,165,l),
(854,-84,l)
);
}
);
width = 1200;
}
);
},
{
glyphname = less_equal_greater.liga;
lastChange = "2025-09-06 11:49:02 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(1478,500,ls),
(1510,463,o),
(1544,443,q),
(256,443,l),
(288,462,o),
(321,500,qs),
(392,578,l),
(342,622,l),
(79,319,l),
(342,16,l),
(392,59,l),
(321,139,ls),
(288,177,o),
(256,195,q),
(1544,195,l),
(1510,176,o),
(1478,139,qs),
(1408,59,l),
(1458,16,l),
(1721,319,l),
(1458,622,l),
(1408,578,l)
);
},
{
closed = 1;
nodes = (
(220,384,l),
(1580,384,l),
(1638,319,l),
(1580,254,l),
(220,254,l),
(162,319,l)
);
}
);
width = 1800;
}
);
},
{
glyphname = pipe_greater.liga;
lastChange = "2025-09-06 11:49:21 +0000";
layers = (
{
layerId = m01;
shapes = (
{
closed = 1;
nodes = (
(278,-93,l),
(340,-93,l),
(922,282,l),
(922,362,l),
(340,731,l),
(278,731,l)
);
},
{
closed = 1;
nodes = (
(870,321,l),
(340,-18,l),
(340,661,l)
);
}
);
width = 1200;
}
);
}
);
instances = (
{
instanceInterpolations = {
m01 = 1;
};
name = Italic;
properties = (
{
key = postscriptFontName;
value = "RedHatMono-Italic";
},
{
key = postscriptFullNames;
values = (
{
language = ENG;
value = "Red Hat Mono Italic";
}
);
}
);
}
);
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = ENG;
value = "Copyright 2024 The Red Hat Project Authors (https://github.com/RedHatOfficial/RedHatFont)";
}
);
},
{
key = designers;
values = (
{
language = ENG;
value = "Pentagram, MCKL";
}
);
},
{
key = designerURL;
value = "https://pentagram.com/,https://www.mckltype.com";
},
{
key = licenses;
values = (
{
language = ENG;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://openfontlicense.org";
}
);
},
{
key = licenseURL;
value = "https://openfontlicense.org";
},
{
key = manufacturers;
values = (
{
language = ENG;
value = MCKL;
}
);
},
{
key = manufacturerURL;
value = "https://www.mckltype.com";
}
);
settings = {
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
};
unitsPerEm = 1000;
versionMajor = 1;
versionMinor = 30;
}
